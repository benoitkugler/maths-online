// Code generated by gomacro/typescript/axios_api.go. DO NOT EDIT

import type { AxiosResponse } from "axios";
import Axios from "axios";

class DateTag {
  private _ = "D" as const;
}

// AAAA-MM-YY date format
export type Date_ = string & DateTag;

class TimeTag {
  private _ = "T" as const;
}

// ISO date-time string
export type Time = string & TimeTag;

// github.com/benoitkugler/maths-online/server/src/maths/expression.Variable
export interface Variable {
  Indice: string;
  Name: number;
}
// github.com/benoitkugler/maths-online/server/src/maths/functiongrapher.FunctionDecoration
export interface FunctionDecoration {
  Label: string;
  Color: string;
}

export enum BlockKind {
  ExpressionFieldBlock = "ExpressionFieldBlock",
  FigureBlock = "FigureBlock",
  FormulaBlock = "FormulaBlock",
  FunctionPointsFieldBlock = "FunctionPointsFieldBlock",
  FunctionsGraphBlock = "FunctionsGraphBlock",
  GeometricConstructionFieldBlock = "GeometricConstructionFieldBlock",
  NumberFieldBlock = "NumberFieldBlock",
  OrderedListFieldBlock = "OrderedListFieldBlock",
  ProofFieldBlock = "ProofFieldBlock",
  RadioFieldBlock = "RadioFieldBlock",
  SignTableBlock = "SignTableBlock",
  SignTableFieldBlock = "SignTableFieldBlock",
  TableBlock = "TableBlock",
  TableFieldBlock = "TableFieldBlock",
  TextBlock = "TextBlock",
  TreeBlock = "TreeBlock",
  TreeFieldBlock = "TreeFieldBlock",
  VariationTableBlock = "VariationTableBlock",
  VariationTableFieldBlock = "VariationTableFieldBlock",
  VectorFieldBlock = "VectorFieldBlock",
}

// github.com/benoitkugler/maths-online/server/src/maths/questions.Block
export interface Block {
  Kind: BlockKind;
  Data:
    | ExpressionFieldBlock
    | FigureBlock
    | FormulaBlock
    | FunctionPointsFieldBlock
    | FunctionsGraphBlock
    | GeometricConstructionFieldBlock
    | NumberFieldBlock
    | OrderedListFieldBlock
    | ProofFieldBlock
    | RadioFieldBlock
    | SignTableBlock
    | SignTableFieldBlock
    | TableBlock
    | TableFieldBlock
    | TextBlock
    | TreeBlock
    | TreeFieldBlock
    | VariationTableBlock
    | VariationTableFieldBlock
    | VectorFieldBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.Co
export type Co = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ComparisonLevel
export enum ComparisonLevel {
  AsLinearEquation = 102,
  ExpandedSubstitutions = 2,
  SimpleSubstitutions = 1,
  Strict = 0,
}

export const ComparisonLevelLabels: { [key in ComparisonLevel]: string } = {
  [ComparisonLevel.AsLinearEquation]: "",
  [ComparisonLevel.ExpandedSubstitutions]: "Compl√®te",
  [ComparisonLevel.SimpleSubstitutions]: "Simple",
  [ComparisonLevel.Strict]: "Exacte",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.CoordExpression
export interface CoordExpression {
  X: string;
  Y: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.Enonce
export type Enonce = Block[] | null;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ErrParameters
export interface ErrParameters {
  Origin: string;
  Details: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ErrQuestionInvalid
export interface ErrQuestionInvalid {
  ErrParameters: ErrParameters;
  ErrEnonce: errEnonce;
  ErrCorrection: errEnonce;
  Kind: ErrorKind;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ErrorKind
export enum ErrorKind {
  ErrParameters_ = 0,
  ErrEnonce = 1,
  ErrCorrection = 2,
}

export const ErrorKindLabels: { [key in ErrorKind]: string } = {
  [ErrorKind.ErrParameters_]: "",
  [ErrorKind.ErrEnonce]: "",
  [ErrorKind.ErrCorrection]: "",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.ExpressionFieldBlock
export interface ExpressionFieldBlock {
  Expression: string;
  Label: Interpolated;
  ComparisonLevel: ComparisonLevel;
  ShowFractionHelp: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FigureBlock
export interface FigureBlock {
  Drawings: RandomDrawings;
  Bounds: RepereBounds;
  ShowGrid: boolean;
  ShowOrigin: boolean;
}

export enum FiguresOrGraphsKind {
  FigureBlock = "FigureBlock",
  FunctionsGraphBlock = "FunctionsGraphBlock",
}

// github.com/benoitkugler/maths-online/server/src/maths/questions.FiguresOrGraphs
export interface FiguresOrGraphs {
  Kind: FiguresOrGraphsKind;
  Data: FigureBlock | FunctionsGraphBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FormulaBlock
export interface FormulaBlock {
  Parts: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionArea
export interface FunctionArea {
  Bottom: Interpolated;
  Top: Interpolated;
  Left: string;
  Right: string;
  Color: ColorHex;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionDefinition
export interface FunctionDefinition {
  Function: string;
  Decoration: FunctionDecoration;
  Variable: Variable;
  From: string;
  To: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionPoint
export interface FunctionPoint {
  Function: Interpolated;
  X: string;
  Color: ColorHex;
  Legend: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionPointsFieldBlock
export interface FunctionPointsFieldBlock {
  IsDiscrete: boolean;
  Function: string;
  Label: string;
  Variable: Variable;
  XGrid: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionsGraphBlock
export interface FunctionsGraphBlock {
  FunctionExprs: FunctionDefinition[] | null;
  FunctionVariations: VariationTableBlock[] | null;
  SequenceExprs: FunctionDefinition[] | null;
  Areas: FunctionArea[] | null;
  Points: FunctionPoint[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFAffineLine
export interface GFAffineLine {
  Label: string;
  A: string;
  B: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFPoint
export interface GFPoint {
  Answer: CoordExpression;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFVector
export interface GFVector {
  Answer: CoordExpression;
  AnswerOrigin: CoordExpression;
  MustHaveOrigin: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFVectorPair
export interface GFVectorPair {
  Criterion: VectorPairCriterion;
}

export enum GeoFieldKind {
  GFAffineLine = "GFAffineLine",
  GFPoint = "GFPoint",
  GFVector = "GFVector",
  GFVectorPair = "GFVectorPair",
}

// github.com/benoitkugler/maths-online/server/src/maths/questions.GeoField
export interface GeoField {
  Kind: GeoFieldKind;
  Data: GFAffineLine | GFPoint | GFVector | GFVectorPair;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GeometricConstructionFieldBlock
export interface GeometricConstructionFieldBlock {
  Field: GeoField;
  Background: FiguresOrGraphs;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.In
export type In = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.Interpolated
export type Interpolated = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.NumberFieldBlock
export interface NumberFieldBlock {
  Expression: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.OrderedListFieldBlock
export interface OrderedListFieldBlock {
  Label: Interpolated;
  Answer: Interpolated[] | null;
  AdditionalProposals: Interpolated[] | null;
}

export enum ParameterEntryKind {
  Co = "Co",
  In = "In",
  Rp = "Rp",
}

// github.com/benoitkugler/maths-online/server/src/maths/questions.ParameterEntry
export interface ParameterEntry {
  Kind: ParameterEntryKind;
  Data: Co | In | Rp;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.Parameters
export type Parameters = ParameterEntry[] | null;

export enum ProofAssertionKind {
  ProofEquality = "ProofEquality",
  ProofInvalid = "ProofInvalid",
  ProofNode = "ProofNode",
  ProofSequence = "ProofSequence",
  ProofStatement = "ProofStatement",
}

// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofAssertion
export interface ProofAssertion {
  Kind: ProofAssertionKind;
  Data:
    | ProofEquality
    | ProofInvalid
    | ProofNode
    | ProofSequence
    | ProofStatement;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofAssertions
export type ProofAssertions = ProofAssertion[] | null;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofEquality
export interface ProofEquality {
  Terms: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofFieldBlock
export interface ProofFieldBlock {
  Answer: ProofSequence;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofInvalid
export type ProofInvalid = Record<string, never>;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofNode
export interface ProofNode {
  Left: ProofAssertion;
  Right: ProofAssertion;
  Op: Binary;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofSequence
export interface ProofSequence {
  Parts: ProofAssertions;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofStatement
export interface ProofStatement {
  Content: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.QuestionPage
export interface QuestionPage {
  enonce: Enonce;
  parameters: Parameters;
  correction: Enonce;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.RadioFieldBlock
export interface RadioFieldBlock {
  Answer: string;
  Proposals: Interpolated[] | null;
  AsDropDown: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.Rp
export interface Rp {
  expression: string;
  variable: Variable;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.SignTableBlock
export interface SignTableBlock {
  Xs: string[] | null;
  Functions: FunctionSign[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.SignTableFieldBlock
export interface SignTableFieldBlock {
  Answer: SignTableBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TableBlock
export interface TableBlock {
  HorizontalHeaders: TextPart[] | null;
  VerticalHeaders: TextPart[] | null;
  Values: (TextPart[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TableFieldBlock
export interface TableFieldBlock {
  HorizontalHeaders: TextPart[] | null;
  VerticalHeaders: TextPart[] | null;
  Answer: (string[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TextBlock
export interface TextBlock {
  Parts: Interpolated;
  Bold: boolean;
  Italic: boolean;
  Smaller: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TextKind
export enum TextKind {
  Text = 0,
  StaticMath = 1,
  Expression = 2,
}

export const TextKindLabels: { [key in TextKind]: string } = {
  [TextKind.Text]: "Text simple",
  [TextKind.StaticMath]: "Code LaTeX",
  [TextKind.Expression]: "Expression",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.TextPart
export interface TextPart {
  Content: string;
  Kind: TextKind;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeBlock
export interface TreeBlock {
  EventsProposals: Interpolated[] | null;
  AnswerRoot: TreeNodeAnswer;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeFieldBlock
export interface TreeFieldBlock {
  Answer: TreeBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeNodeAnswer
export interface TreeNodeAnswer {
  Children: TreeNodeAnswer[] | null;
  Probabilities: string[] | null;
  Value: number;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VariationTableBlock
export interface VariationTableBlock {
  Label: Interpolated;
  Xs: string[] | null;
  Fxs: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VariationTableFieldBlock
export interface VariationTableFieldBlock {
  Answer: VariationTableBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VectorFieldBlock
export interface VectorFieldBlock {
  Answer: CoordExpression;
  AcceptColinear: boolean;
  DisplayColumn: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VectorPairCriterion
export enum VectorPairCriterion {
  VectorEquals = 0,
  VectorColinear = 1,
  VectorOrthogonal = 2,
}

export const VectorPairCriterionLabels: {
  [key in VectorPairCriterion]: string;
} = {
  [VectorPairCriterion.VectorEquals]: "Vecteurs √©gaux",
  [VectorPairCriterion.VectorColinear]: "Vecteurs colin√©aires",
  [VectorPairCriterion.VectorOrthogonal]: "Vecteurs orthogonaux",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.errEnonce
export interface errEnonce {
  Error: string;
  Block: number;
  Vars: { [key: string]: string } | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Binary
export enum Binary {
  Invalid = 0,
  And = 1,
  Or = 2,
}

export const BinaryLabels: { [key in Binary]: string } = {
  [Binary.Invalid]: "Invalide",
  [Binary.And]: "Et",
  [Binary.Or]: "Ou",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FunctionSign
export interface FunctionSign {
  Label: string;
  FxSymbols: SignSymbol[] | null;
  Signs: boolean[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions/client.SignSymbol
export enum SignSymbol {
  Nothing = 0,
  Zero = 1,
  ForbiddenValue = 2,
}

export const SignSymbolLabels: { [key in SignSymbol]: string } = {
  [SignSymbol.Nothing]: "",
  [SignSymbol.Zero]: "0",
  [SignSymbol.ForbiddenValue]: "||",
};

// github.com/benoitkugler/maths-online/server/src/maths/repere.ColorHex
export type ColorHex = string;
// github.com/benoitkugler/maths-online/server/src/maths/repere.Coord
export interface Coord {
  X: number;
  Y: number;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.LabelPos
export enum LabelPos {
  Top = 0,
  Bottom = 1,
  Left = 2,
  Right = 3,
  TopLeft = 4,
  TopRight = 5,
  BottomRight = 6,
  BottomLeft = 7,
  Hide = 8,
}

export const LabelPosLabels: { [key in LabelPos]: string } = {
  [LabelPos.Top]: "Au dessus",
  [LabelPos.Bottom]: "En dessous",
  [LabelPos.Left]: "A gauche",
  [LabelPos.Right]: "A droite",
  [LabelPos.TopLeft]: "Au dessus, √† gauche",
  [LabelPos.TopRight]: "Au dessus, √† droite",
  [LabelPos.BottomRight]: "En dessous, √† droite",
  [LabelPos.BottomLeft]: "En dessous, √† gauche",
  [LabelPos.Hide]: "Masquer la l√©gende",
};

// github.com/benoitkugler/maths-online/server/src/maths/repere.NamedRandomLabeledPoint
export interface NamedRandomLabeledPoint {
  Name: string;
  Point: RandomLabeledPoint;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomArea
export interface RandomArea {
  Color: ColorHex;
  Points: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomCircle
export interface RandomCircle {
  Center: RandomCoord;
  Radius: string;
  LineColor: ColorHex;
  FillColor: ColorHex;
  Legend: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomCoord
export interface RandomCoord {
  X: string;
  Y: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomDrawings
export interface RandomDrawings {
  Points: NamedRandomLabeledPoint[] | null;
  Segments: RandomSegment[] | null;
  Lines: RandomLine[] | null;
  Circles: RandomCircle[] | null;
  Areas: RandomArea[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomLabeledPoint
export interface RandomLabeledPoint {
  Color: ColorHex;
  Coord: RandomCoord;
  Pos: LabelPos;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomLine
export interface RandomLine {
  Label: string;
  A: string;
  B: string;
  Color: ColorHex;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomSegment
export interface RandomSegment {
  LabelName: string;
  From: string;
  To: string;
  Color: ColorHex;
  LabelPos: LabelPos;
  Kind: SegmentKind;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RepereBounds
export interface RepereBounds {
  Width: number;
  Height: number;
  Origin: Coord;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.SegmentKind
export enum SegmentKind {
  SKSegment = 0,
  SKVector = 1,
  SKLine = 2,
}

export const SegmentKindLabels: { [key in SegmentKind]: string } = {
  [SegmentKind.SKSegment]: "Segment",
  [SegmentKind.SKVector]: "Vecteur",
  [SegmentKind.SKLine]: "Droite (infinie)",
};

// github.com/benoitkugler/maths-online/server/src/prof/editor.ChapterItems
export interface ChapterItems {
  Chapter: string;
  GroupCount: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.CheckExerciceParametersIn
export interface CheckExerciceParametersIn {
  IdExercice: IdExercice;
  SharedParameters: Parameters;
  QuestionParameters: Parameters[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.CheckExerciceParametersOut
export interface CheckExerciceParametersOut {
  ErrDefinition: ErrParameters;
  QuestionIndex: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.CheckQuestionParametersIn
export interface CheckQuestionParametersIn {
  Parameters: Parameters;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.CheckQuestionParametersOut
export interface CheckQuestionParametersOut {
  ErrDefinition: ErrParameters;
  Variables: Variable[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.DeleteExerciceOut
export interface DeleteExerciceOut {
  Deleted: boolean;
  BlockedBy: TaskUses;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.DeleteQuestionOut
export interface DeleteQuestionOut {
  Deleted: boolean;
  BlockedBy: TaskUses;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceCreateQuestionIn
export interface ExerciceCreateQuestionIn {
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceDuplicateQuestionIn
export interface ExerciceDuplicateQuestionIn {
  QuestionIndex: number;
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceExt
export interface ExerciceExt {
  Exercice: Exercice;
  Questions: ExerciceQuestionExt[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceHeader
export interface ExerciceHeader {
  Id: IdExercice;
  Subtitle: string;
  Difficulty: DifficultyTag;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceImportQuestionIn
export interface ExerciceImportQuestionIn {
  IdQuestion: IdQuestion;
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceQuestionExt
export interface ExerciceQuestionExt {
  Question: Question;
  Bareme: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceUpdateQuestionsIn
export interface ExerciceUpdateQuestionsIn {
  Questions: ExerciceQuestions;
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceUpdateVisiblityIn
export interface ExerciceUpdateVisiblityIn {
  ID: IdExercicegroup;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceWithPreview
export interface ExerciceWithPreview {
  Ex: ExerciceExt;
  Preview: LoopbackShowExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExercicegroupExt
export interface ExercicegroupExt {
  Group: Exercicegroup;
  Origin: Origin;
  Tags: Tags;
  Variants: ExerciceHeader[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExportExerciceLatexIn
export interface ExportExerciceLatexIn {
  Parameters: Parameters;
  Questions: QuestionPage[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExportExerciceLatexOut
export interface ExportExerciceLatexOut {
  Error: ErrQuestionInvalid;
  QuestionIndex: number;
  IsValid: boolean;
  Latex: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExportQuestionLatexOut
export interface ExportQuestionLatexOut {
  Error: ErrQuestionInvalid;
  IsValid: boolean;
  Latex: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.GenerateSyntaxHintIn
export interface GenerateSyntaxHintIn {
  Block: ExpressionFieldBlock;
  SharedParameters: Parameters;
  QuestionParameters: Parameters;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.Index
export type Index = LevelItems[] | null;
// github.com/benoitkugler/maths-online/server/src/prof/editor.LevelItems
export interface LevelItems {
  Level: LevelTag;
  Chapters: ChapterItems[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ListExercicesOut
export interface ListExercicesOut {
  Groups: ExercicegroupExt[] | null;
  NbExercices: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ListQuestionsOut
export interface ListQuestionsOut {
  Groups: QuestiongroupExt[] | null;
  NbQuestions: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.LoopbackShowExercice
export interface LoopbackShowExercice {
  Exercice: unknown;
  Progression: unknown;
  ShowCorrection: boolean;
  Origin: QuestionPage[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.LoopbackShowQuestion
export interface LoopbackShowQuestion {
  Question: unknown;
  Params: unknown;
  ShowCorrection: boolean;
  Origin: QuestionPage;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.OriginKind
export enum OriginKind {
  All = 0,
  OnlyPersonnal = 1,
  OnlyAdmin = 2,
}

export const OriginKindLabels: { [key in OriginKind]: string } = {
  [OriginKind.All]: "",
  [OriginKind.OnlyPersonnal]: "",
  [OriginKind.OnlyAdmin]: "",
};

// github.com/benoitkugler/maths-online/server/src/prof/editor.Query
export interface Query {
  TitleQuery: string;
  LevelTags: string[] | null;
  ChapterTags: string[] | null;
  SubLevelTags: string[] | null;
  Origin: OriginKind;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.QuestionHeader
export interface QuestionHeader {
  Id: IdQuestion;
  Subtitle: string;
  Difficulty: DifficultyTag;
  HasCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.QuestionUpdateVisiblityIn
export interface QuestionUpdateVisiblityIn {
  ID: IdQuestiongroup;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.QuestiongroupExt
export interface QuestiongroupExt {
  Group: Questiongroup;
  Origin: Origin;
  Tags: Tags;
  Variants: QuestionHeader[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveExerciceAndPreviewIn
export interface SaveExerciceAndPreviewIn {
  OnlyPreview: boolean;
  IdExercice: IdExercice;
  Parameters: Parameters;
  Questions: Question[] | null;
  CurrentQuestion: number;
  ShowCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveExerciceAndPreviewOut
export interface SaveExerciceAndPreviewOut {
  Error: ErrQuestionInvalid;
  QuestionIndex: number;
  IsValid: boolean;
  Preview: LoopbackShowExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveQuestionAndPreviewIn
export interface SaveQuestionAndPreviewIn {
  Id: IdQuestion;
  Page: QuestionPage;
  ShowCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveQuestionAndPreviewOut
export interface SaveQuestionAndPreviewOut {
  Error: ErrQuestionInvalid;
  IsValid: boolean;
  Question: LoopbackShowQuestion;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveQuestionMetaIn
export interface SaveQuestionMetaIn {
  Question: Question;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.TagsDB
export interface TagsDB {
  Levels: string[] | null;
  ChaptersByLevel: { [key: string]: string[] | null } | null;
  TrivByChapters: {
    [key: string]: { [key: string]: string[] | null } | null;
  } | null;
  SubLevelsByLevel: { [key: string]: string[] | null } | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.TaskDetails
export interface TaskDetails {
  Id: IdTask;
  Sheet: Sheet;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.TaskUses
export type TaskUses = TaskDetails[] | null;
// github.com/benoitkugler/maths-online/server/src/prof/editor.UpdateExercicegroupTagsIn
export interface UpdateExercicegroupTagsIn {
  Id: IdExercicegroup;
  Tags: Tags;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.UpdateQuestiongroupTagsIn
export interface UpdateQuestiongroupTagsIn {
  Id: IdQuestiongroup;
  Tags: Tags;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.AddExerciceToTaskIn
export interface AddExerciceToTaskIn {
  IdSheet: IdSheet;
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.AddMonoquestionToTaskIn
export interface AddMonoquestionToTaskIn {
  IdSheet: IdSheet;
  IdQuestion: IdQuestion;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.AddRandomMonoquestionToTaskIn
export interface AddRandomMonoquestionToTaskIn {
  IdSheet: IdSheet;
  IdQuestiongroup: IdQuestiongroup;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.ClassroomTravaux
export interface ClassroomTravaux {
  Classroom: Classroom;
  Travaux: Travail[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CopySheetIn
export interface CopySheetIn {
  IdSheet: IdSheet;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CopyTravailIn
export interface CopyTravailIn {
  IdTravail: IdTravail;
  IdClassroom: IdClassroom;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CopyTravailToOut
export interface CopyTravailToOut {
  Travail: Travail;
  HasNewSheet: boolean;
  NewSheet: SheetExt;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CreateTravailOut
export interface CreateTravailOut {
  Sheet: SheetExt;
  Travail: Travail;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CreateTravailWithIn
export interface CreateTravailWithIn {
  IdSheet: IdSheet;
  IdClassroom: IdClassroom;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.HomeworkMarksOut
export interface HomeworkMarksOut {
  Students: StudentHeader[] | null;
  Marks: { [key: IdTravail]: { [key: IdStudent]: number } | null } | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.Homeworks
export interface Homeworks {
  Sheets: { [key: IdSheet]: SheetExt } | null;
  Travaux: ClassroomTravaux[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.HowemorkMarksIn
export interface HowemorkMarksIn {
  IdClassroom: IdClassroom;
  IdTravaux: IdTravail[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.ReorderSheetTasksIn
export interface ReorderSheetTasksIn {
  IdSheet: IdSheet;
  Tasks: IdTask[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.SheetExt
export interface SheetExt {
  Sheet: Sheet;
  Tasks: TaskExt[] | null;
  NbTravaux: number;
  Origin: Origin;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.TaskExt
export interface TaskExt {
  Id: IdTask;
  IdWork: WorkID;
  Title: string;
  Bareme: TaskBareme;
  NbProgressions: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.LoadTargetOut
export interface LoadTargetOut {
  Content: TargetContent;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewComment
export interface ReviewComment {
  Comment: Comment;
  AuthorMail: string;
  IsOwned: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewCreateIn
export interface ReviewCreateIn {
  Kind: ReviewKind;
  Id: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewExt
export interface ReviewExt {
  Approvals: number[];
  Comments: ReviewComment[] | null;
  UserApproval: Approval;
  IsDeletable: boolean;
  IsAcceptable: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewHeader
export interface ReviewHeader {
  Id: IdReview;
  Title: string;
  Kind: ReviewKind;
  OwnerMail: string;
  NbComments: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewUpdateApprovalIn
export interface ReviewUpdateApprovalIn {
  IdReview: IdReview;
  Approval: Approval;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewUpdateCommentsIn
export interface ReviewUpdateCommentsIn {
  IdReview: IdReview;
  Comments: Comments;
}

export enum TargetContentKind {
  TargetExercice = "TargetExercice",
  TargetQuestion = "TargetQuestion",
  TargetSheet = "TargetSheet",
  TargetTrivial = "TargetTrivial",
}

// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetContent
export interface TargetContent {
  Kind: TargetContentKind;
  Data: TargetExercice | TargetQuestion | TargetSheet | TargetTrivial;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetExercice
export interface TargetExercice {
  Group: ExercicegroupExt;
  AllTags: TagsDB;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetQuestion
export interface TargetQuestion {
  Group: QuestiongroupExt;
  Variants: Question[] | null;
  AllTags: TagsDB;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetSheet
export interface TargetSheet {
  Sheet: SheetExt;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetTrivial
export interface TargetTrivial {
  Config: Trivial;
  NbQuestionsByCategories: number[];
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.AskInscriptionIn
export interface AskInscriptionIn {
  Mail: string;
  Password: string;
  HasEditorSimplified: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.AskInscriptionOut
export interface AskInscriptionOut {
  Error: string;
  IsPasswordError: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.ClassroomExt
export interface ClassroomExt {
  Classroom: Classroom;
  NbStudents: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.GenerateClassroomCodeOut
export interface GenerateClassroomCodeOut {
  Code: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.LogginIn
export interface LogginIn {
  Mail: string;
  Password: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.LogginOut
export interface LogginOut {
  Error: string;
  IsPasswordError: boolean;
  Token: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.OptionalIdReview
export interface OptionalIdReview {
  InReview: boolean;
  Id: IdReview;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.Origin
export interface Origin {
  Visibility: Visibility;
  PublicStatus: PublicStatus;
  IsInReview: OptionalIdReview;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.PublicStatus
export enum PublicStatus {
  NotAdmin = 0,
  AdminPublic = 1,
  AdminNotPublic = 2,
}

export const PublicStatusLabels: { [key in PublicStatus]: string } = {
  [PublicStatus.NotAdmin]: "",
  [PublicStatus.AdminPublic]: "",
  [PublicStatus.AdminNotPublic]: "",
};

// github.com/benoitkugler/maths-online/server/src/prof/teacher.StudentHeader
export interface StudentHeader {
  Id: IdStudent;
  Label: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.TeacherSettings
export interface TeacherSettings {
  Mail: string;
  Password: string;
  HasEditorSimplified: boolean;
  Contact: Contact;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.Visibility
export enum Visibility {
  Hidden = 0,
  Personnal = 1,
  Admin = 2,
}

export const VisibilityLabels: { [key in Visibility]: string } = {
  [Visibility.Hidden]: "not accessible by the user, except in reviews",
  [Visibility.Personnal]: "Personnel",
  [Visibility.Admin]: "Officiel",
};

// github.com/benoitkugler/maths-online/server/src/prof/trivial.CheckMissingQuestionsOut
export interface CheckMissingQuestionsOut {
  Pattern: Tags;
  Missing: Tags[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.GamePlayers
export interface GamePlayers {
  Player: string;
  Successes: Success;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.GameSummary
export interface GameSummary {
  GameID: RoomID;
  CurrentPlayer: string;
  LatestQuestion: QuestionContent;
  Players: GamePlayers[] | null;
  RoomSize: RoomSize;
  InQuestionStudents: string[] | null;
}

export enum GroupsStrategyKind {
  GroupsStrategyAuto = "GroupsStrategyAuto",
  GroupsStrategyManual = "GroupsStrategyManual",
}

// github.com/benoitkugler/maths-online/server/src/prof/trivial.GroupsStrategy
export interface GroupsStrategy {
  Kind: GroupsStrategyKind;
  Data: GroupsStrategyAuto | GroupsStrategyManual;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.GroupsStrategyAuto
export interface GroupsStrategyAuto {
  Groups: number[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.GroupsStrategyManual
export interface GroupsStrategyManual {
  NbGroups: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.LaunchSessionIn
export interface LaunchSessionIn {
  IdConfig: IdTrivial;
  Groups: GroupsStrategy;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.LaunchSessionOut
export interface LaunchSessionOut {
  GameIDs: RoomID[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.MonitorOut
export interface MonitorOut {
  Games: GameSummary[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.QuestionContent
export interface QuestionContent {
  Id: IdQuestion;
  Categorie: Categorie;
  Question: unknown;
  Params: unknown;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.RunningSessionMetaOut
export interface RunningSessionMetaOut {
  NbGames: number;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.TrivialExt
export interface TrivialExt {
  Config: Trivial;
  Origin: Origin;
  NbQuestionsByCategories: number[];
  Levels: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.TrivialSelfaccess
export interface TrivialSelfaccess {
  Classrooms: Classroom[] | null;
  Actives: IdClassroom[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.UpdateSelfaccessIn
export interface UpdateSelfaccessIn {
  IdTrivial: IdTrivial;
  IdClassrooms: IdClassroom[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.UpdateTrivialVisiblityIn
export interface UpdateTrivialVisiblityIn {
  ConfigID: IdTrivial;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.stopGame
export interface stopGame {
  ID: string;
  Restart: boolean;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.DifficultyQuery
export type DifficultyQuery = DifficultyTag[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/editor.DifficultyTag
export enum DifficultyTag {
  Diff1 = "‚òÖ",
  Diff2 = "‚òÖ‚òÖ",
  Diff3 = "‚òÖ‚òÖ‚òÖ",
  DiffEmpty = "",
}

export const DifficultyTagLabels: { [key in DifficultyTag]: string } = {
  [DifficultyTag.Diff1]: "1 √©toile",
  [DifficultyTag.Diff2]: "2 √©toiles",
  [DifficultyTag.Diff3]: "3 √©toiles",
  [DifficultyTag.DiffEmpty]: "",
};

// github.com/benoitkugler/maths-online/server/src/sql/editor.Exercice
export interface Exercice {
  Id: IdExercice;
  IdGroup: IdExercicegroup;
  Subtitle: string;
  Parameters: Parameters;
  Difficulty: DifficultyTag;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.ExerciceQuestion
export interface ExerciceQuestion {
  id_exercice: IdExercice;
  id_question: IdQuestion;
  bareme: number;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.ExerciceQuestions
export type ExerciceQuestions = ExerciceQuestion[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/editor.Exercicegroup
export interface Exercicegroup {
  Id: IdExercicegroup;
  Title: string;
  Public: boolean;
  IdTeacher: IdTeacher;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.IdExercice
export type IdExercice = number;
// github.com/benoitkugler/maths-online/server/src/sql/editor.IdExercicegroup
export type IdExercicegroup = number;
// github.com/benoitkugler/maths-online/server/src/sql/editor.IdQuestion
export type IdQuestion = number;
// github.com/benoitkugler/maths-online/server/src/sql/editor.IdQuestiongroup
export type IdQuestiongroup = number;
// github.com/benoitkugler/maths-online/server/src/sql/editor.LevelTag
export enum LevelTag {
  CPGE = "CPGE",
  Premiere = "1ERE",
  Seconde = "2NDE",
  Terminale = "TERM",
}

export const LevelTagLabels: { [key in LevelTag]: string } = {
  [LevelTag.CPGE]: "CPGE",
  [LevelTag.Premiere]: "Premi√®re",
  [LevelTag.Seconde]: "Seconde",
  [LevelTag.Terminale]: "Terminale",
};

// github.com/benoitkugler/maths-online/server/src/sql/editor.OptionalIdExercice
export interface OptionalIdExercice {
  Valid: boolean;
  ID: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.OptionalIdQuestiongroup
export interface OptionalIdQuestiongroup {
  ID: IdQuestiongroup;
  Valid: boolean;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.Question
export interface Question {
  Id: IdQuestion;
  Subtitle: string;
  Difficulty: DifficultyTag;
  NeedExercice: OptionalIdExercice;
  IdGroup: OptionalIdQuestiongroup;
  Enonce: Enonce;
  Parameters: Parameters;
  Correction: Enonce;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.Questiongroup
export interface Questiongroup {
  Id: IdQuestiongroup;
  Title: string;
  Public: boolean;
  IdTeacher: IdTeacher;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.Section
export enum Section {
  Chapter = 2,
  Level = 1,
  SubLevel = 4,
  TrivMath = 3,
}

export const SectionLabels: { [key in Section]: string } = {
  [Section.Chapter]: "Chapitre",
  [Section.Level]: "Niveau",
  [Section.SubLevel]: "Fili√®re",
  [Section.TrivMath]: "Triv'Math",
};

// github.com/benoitkugler/maths-online/server/src/sql/editor.TagSection
export interface TagSection {
  Tag: string;
  Section: Section;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.Tags
export type Tags = TagSection[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/homework.IdSheet
export type IdSheet = number;
// github.com/benoitkugler/maths-online/server/src/sql/homework.IdTravail
export type IdTravail = number;
// github.com/benoitkugler/maths-online/server/src/sql/homework.OptionalIdTravail
export interface OptionalIdTravail {
  Valid: boolean;
  ID: IdTravail;
}
// github.com/benoitkugler/maths-online/server/src/sql/homework.Sheet
export interface Sheet {
  Id: IdSheet;
  Title: string;
  IdTeacher: IdTeacher;
  Level: string;
  Anonymous: OptionalIdTravail;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/server/src/sql/homework.Travail
export interface Travail {
  Id: IdTravail;
  IdClassroom: IdClassroom;
  IdSheet: IdSheet;
  Noted: boolean;
  Deadline: Time;
}
// github.com/benoitkugler/maths-online/server/src/sql/reviews.Approval
export enum Approval {
  Neutral = 0,
  InFavor = 1,
  Opposed = 2,
}

export const ApprovalLabels: { [key in Approval]: string } = {
  [Approval.Neutral]: "",
  [Approval.InFavor]: "",
  [Approval.Opposed]: "",
};

// github.com/benoitkugler/maths-online/server/src/sql/reviews.Comment
export interface Comment {
  Time: Time;
  Message: string;
}
// github.com/benoitkugler/maths-online/server/src/sql/reviews.Comments
export type Comments = Comment[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/reviews.IdReview
export type IdReview = number;
// github.com/benoitkugler/maths-online/server/src/sql/reviews.Review
export interface Review {
  Id: IdReview;
  Kind: ReviewKind;
}
// github.com/benoitkugler/maths-online/server/src/sql/reviews.ReviewKind
export enum ReviewKind {
  KQuestion = 0,
  KExercice = 1,
  KTrivial = 2,
  KSheet = 3,
}

export const ReviewKindLabels: { [key in ReviewKind]: string } = {
  [ReviewKind.KQuestion]: "Question",
  [ReviewKind.KExercice]: "Exercice",
  [ReviewKind.KTrivial]: "Isy'Triv",
  [ReviewKind.KSheet]: "Feuille d'exercice",
};

// github.com/benoitkugler/maths-online/server/src/sql/tasks.IdMonoquestion
export type IdMonoquestion = number;
// github.com/benoitkugler/maths-online/server/src/sql/tasks.IdRandomMonoquestion
export type IdRandomMonoquestion = number;
// github.com/benoitkugler/maths-online/server/src/sql/tasks.IdTask
export type IdTask = number;
// github.com/benoitkugler/maths-online/server/src/sql/tasks.Monoquestion
export interface Monoquestion {
  Id: IdMonoquestion;
  IdQuestion: IdQuestion;
  NbRepeat: number;
  Bareme: number;
}
// github.com/benoitkugler/maths-online/server/src/sql/tasks.RandomMonoquestion
export interface RandomMonoquestion {
  Id: IdRandomMonoquestion;
  IdQuestiongroup: IdQuestiongroup;
  NbRepeat: number;
  Bareme: number;
  Difficulty: DifficultyQuery;
}
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Classroom
export interface Classroom {
  id: IdClassroom;
  id_teacher: IdTeacher;
  name: string;
}
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Contact
export interface Contact {
  Name: string;
  URL: string;
}
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Date
export type Date = Date_;
// github.com/benoitkugler/maths-online/server/src/sql/teacher.IdClassroom
export type IdClassroom = number;
// github.com/benoitkugler/maths-online/server/src/sql/teacher.IdStudent
export type IdStudent = number;
// github.com/benoitkugler/maths-online/server/src/sql/teacher.IdTeacher
export type IdTeacher = number;
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Student
export interface Student {
  Id: IdStudent;
  Name: string;
  Surname: string;
  Birthday: Date;
  TrivialSuccess: number;
  IsClientAttached: boolean;
  id_classroom: IdClassroom;
}
// github.com/benoitkugler/maths-online/server/src/sql/trivial.CategoriesQuestions
export interface CategoriesQuestions {
  Tags: QuestionCriterion[];
  Difficulties: DifficultyQuery;
}
// github.com/benoitkugler/maths-online/server/src/sql/trivial.IdTrivial
export type IdTrivial = number;
// github.com/benoitkugler/maths-online/server/src/sql/trivial.QuestionCriterion
export type QuestionCriterion = (TagSection[] | null)[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/trivial.Trivial
export interface Trivial {
  Id: IdTrivial;
  Questions: CategoriesQuestions;
  QuestionTimeout: number;
  ShowDecrassage: boolean;
  Public: boolean;
  IdTeacher: IdTeacher;
  Name: string;
}
// github.com/benoitkugler/maths-online/server/src/tasks.TaskBareme
export type TaskBareme = number[] | null;
// github.com/benoitkugler/maths-online/server/src/tasks.WorkID
export interface WorkID {
  ID: number;
  Kind: WorkKind;
  IsExercice: boolean;
}
// github.com/benoitkugler/maths-online/server/src/tasks.WorkKind
export enum WorkKind {
  WorkExercice = 1,
  WorkMonoquestion = 2,
  WorkRandomMonoquestion = 3,
}

export const WorkKindLabels: { [key in WorkKind]: string } = {
  [WorkKind.WorkExercice]: "",
  [WorkKind.WorkMonoquestion]: "",
  [WorkKind.WorkRandomMonoquestion]: "",
};

// github.com/benoitkugler/maths-online/server/src/trivial.Categorie
export enum Categorie {
  Purple = 0,
  Green = 1,
  Orange = 2,
  Yellow = 3,
  Blue = 4,
  nbCategories = 5,
}

export const CategorieLabels: { [key in Categorie]: string } = {
  [Categorie.Purple]: "purple",
  [Categorie.Green]: "green",
  [Categorie.Orange]: "orange",
  [Categorie.Yellow]: "yellow",
  [Categorie.Blue]: "blue",
  [Categorie.nbCategories]: "the number of categories a player should complete",
};

// github.com/benoitkugler/maths-online/server/src/trivial.RoomID
export type RoomID = string;
// github.com/benoitkugler/maths-online/server/src/trivial.RoomSize
export interface RoomSize {
  Current: number;
  Max: number;
}
// github.com/benoitkugler/maths-online/server/src/trivial.Success
export type Success = boolean[];

/** AbstractAPI provides auto-generated API calls and should be used 
		as base class for an app controller.
	*/
export abstract class AbstractAPI {
  constructor(
    protected baseUrl: string,
    protected authToken: string,
  ) {}

  protected abstract handleError(error: any): void;

  protected abstract startRequest(): void;

  getHeaders() {
    return { Authorization: "Bearer " + this.authToken };
  }

  protected async rawAskInscription(params: AskInscriptionIn) {
    const fullUrl = this.baseUrl + "/prof/inscription";
    const rep: AxiosResponse<AskInscriptionOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** AskInscription wraps rawAskInscription and handles the error */
  async AskInscription(params: AskInscriptionIn) {
    this.startRequest();
    try {
      const out = await this.rawAskInscription(params);
      this.onSuccessAskInscription(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessAskInscription(data: AskInscriptionOut): void {}

  protected async rawValidateInscription(params: { data: string }) {
    const fullUrl = this.baseUrl + "inscription";
    await Axios.get(fullUrl, {
      params: { data: params["data"] },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** ValidateInscription wraps rawValidateInscription and handles the error */
  async ValidateInscription(params: { data: string }) {
    this.startRequest();
    try {
      const out = await this.rawValidateInscription(params);
      this.onSuccessValidateInscription();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessValidateInscription(): void {}

  protected async rawLoggin(params: LogginIn) {
    const fullUrl = this.baseUrl + "/prof/loggin";
    const rep: AxiosResponse<LogginOut> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** Loggin wraps rawLoggin and handles the error */
  async Loggin(params: LogginIn) {
    this.startRequest();
    try {
      const out = await this.rawLoggin(params);
      this.onSuccessLoggin(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessLoggin(data: LogginOut): void {}

  protected async rawTeacherResetPassword(params: { mail: string }) {
    const fullUrl = this.baseUrl + "/api/prof/reset";
    await Axios.get(fullUrl, {
      params: { mail: params["mail"] },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** TeacherResetPassword wraps rawTeacherResetPassword and handles the error */
  async TeacherResetPassword(params: { mail: string }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherResetPassword(params);
      this.onSuccessTeacherResetPassword();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherResetPassword(): void {}

  protected async rawTeacherGetSettings() {
    const fullUrl = this.baseUrl + "/api/prof/settings";
    const rep: AxiosResponse<TeacherSettings> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherGetSettings wraps rawTeacherGetSettings and handles the error */
  async TeacherGetSettings() {
    this.startRequest();
    try {
      const out = await this.rawTeacherGetSettings();
      this.onSuccessTeacherGetSettings(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherGetSettings(data: TeacherSettings): void {}

  protected async rawTeacherUpdateSettings(params: TeacherSettings) {
    const fullUrl = this.baseUrl + "/api/prof/settings";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** TeacherUpdateSettings wraps rawTeacherUpdateSettings and handles the error */
  async TeacherUpdateSettings(params: TeacherSettings) {
    this.startRequest();
    try {
      const out = await this.rawTeacherUpdateSettings(params);
      this.onSuccessTeacherUpdateSettings();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherUpdateSettings(): void {}

  protected async rawTeacherGetClassrooms() {
    const fullUrl = this.baseUrl + "/api/prof/classrooms";
    const rep: AxiosResponse<ClassroomExt[] | null> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherGetClassrooms wraps rawTeacherGetClassrooms and handles the error */
  async TeacherGetClassrooms() {
    this.startRequest();
    try {
      const out = await this.rawTeacherGetClassrooms();
      this.onSuccessTeacherGetClassrooms(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherGetClassrooms(data: ClassroomExt[] | null): void {}

  protected async rawTeacherCreateClassroom() {
    const fullUrl = this.baseUrl + "/api/prof/classrooms";
    await Axios.put(fullUrl, null, { headers: this.getHeaders() });
    return true;
  }

  /** TeacherCreateClassroom wraps rawTeacherCreateClassroom and handles the error */
  async TeacherCreateClassroom() {
    this.startRequest();
    try {
      const out = await this.rawTeacherCreateClassroom();
      this.onSuccessTeacherCreateClassroom();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherCreateClassroom(): void {}

  protected async rawTeacherUpdateClassroom(params: Classroom) {
    const fullUrl = this.baseUrl + "/api/prof/classrooms";
    const rep: AxiosResponse<Classroom> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherUpdateClassroom wraps rawTeacherUpdateClassroom and handles the error */
  async TeacherUpdateClassroom(params: Classroom) {
    this.startRequest();
    try {
      const out = await this.rawTeacherUpdateClassroom(params);
      this.onSuccessTeacherUpdateClassroom(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherUpdateClassroom(data: Classroom): void {}

  protected async rawTeacherDeleteClassroom(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/classrooms";
    await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** TeacherDeleteClassroom wraps rawTeacherDeleteClassroom and handles the error */
  async TeacherDeleteClassroom(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherDeleteClassroom(params);
      this.onSuccessTeacherDeleteClassroom();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherDeleteClassroom(): void {}

  protected async rawTeacherGetClassroomStudents(params: {
    "id-classroom": number;
  }) {
    const fullUrl = this.baseUrl + "/api/prof/classrooms/students";
    const rep: AxiosResponse<Student[] | null> = await Axios.get(fullUrl, {
      params: { "id-classroom": String(params["id-classroom"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherGetClassroomStudents wraps rawTeacherGetClassroomStudents and handles the error */
  async TeacherGetClassroomStudents(params: { "id-classroom": number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherGetClassroomStudents(params);
      this.onSuccessTeacherGetClassroomStudents(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherGetClassroomStudents(
    data: Student[] | null,
  ): void {}

  protected async rawTeacherAddStudent(params: { "id-classroom": number }) {
    const fullUrl = this.baseUrl + "/api/prof/classrooms/students";
    const rep: AxiosResponse<Student> = await Axios.put(fullUrl, null, {
      params: { "id-classroom": String(params["id-classroom"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherAddStudent wraps rawTeacherAddStudent and handles the error */
  async TeacherAddStudent(params: { "id-classroom": number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherAddStudent(params);
      this.onSuccessTeacherAddStudent(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherAddStudent(data: Student): void {}

  protected async rawTeacherUpdateStudent(params: Student) {
    const fullUrl = this.baseUrl + "/api/prof/classrooms/students";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** TeacherUpdateStudent wraps rawTeacherUpdateStudent and handles the error */
  async TeacherUpdateStudent(params: Student) {
    this.startRequest();
    try {
      const out = await this.rawTeacherUpdateStudent(params);
      this.onSuccessTeacherUpdateStudent();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherUpdateStudent(): void {}

  protected async rawTeacherDeleteStudent(params: { "id-student": number }) {
    const fullUrl = this.baseUrl + "/api/prof/classrooms/students";
    await Axios.delete(fullUrl, {
      params: { "id-student": String(params["id-student"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** TeacherDeleteStudent wraps rawTeacherDeleteStudent and handles the error */
  async TeacherDeleteStudent(params: { "id-student": number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherDeleteStudent(params);
      this.onSuccessTeacherDeleteStudent();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherDeleteStudent(): void {}

  protected async rawTeacherImportStudents(
    params: { "id-classroom": string },
    file: File,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/classrooms/students/import";
    const formData = new FormData();
    formData.append("file", file, file.name);
    formData.append("id-classroom", params["id-classroom"]);
    await Axios.post(fullUrl, formData, { headers: this.getHeaders() });
    return true;
  }

  /** TeacherImportStudents wraps rawTeacherImportStudents and handles the error */
  async TeacherImportStudents(params: { "id-classroom": string }, file: File) {
    this.startRequest();
    try {
      const out = await this.rawTeacherImportStudents(params, file);
      this.onSuccessTeacherImportStudents();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherImportStudents(): void {}

  protected async rawTeacherGenerateClassroomCode(params: {
    "id-classroom": number;
  }) {
    const fullUrl = this.baseUrl + "/api/prof/classrooms/students/connect";
    const rep: AxiosResponse<GenerateClassroomCodeOut> = await Axios.get(
      fullUrl,
      {
        params: { "id-classroom": String(params["id-classroom"]) },
        headers: this.getHeaders(),
      },
    );
    return rep.data;
  }

  /** TeacherGenerateClassroomCode wraps rawTeacherGenerateClassroomCode and handles the error */
  async TeacherGenerateClassroomCode(params: { "id-classroom": number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherGenerateClassroomCode(params);
      this.onSuccessTeacherGenerateClassroomCode(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTeacherGenerateClassroomCode(
    data: GenerateClassroomCodeOut,
  ): void {}

  protected async rawGetTrivialPoursuit() {
    const fullUrl = this.baseUrl + "/api/prof/trivial/config";
    const rep: AxiosResponse<TrivialExt[] | null> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** GetTrivialPoursuit wraps rawGetTrivialPoursuit and handles the error */
  async GetTrivialPoursuit() {
    this.startRequest();
    try {
      const out = await this.rawGetTrivialPoursuit();
      this.onSuccessGetTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessGetTrivialPoursuit(data: TrivialExt[] | null): void {}

  protected async rawCreateTrivialPoursuit() {
    const fullUrl = this.baseUrl + "/api/prof/trivial/config";
    const rep: AxiosResponse<TrivialExt> = await Axios.put(fullUrl, null, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** CreateTrivialPoursuit wraps rawCreateTrivialPoursuit and handles the error */
  async CreateTrivialPoursuit() {
    this.startRequest();
    try {
      const out = await this.rawCreateTrivialPoursuit();
      this.onSuccessCreateTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessCreateTrivialPoursuit(data: TrivialExt): void {}

  protected async rawUpdateTrivialPoursuit(params: Trivial) {
    const fullUrl = this.baseUrl + "/api/prof/trivial/config";
    const rep: AxiosResponse<TrivialExt> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** UpdateTrivialPoursuit wraps rawUpdateTrivialPoursuit and handles the error */
  async UpdateTrivialPoursuit(params: Trivial) {
    this.startRequest();
    try {
      const out = await this.rawUpdateTrivialPoursuit(params);
      this.onSuccessUpdateTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessUpdateTrivialPoursuit(data: TrivialExt): void {}

  protected async rawDeleteTrivialPoursuit(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/trivial/config";
    await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** DeleteTrivialPoursuit wraps rawDeleteTrivialPoursuit and handles the error */
  async DeleteTrivialPoursuit(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawDeleteTrivialPoursuit(params);
      this.onSuccessDeleteTrivialPoursuit();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessDeleteTrivialPoursuit(): void {}

  protected async rawUpdateTrivialVisiblity(params: UpdateTrivialVisiblityIn) {
    const fullUrl = this.baseUrl + "/api/prof/trivial/config/visibility";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** UpdateTrivialVisiblity wraps rawUpdateTrivialVisiblity and handles the error */
  async UpdateTrivialVisiblity(params: UpdateTrivialVisiblityIn) {
    this.startRequest();
    try {
      const out = await this.rawUpdateTrivialVisiblity(params);
      this.onSuccessUpdateTrivialVisiblity();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessUpdateTrivialVisiblity(): void {}

  protected async rawDuplicateTrivialPoursuit(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/trivial/config/duplicate";
    const rep: AxiosResponse<TrivialExt> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** DuplicateTrivialPoursuit wraps rawDuplicateTrivialPoursuit and handles the error */
  async DuplicateTrivialPoursuit(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawDuplicateTrivialPoursuit(params);
      this.onSuccessDuplicateTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessDuplicateTrivialPoursuit(data: TrivialExt): void {}

  protected async rawCheckMissingQuestions(params: CategoriesQuestions) {
    const fullUrl =
      this.baseUrl + "/api/prof/trivial/config/check-missing-questions";
    const rep: AxiosResponse<CheckMissingQuestionsOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** CheckMissingQuestions wraps rawCheckMissingQuestions and handles the error */
  async CheckMissingQuestions(params: CategoriesQuestions) {
    this.startRequest();
    try {
      const out = await this.rawCheckMissingQuestions(params);
      this.onSuccessCheckMissingQuestions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessCheckMissingQuestions(
    data: CheckMissingQuestionsOut,
  ): void {}

  protected async rawTrivialTeacherMonitor() {
    const fullUrl = this.baseUrl + "/api/prof/trivial/monitor";
    const rep: AxiosResponse<MonitorOut> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TrivialTeacherMonitor wraps rawTrivialTeacherMonitor and handles the error */
  async TrivialTeacherMonitor() {
    this.startRequest();
    try {
      const out = await this.rawTrivialTeacherMonitor();
      this.onSuccessTrivialTeacherMonitor(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTrivialTeacherMonitor(data: MonitorOut): void {}

  protected async rawTrivialGetSelfaccess(params: { "id-trivial": number }) {
    const fullUrl = this.baseUrl + "/api/prof/trivial/selfaccess";
    const rep: AxiosResponse<TrivialSelfaccess> = await Axios.get(fullUrl, {
      params: { "id-trivial": String(params["id-trivial"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TrivialGetSelfaccess wraps rawTrivialGetSelfaccess and handles the error */
  async TrivialGetSelfaccess(params: { "id-trivial": number }) {
    this.startRequest();
    try {
      const out = await this.rawTrivialGetSelfaccess(params);
      this.onSuccessTrivialGetSelfaccess(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTrivialGetSelfaccess(data: TrivialSelfaccess): void {}

  protected async rawTrivialUpdateSelfaccess(params: UpdateSelfaccessIn) {
    const fullUrl = this.baseUrl + "/api/prof/trivial/selfaccess";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** TrivialUpdateSelfaccess wraps rawTrivialUpdateSelfaccess and handles the error */
  async TrivialUpdateSelfaccess(params: UpdateSelfaccessIn) {
    this.startRequest();
    try {
      const out = await this.rawTrivialUpdateSelfaccess(params);
      this.onSuccessTrivialUpdateSelfaccess();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessTrivialUpdateSelfaccess(): void {}

  protected async rawGetTrivialRunningSessions() {
    const fullUrl = this.baseUrl + "/api/trivial/sessions";
    const rep: AxiosResponse<RunningSessionMetaOut> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** GetTrivialRunningSessions wraps rawGetTrivialRunningSessions and handles the error */
  async GetTrivialRunningSessions() {
    this.startRequest();
    try {
      const out = await this.rawGetTrivialRunningSessions();
      this.onSuccessGetTrivialRunningSessions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessGetTrivialRunningSessions(
    data: RunningSessionMetaOut,
  ): void {}

  protected async rawLaunchSessionTrivialPoursuit(params: LaunchSessionIn) {
    const fullUrl = this.baseUrl + "/api/trivial/sessions";
    const rep: AxiosResponse<LaunchSessionOut> = await Axios.put(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** LaunchSessionTrivialPoursuit wraps rawLaunchSessionTrivialPoursuit and handles the error */
  async LaunchSessionTrivialPoursuit(params: LaunchSessionIn) {
    this.startRequest();
    try {
      const out = await this.rawLaunchSessionTrivialPoursuit(params);
      this.onSuccessLaunchSessionTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessLaunchSessionTrivialPoursuit(
    data: LaunchSessionOut,
  ): void {}

  protected async rawStartTrivialGame(params: { "game-id": string }) {
    const fullUrl = this.baseUrl + "/api/trivial/sessions/start";
    await Axios.post(fullUrl, null, {
      params: { "game-id": params["game-id"] },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** StartTrivialGame wraps rawStartTrivialGame and handles the error */
  async StartTrivialGame(params: { "game-id": string }) {
    this.startRequest();
    try {
      const out = await this.rawStartTrivialGame(params);
      this.onSuccessStartTrivialGame();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessStartTrivialGame(): void {}

  protected async rawStopTrivialGame(params: stopGame) {
    const fullUrl = this.baseUrl + "/api/trivial/sessions/stop";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** StopTrivialGame wraps rawStopTrivialGame and handles the error */
  async StopTrivialGame(params: stopGame) {
    this.startRequest();
    try {
      const out = await this.rawStopTrivialGame(params);
      this.onSuccessStopTrivialGame();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessStopTrivialGame(): void {}

  protected async rawEditorGetTags() {
    const fullUrl = this.baseUrl + "/api/prof/editor/tags";
    const rep: AxiosResponse<TagsDB> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorGetTags wraps rawEditorGetTags and handles the error */
  async EditorGetTags() {
    this.startRequest();
    try {
      const out = await this.rawEditorGetTags();
      this.onSuccessEditorGetTags(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorGetTags(data: TagsDB): void {}

  protected async rawEditorGenerateSyntaxHint(params: GenerateSyntaxHintIn) {
    const fullUrl = this.baseUrl + "/api/prof/editor/syntax-hint";
    const rep: AxiosResponse<TextBlock> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorGenerateSyntaxHint wraps rawEditorGenerateSyntaxHint and handles the error */
  async EditorGenerateSyntaxHint(params: GenerateSyntaxHintIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorGenerateSyntaxHint(params);
      this.onSuccessEditorGenerateSyntaxHint(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorGenerateSyntaxHint(data: TextBlock): void {}

  protected async rawEditorGetQuestionsIndex() {
    const fullUrl = this.baseUrl + "/api/prof/editor/questiongroups";
    const rep: AxiosResponse<Index> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorGetQuestionsIndex wraps rawEditorGetQuestionsIndex and handles the error */
  async EditorGetQuestionsIndex() {
    this.startRequest();
    try {
      const out = await this.rawEditorGetQuestionsIndex();
      this.onSuccessEditorGetQuestionsIndex(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorGetQuestionsIndex(data: Index): void {}

  protected async rawEditorSearchQuestions(params: Query) {
    const fullUrl = this.baseUrl + "/api/prof/editor/questiongroups";
    const rep: AxiosResponse<ListQuestionsOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorSearchQuestions wraps rawEditorSearchQuestions and handles the error */
  async EditorSearchQuestions(params: Query) {
    this.startRequest();
    try {
      const out = await this.rawEditorSearchQuestions(params);
      this.onSuccessEditorSearchQuestions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorSearchQuestions(data: ListQuestionsOut): void {}

  protected async rawEditorDuplicateQuestion(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/question/duplicate";
    const rep: AxiosResponse<Question> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDuplicateQuestion wraps rawEditorDuplicateQuestion and handles the error */
  async EditorDuplicateQuestion(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDuplicateQuestion(params);
      this.onSuccessEditorDuplicateQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorDuplicateQuestion(data: Question): void {}

  protected async rawEditorDuplicateQuestiongroup(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/questiongroup/duplicate";
    await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** EditorDuplicateQuestiongroup wraps rawEditorDuplicateQuestiongroup and handles the error */
  async EditorDuplicateQuestiongroup(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDuplicateQuestiongroup(params);
      this.onSuccessEditorDuplicateQuestiongroup();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorDuplicateQuestiongroup(): void {}

  protected async rawEditorCreateQuestiongroup() {
    const fullUrl = this.baseUrl + "/api/prof/editor/questiongroup";
    const rep: AxiosResponse<QuestiongroupExt> = await Axios.put(
      fullUrl,
      null,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorCreateQuestiongroup wraps rawEditorCreateQuestiongroup and handles the error */
  async EditorCreateQuestiongroup() {
    this.startRequest();
    try {
      const out = await this.rawEditorCreateQuestiongroup();
      this.onSuccessEditorCreateQuestiongroup(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorCreateQuestiongroup(data: QuestiongroupExt): void {}

  protected async rawEditorUpdateQuestiongroup(params: Questiongroup) {
    const fullUrl = this.baseUrl + "/api/prof/editor/questiongroup";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** EditorUpdateQuestiongroup wraps rawEditorUpdateQuestiongroup and handles the error */
  async EditorUpdateQuestiongroup(params: Questiongroup) {
    this.startRequest();
    try {
      const out = await this.rawEditorUpdateQuestiongroup(params);
      this.onSuccessEditorUpdateQuestiongroup();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorUpdateQuestiongroup(): void {}

  protected async rawEditorDeleteQuestiongroup(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/questiongroup";
    const rep: AxiosResponse<DeleteQuestionOut> = await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDeleteQuestiongroup wraps rawEditorDeleteQuestiongroup and handles the error */
  async EditorDeleteQuestiongroup(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDeleteQuestiongroup(params);
      this.onSuccessEditorDeleteQuestiongroup(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorDeleteQuestiongroup(data: DeleteQuestionOut): void {}

  protected async rawEditorUpdateQuestionTags(
    params: UpdateQuestiongroupTagsIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/questiongroup/tags";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** EditorUpdateQuestionTags wraps rawEditorUpdateQuestionTags and handles the error */
  async EditorUpdateQuestionTags(params: UpdateQuestiongroupTagsIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorUpdateQuestionTags(params);
      this.onSuccessEditorUpdateQuestionTags();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorUpdateQuestionTags(): void {}

  protected async rawEditorUpdateQuestiongroupVis(
    params: QuestionUpdateVisiblityIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/questiongroup/visibility";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** EditorUpdateQuestiongroupVis wraps rawEditorUpdateQuestiongroupVis and handles the error */
  async EditorUpdateQuestiongroupVis(params: QuestionUpdateVisiblityIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorUpdateQuestiongroupVis(params);
      this.onSuccessEditorUpdateQuestiongroupVis();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorUpdateQuestiongroupVis(): void {}

  protected async rawEditorGetQuestions(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/question";
    const rep: AxiosResponse<Question[] | null> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorGetQuestions wraps rawEditorGetQuestions and handles the error */
  async EditorGetQuestions(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorGetQuestions(params);
      this.onSuccessEditorGetQuestions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorGetQuestions(data: Question[] | null): void {}

  protected async rawEditorDeleteQuestion(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/question";
    const rep: AxiosResponse<DeleteQuestionOut> = await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDeleteQuestion wraps rawEditorDeleteQuestion and handles the error */
  async EditorDeleteQuestion(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDeleteQuestion(params);
      this.onSuccessEditorDeleteQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorDeleteQuestion(data: DeleteQuestionOut): void {}

  protected async rawEditorSaveQuestionMeta(params: SaveQuestionMetaIn) {
    const fullUrl = this.baseUrl + "/api/prof/editor/question/variant";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** EditorSaveQuestionMeta wraps rawEditorSaveQuestionMeta and handles the error */
  async EditorSaveQuestionMeta(params: SaveQuestionMetaIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorSaveQuestionMeta(params);
      this.onSuccessEditorSaveQuestionMeta();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorSaveQuestionMeta(): void {}

  protected async rawEditorCheckQuestionParameters(
    params: CheckQuestionParametersIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/question/check-params";
    const rep: AxiosResponse<CheckQuestionParametersOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorCheckQuestionParameters wraps rawEditorCheckQuestionParameters and handles the error */
  async EditorCheckQuestionParameters(params: CheckQuestionParametersIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorCheckQuestionParameters(params);
      this.onSuccessEditorCheckQuestionParameters(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorCheckQuestionParameters(
    data: CheckQuestionParametersOut,
  ): void {}

  protected async rawEditorSaveQuestionAndPreview(
    params: SaveQuestionAndPreviewIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/question/preview";
    const rep: AxiosResponse<SaveQuestionAndPreviewOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorSaveQuestionAndPreview wraps rawEditorSaveQuestionAndPreview and handles the error */
  async EditorSaveQuestionAndPreview(params: SaveQuestionAndPreviewIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorSaveQuestionAndPreview(params);
      this.onSuccessEditorSaveQuestionAndPreview(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorSaveQuestionAndPreview(
    data: SaveQuestionAndPreviewOut,
  ): void {}

  protected async rawEditorQuestionExportLateX(params: QuestionPage) {
    const fullUrl = this.baseUrl + "/api/prof/editor/question/export/latex";
    const rep: AxiosResponse<ExportQuestionLatexOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorQuestionExportLateX wraps rawEditorQuestionExportLateX and handles the error */
  async EditorQuestionExportLateX(params: QuestionPage) {
    this.startRequest();
    try {
      const out = await this.rawEditorQuestionExportLateX(params);
      this.onSuccessEditorQuestionExportLateX(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorQuestionExportLateX(
    data: ExportQuestionLatexOut,
  ): void {}

  protected async rawEditorGetExercicesIndex() {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercicegroups";
    const rep: AxiosResponse<Index> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorGetExercicesIndex wraps rawEditorGetExercicesIndex and handles the error */
  async EditorGetExercicesIndex() {
    this.startRequest();
    try {
      const out = await this.rawEditorGetExercicesIndex();
      this.onSuccessEditorGetExercicesIndex(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorGetExercicesIndex(data: Index): void {}

  protected async rawEditorSearchExercices(params: Query) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercicegroups";
    const rep: AxiosResponse<ListExercicesOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorSearchExercices wraps rawEditorSearchExercices and handles the error */
  async EditorSearchExercices(params: Query) {
    this.startRequest();
    try {
      const out = await this.rawEditorSearchExercices(params);
      this.onSuccessEditorSearchExercices(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorSearchExercices(data: ListExercicesOut): void {}

  protected async rawEditorUpdateExercicegroup(params: Exercicegroup) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercicegroup";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** EditorUpdateExercicegroup wraps rawEditorUpdateExercicegroup and handles the error */
  async EditorUpdateExercicegroup(params: Exercicegroup) {
    this.startRequest();
    try {
      const out = await this.rawEditorUpdateExercicegroup(params);
      this.onSuccessEditorUpdateExercicegroup();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorUpdateExercicegroup(): void {}

  protected async rawEditorDeleteExercicegroup(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercicegroup";
    const rep: AxiosResponse<DeleteExerciceOut> = await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDeleteExercicegroup wraps rawEditorDeleteExercicegroup and handles the error */
  async EditorDeleteExercicegroup(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDeleteExercicegroup(params);
      this.onSuccessEditorDeleteExercicegroup(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorDeleteExercicegroup(data: DeleteExerciceOut): void {}

  protected async rawEditorUpdateExerciceTags(
    params: UpdateExercicegroupTagsIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercicegroup/tags";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** EditorUpdateExerciceTags wraps rawEditorUpdateExerciceTags and handles the error */
  async EditorUpdateExerciceTags(params: UpdateExercicegroupTagsIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorUpdateExerciceTags(params);
      this.onSuccessEditorUpdateExerciceTags();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorUpdateExerciceTags(): void {}

  protected async rawEditorDuplicateExercicegroup(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercicegroup/duplicate";
    await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** EditorDuplicateExercicegroup wraps rawEditorDuplicateExercicegroup and handles the error */
  async EditorDuplicateExercicegroup(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDuplicateExercicegroup(params);
      this.onSuccessEditorDuplicateExercicegroup();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorDuplicateExercicegroup(): void {}

  protected async rawEditorGetExerciceContent(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice";
    const rep: AxiosResponse<ExerciceExt> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorGetExerciceContent wraps rawEditorGetExerciceContent and handles the error */
  async EditorGetExerciceContent(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorGetExerciceContent(params);
      this.onSuccessEditorGetExerciceContent(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorGetExerciceContent(data: ExerciceExt): void {}

  protected async rawEditorCreateExercice() {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice";
    const rep: AxiosResponse<ExercicegroupExt> = await Axios.put(
      fullUrl,
      null,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorCreateExercice wraps rawEditorCreateExercice and handles the error */
  async EditorCreateExercice() {
    this.startRequest();
    try {
      const out = await this.rawEditorCreateExercice();
      this.onSuccessEditorCreateExercice(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorCreateExercice(data: ExercicegroupExt): void {}

  protected async rawEditorDeleteExercice(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice";
    const rep: AxiosResponse<DeleteExerciceOut> = await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDeleteExercice wraps rawEditorDeleteExercice and handles the error */
  async EditorDeleteExercice(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDeleteExercice(params);
      this.onSuccessEditorDeleteExercice(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorDeleteExercice(data: DeleteExerciceOut): void {}

  protected async rawEditorSaveExerciceMeta(params: ExerciceHeader) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice";
    const rep: AxiosResponse<Exercice> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorSaveExerciceMeta wraps rawEditorSaveExerciceMeta and handles the error */
  async EditorSaveExerciceMeta(params: ExerciceHeader) {
    this.startRequest();
    try {
      const out = await this.rawEditorSaveExerciceMeta(params);
      this.onSuccessEditorSaveExerciceMeta(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorSaveExerciceMeta(data: Exercice): void {}

  protected async rawEditorDuplicateExercice(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice/duplicate";
    const rep: AxiosResponse<ExerciceHeader> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDuplicateExercice wraps rawEditorDuplicateExercice and handles the error */
  async EditorDuplicateExercice(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDuplicateExercice(params);
      this.onSuccessEditorDuplicateExercice(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorDuplicateExercice(data: ExerciceHeader): void {}

  protected async rawEditorExerciceCreateQuestion(
    params: ExerciceCreateQuestionIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice/questions";
    const rep: AxiosResponse<ExerciceWithPreview> = await Axios.put(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorExerciceCreateQuestion wraps rawEditorExerciceCreateQuestion and handles the error */
  async EditorExerciceCreateQuestion(params: ExerciceCreateQuestionIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorExerciceCreateQuestion(params);
      this.onSuccessEditorExerciceCreateQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorExerciceCreateQuestion(
    data: ExerciceWithPreview,
  ): void {}

  protected async rawEditorExerciceImportQuestion(
    params: ExerciceImportQuestionIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice/questions/import";
    const rep: AxiosResponse<ExerciceWithPreview> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorExerciceImportQuestion wraps rawEditorExerciceImportQuestion and handles the error */
  async EditorExerciceImportQuestion(params: ExerciceImportQuestionIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorExerciceImportQuestion(params);
      this.onSuccessEditorExerciceImportQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorExerciceImportQuestion(
    data: ExerciceWithPreview,
  ): void {}

  protected async rawEditorExerciceDuplicateQuestion(
    params: ExerciceDuplicateQuestionIn,
  ) {
    const fullUrl =
      this.baseUrl + "/api/prof/editor/exercice/questions/duplicate";
    const rep: AxiosResponse<ExerciceWithPreview> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorExerciceDuplicateQuestion wraps rawEditorExerciceDuplicateQuestion and handles the error */
  async EditorExerciceDuplicateQuestion(params: ExerciceDuplicateQuestionIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorExerciceDuplicateQuestion(params);
      this.onSuccessEditorExerciceDuplicateQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorExerciceDuplicateQuestion(
    data: ExerciceWithPreview,
  ): void {}

  protected async rawEditorExerciceUpdateQuestions(
    params: ExerciceUpdateQuestionsIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice/questions";
    const rep: AxiosResponse<ExerciceWithPreview> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorExerciceUpdateQuestions wraps rawEditorExerciceUpdateQuestions and handles the error */
  async EditorExerciceUpdateQuestions(params: ExerciceUpdateQuestionsIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorExerciceUpdateQuestions(params);
      this.onSuccessEditorExerciceUpdateQuestions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorExerciceUpdateQuestions(
    data: ExerciceWithPreview,
  ): void {}

  protected async rawEditorUpdateExercicegroupVis(
    params: ExerciceUpdateVisiblityIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercicegroup/visibility";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** EditorUpdateExercicegroupVis wraps rawEditorUpdateExercicegroupVis and handles the error */
  async EditorUpdateExercicegroupVis(params: ExerciceUpdateVisiblityIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorUpdateExercicegroupVis(params);
      this.onSuccessEditorUpdateExercicegroupVis();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorUpdateExercicegroupVis(): void {}

  protected async rawEditorCheckExerciceParameters(
    params: CheckExerciceParametersIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice/check-params";
    const rep: AxiosResponse<CheckExerciceParametersOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorCheckExerciceParameters wraps rawEditorCheckExerciceParameters and handles the error */
  async EditorCheckExerciceParameters(params: CheckExerciceParametersIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorCheckExerciceParameters(params);
      this.onSuccessEditorCheckExerciceParameters(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorCheckExerciceParameters(
    data: CheckExerciceParametersOut,
  ): void {}

  protected async rawEditorSaveExerciceAndPreview(
    params: SaveExerciceAndPreviewIn,
  ) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice/preview";
    const rep: AxiosResponse<SaveExerciceAndPreviewOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorSaveExerciceAndPreview wraps rawEditorSaveExerciceAndPreview and handles the error */
  async EditorSaveExerciceAndPreview(params: SaveExerciceAndPreviewIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorSaveExerciceAndPreview(params);
      this.onSuccessEditorSaveExerciceAndPreview(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorSaveExerciceAndPreview(
    data: SaveExerciceAndPreviewOut,
  ): void {}

  protected async rawEditorExerciceExportLateX(params: ExportExerciceLatexIn) {
    const fullUrl = this.baseUrl + "/api/prof/editor/exercice/export/latex";
    const rep: AxiosResponse<ExportExerciceLatexOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** EditorExerciceExportLateX wraps rawEditorExerciceExportLateX and handles the error */
  async EditorExerciceExportLateX(params: ExportExerciceLatexIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorExerciceExportLateX(params);
      this.onSuccessEditorExerciceExportLateX(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessEditorExerciceExportLateX(
    data: ExportExerciceLatexOut,
  ): void {}

  protected async rawHomeworkGetSheets() {
    const fullUrl = this.baseUrl + "/api/prof/homework";
    const rep: AxiosResponse<Homeworks> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkGetSheets wraps rawHomeworkGetSheets and handles the error */
  async HomeworkGetSheets() {
    this.startRequest();
    try {
      const out = await this.rawHomeworkGetSheets();
      this.onSuccessHomeworkGetSheets(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkGetSheets(data: Homeworks): void {}

  protected async rawHomeworkCreateSheet() {
    const fullUrl = this.baseUrl + "/api/prof/homework";
    const rep: AxiosResponse<SheetExt> = await Axios.put(fullUrl, null, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkCreateSheet wraps rawHomeworkCreateSheet and handles the error */
  async HomeworkCreateSheet() {
    this.startRequest();
    try {
      const out = await this.rawHomeworkCreateSheet();
      this.onSuccessHomeworkCreateSheet(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkCreateSheet(data: SheetExt): void {}

  protected async rawHomeworkUpdateSheet(params: Sheet) {
    const fullUrl = this.baseUrl + "/api/prof/homework";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** HomeworkUpdateSheet wraps rawHomeworkUpdateSheet and handles the error */
  async HomeworkUpdateSheet(params: Sheet) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkUpdateSheet(params);
      this.onSuccessHomeworkUpdateSheet();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkUpdateSheet(): void {}

  protected async rawHomeworkDeleteSheet(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/homework";
    await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** HomeworkDeleteSheet wraps rawHomeworkDeleteSheet and handles the error */
  async HomeworkDeleteSheet(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkDeleteSheet(params);
      this.onSuccessHomeworkDeleteSheet();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkDeleteSheet(): void {}

  protected async rawHomeworkCopySheet(params: CopySheetIn) {
    const fullUrl = this.baseUrl + "/api/prof/homework/sheet/copy";
    const rep: AxiosResponse<SheetExt> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkCopySheet wraps rawHomeworkCopySheet and handles the error */
  async HomeworkCopySheet(params: CopySheetIn) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkCopySheet(params);
      this.onSuccessHomeworkCopySheet(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkCopySheet(data: SheetExt): void {}

  protected async rawHomeworkCreateTravailWith(params: CreateTravailWithIn) {
    const fullUrl = this.baseUrl + "/api/prof/homework/travail";
    const rep: AxiosResponse<Travail> = await Axios.put(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkCreateTravailWith wraps rawHomeworkCreateTravailWith and handles the error */
  async HomeworkCreateTravailWith(params: CreateTravailWithIn) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkCreateTravailWith(params);
      this.onSuccessHomeworkCreateTravailWith(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkCreateTravailWith(data: Travail): void {}

  protected async rawHomeworkCreateTravail(params: { "id-classroom": number }) {
    const fullUrl = this.baseUrl + "/api/prof/homework/travail/anonymous";
    const rep: AxiosResponse<CreateTravailOut> = await Axios.put(
      fullUrl,
      null,
      {
        params: { "id-classroom": String(params["id-classroom"]) },
        headers: this.getHeaders(),
      },
    );
    return rep.data;
  }

  /** HomeworkCreateTravail wraps rawHomeworkCreateTravail and handles the error */
  async HomeworkCreateTravail(params: { "id-classroom": number }) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkCreateTravail(params);
      this.onSuccessHomeworkCreateTravail(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkCreateTravail(data: CreateTravailOut): void {}

  protected async rawHomeworkUpdateTravail(params: Travail) {
    const fullUrl = this.baseUrl + "/api/prof/homework/travail";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** HomeworkUpdateTravail wraps rawHomeworkUpdateTravail and handles the error */
  async HomeworkUpdateTravail(params: Travail) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkUpdateTravail(params);
      this.onSuccessHomeworkUpdateTravail();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkUpdateTravail(): void {}

  protected async rawHomeworkDeleteTravail(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/homework/travail";
    await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** HomeworkDeleteTravail wraps rawHomeworkDeleteTravail and handles the error */
  async HomeworkDeleteTravail(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkDeleteTravail(params);
      this.onSuccessHomeworkDeleteTravail();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkDeleteTravail(): void {}

  protected async rawHomeworkCopyTravail(params: CopyTravailIn) {
    const fullUrl = this.baseUrl + "/api/prof/homework/travail/copy";
    const rep: AxiosResponse<CopyTravailToOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** HomeworkCopyTravail wraps rawHomeworkCopyTravail and handles the error */
  async HomeworkCopyTravail(params: CopyTravailIn) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkCopyTravail(params);
      this.onSuccessHomeworkCopyTravail(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkCopyTravail(data: CopyTravailToOut): void {}

  protected async rawHomeworkRemoveTask(params: { "id-task": number }) {
    const fullUrl = this.baseUrl + "/api/prof/homework/sheet";
    await Axios.delete(fullUrl, {
      params: { "id-task": String(params["id-task"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** HomeworkRemoveTask wraps rawHomeworkRemoveTask and handles the error */
  async HomeworkRemoveTask(params: { "id-task": number }) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkRemoveTask(params);
      this.onSuccessHomeworkRemoveTask();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkRemoveTask(): void {}

  protected async rawHomeworkAddExercice(params: AddExerciceToTaskIn) {
    const fullUrl = this.baseUrl + "/api/prof/homework/sheet/exercice";
    const rep: AxiosResponse<TaskExt> = await Axios.put(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkAddExercice wraps rawHomeworkAddExercice and handles the error */
  async HomeworkAddExercice(params: AddExerciceToTaskIn) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkAddExercice(params);
      this.onSuccessHomeworkAddExercice(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkAddExercice(data: TaskExt): void {}

  protected async rawHomeworkGetMonoquestion(params: {
    "id-monoquestion": number;
  }) {
    const fullUrl = this.baseUrl + "/api/prof/homework/sheet/monoquestion";
    const rep: AxiosResponse<Monoquestion> = await Axios.get(fullUrl, {
      params: { "id-monoquestion": String(params["id-monoquestion"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkGetMonoquestion wraps rawHomeworkGetMonoquestion and handles the error */
  async HomeworkGetMonoquestion(params: { "id-monoquestion": number }) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkGetMonoquestion(params);
      this.onSuccessHomeworkGetMonoquestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkGetMonoquestion(data: Monoquestion): void {}

  protected async rawHomeworkAddMonoquestion(params: AddMonoquestionToTaskIn) {
    const fullUrl = this.baseUrl + "/api/prof/homework/sheet/monoquestion";
    const rep: AxiosResponse<TaskExt> = await Axios.put(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkAddMonoquestion wraps rawHomeworkAddMonoquestion and handles the error */
  async HomeworkAddMonoquestion(params: AddMonoquestionToTaskIn) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkAddMonoquestion(params);
      this.onSuccessHomeworkAddMonoquestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkAddMonoquestion(data: TaskExt): void {}

  protected async rawHomeworkGetRandomMonoquestion(params: {
    "id-randommonoquestion": number;
  }) {
    const fullUrl =
      this.baseUrl + "/api/prof/homework/sheet/randommonoquestion";
    const rep: AxiosResponse<RandomMonoquestion> = await Axios.get(fullUrl, {
      params: {
        "id-randommonoquestion": String(params["id-randommonoquestion"]),
      },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkGetRandomMonoquestion wraps rawHomeworkGetRandomMonoquestion and handles the error */
  async HomeworkGetRandomMonoquestion(params: {
    "id-randommonoquestion": number;
  }) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkGetRandomMonoquestion(params);
      this.onSuccessHomeworkGetRandomMonoquestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkGetRandomMonoquestion(
    data: RandomMonoquestion,
  ): void {}

  protected async rawHomeworkAddRandomMonoquestion(
    params: AddRandomMonoquestionToTaskIn,
  ) {
    const fullUrl =
      this.baseUrl + "/api/prof/homework/sheet/randommonoquestion";
    const rep: AxiosResponse<TaskExt> = await Axios.put(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkAddRandomMonoquestion wraps rawHomeworkAddRandomMonoquestion and handles the error */
  async HomeworkAddRandomMonoquestion(params: AddRandomMonoquestionToTaskIn) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkAddRandomMonoquestion(params);
      this.onSuccessHomeworkAddRandomMonoquestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkAddRandomMonoquestion(data: TaskExt): void {}

  protected async rawHomeworkUpdateMonoquestion(params: Monoquestion) {
    const fullUrl = this.baseUrl + "/api/prof/homework/sheet/monoquestion";
    const rep: AxiosResponse<TaskExt> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkUpdateMonoquestion wraps rawHomeworkUpdateMonoquestion and handles the error */
  async HomeworkUpdateMonoquestion(params: Monoquestion) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkUpdateMonoquestion(params);
      this.onSuccessHomeworkUpdateMonoquestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkUpdateMonoquestion(data: TaskExt): void {}

  protected async rawHomeworkUpdateRandomMonoquestion(
    params: RandomMonoquestion,
  ) {
    const fullUrl =
      this.baseUrl + "/api/prof/homework/sheet/randommonoquestion";
    const rep: AxiosResponse<TaskExt> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** HomeworkUpdateRandomMonoquestion wraps rawHomeworkUpdateRandomMonoquestion and handles the error */
  async HomeworkUpdateRandomMonoquestion(params: RandomMonoquestion) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkUpdateRandomMonoquestion(params);
      this.onSuccessHomeworkUpdateRandomMonoquestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkUpdateRandomMonoquestion(data: TaskExt): void {}

  protected async rawHomeworkReorderSheetTasks(params: ReorderSheetTasksIn) {
    const fullUrl = this.baseUrl + "/api/prof/homework/sheet";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** HomeworkReorderSheetTasks wraps rawHomeworkReorderSheetTasks and handles the error */
  async HomeworkReorderSheetTasks(params: ReorderSheetTasksIn) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkReorderSheetTasks(params);
      this.onSuccessHomeworkReorderSheetTasks();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkReorderSheetTasks(): void {}

  protected async rawHomeworkGetMarks(params: HowemorkMarksIn) {
    const fullUrl = this.baseUrl + "/api/prof/homework/marks";
    const rep: AxiosResponse<HomeworkMarksOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() },
    );
    return rep.data;
  }

  /** HomeworkGetMarks wraps rawHomeworkGetMarks and handles the error */
  async HomeworkGetMarks(params: HowemorkMarksIn) {
    this.startRequest();
    try {
      const out = await this.rawHomeworkGetMarks(params);
      this.onSuccessHomeworkGetMarks(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessHomeworkGetMarks(data: HomeworkMarksOut): void {}

  protected async rawReviewCreate(params: ReviewCreateIn) {
    const fullUrl = this.baseUrl + "/api/prof/review";
    const rep: AxiosResponse<Review> = await Axios.put(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ReviewCreate wraps rawReviewCreate and handles the error */
  async ReviewCreate(params: ReviewCreateIn) {
    this.startRequest();
    try {
      const out = await this.rawReviewCreate(params);
      this.onSuccessReviewCreate(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessReviewCreate(data: Review): void {}

  protected async rawReviewsList() {
    const fullUrl = this.baseUrl + "/api/prof/reviews";
    const rep: AxiosResponse<ReviewHeader[] | null> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ReviewsList wraps rawReviewsList and handles the error */
  async ReviewsList() {
    this.startRequest();
    try {
      const out = await this.rawReviewsList();
      this.onSuccessReviewsList(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessReviewsList(data: ReviewHeader[] | null): void {}

  protected async rawReviewLoad(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/review";
    const rep: AxiosResponse<ReviewExt> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ReviewLoad wraps rawReviewLoad and handles the error */
  async ReviewLoad(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawReviewLoad(params);
      this.onSuccessReviewLoad(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessReviewLoad(data: ReviewExt): void {}

  protected async rawReviewLoadTarget(params: { "id-review": number }) {
    const fullUrl = this.baseUrl + "/api/prof/review/target";
    const rep: AxiosResponse<LoadTargetOut> = await Axios.get(fullUrl, {
      params: { "id-review": String(params["id-review"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ReviewLoadTarget wraps rawReviewLoadTarget and handles the error */
  async ReviewLoadTarget(params: { "id-review": number }) {
    this.startRequest();
    try {
      const out = await this.rawReviewLoadTarget(params);
      this.onSuccessReviewLoadTarget(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessReviewLoadTarget(data: LoadTargetOut): void {}

  protected async rawReviewDelete(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/review";
    await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** ReviewDelete wraps rawReviewDelete and handles the error */
  async ReviewDelete(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawReviewDelete(params);
      this.onSuccessReviewDelete();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessReviewDelete(): void {}

  protected async rawReviewUpdateApproval(params: ReviewUpdateApprovalIn) {
    const fullUrl = this.baseUrl + "/api/prof/review/approval";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** ReviewUpdateApproval wraps rawReviewUpdateApproval and handles the error */
  async ReviewUpdateApproval(params: ReviewUpdateApprovalIn) {
    this.startRequest();
    try {
      const out = await this.rawReviewUpdateApproval(params);
      this.onSuccessReviewUpdateApproval();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessReviewUpdateApproval(): void {}

  protected async rawReviewUpdateCommnents(params: ReviewUpdateCommentsIn) {
    const fullUrl = this.baseUrl + "/api/prof/review/comments";
    await Axios.post(fullUrl, params, { headers: this.getHeaders() });
    return true;
  }

  /** ReviewUpdateCommnents wraps rawReviewUpdateCommnents and handles the error */
  async ReviewUpdateCommnents(params: ReviewUpdateCommentsIn) {
    this.startRequest();
    try {
      const out = await this.rawReviewUpdateCommnents(params);
      this.onSuccessReviewUpdateCommnents();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessReviewUpdateCommnents(): void {}

  protected async rawReviewAccept(params: { id: number }) {
    const fullUrl = this.baseUrl + "/api/prof/review/accept";
    await Axios.post(fullUrl, null, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return true;
  }

  /** ReviewAccept wraps rawReviewAccept and handles the error */
  async ReviewAccept(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawReviewAccept(params);
      this.onSuccessReviewAccept();
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected onSuccessReviewAccept(): void {}
}
