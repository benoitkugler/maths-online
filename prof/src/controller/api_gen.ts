// Code generated by gomacro/typescript/axios_api.go. DO NOT EDIT

import type { AxiosResponse } from "axios";
import Axios from "axios";

export type Ar11_StageHeader = [
  StageHeader,
  StageHeader,
  StageHeader,
  StageHeader,
  StageHeader,
  StageHeader,
  StageHeader,
  StageHeader,
  StageHeader,
  StageHeader,
  StageHeader,
];
export type Ar11_Stat = [
  Stat,
  Stat,
  Stat,
  Stat,
  Stat,
  Stat,
  Stat,
  Stat,
  Stat,
  Stat,
  Stat,
];
export type Ar11_Int = [Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int];
export type Ar12_Ar11_StageHeader = [
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
  Ar11_StageHeader,
];
export type Ar12_Ar11_Stat = [
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
  Ar11_Stat,
];
export type Ar12_Level = [
  Level,
  Level,
  Level,
  Level,
  Level,
  Level,
  Level,
  Level,
  Level,
  Level,
  Level,
  Level,
];
export type Ar12_Rank = [
  Rank,
  Rank,
  Rank,
  Rank,
  Rank,
  Rank,
  Rank,
  Rank,
  Rank,
  Rank,
  Rank,
  Rank,
];
export type Ar3_Int = [Int, Int, Int];
export type Ar5_boolean = [boolean, boolean, boolean, boolean, boolean];
export type Ar5_QuestionCriterion = [
  QuestionCriterion,
  QuestionCriterion,
  QuestionCriterion,
  QuestionCriterion,
  QuestionCriterion,
];
export type Ar5_Int = [Int, Int, Int, Int, Int];

// AAAA-MM-YY date format
export type Date_ = string & { __opaque__: "Date" };

export type Int = number & { __opaque__: "Int" };

// ISO date-time string
export type Time = string & { __opaque__: "Time" };

// database/sql.NullTime
export interface NullTime {
  Time: Time;
  Valid: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/expression.Variable
export interface Variable {
  Indice: string;
  Name: Int;
}

export const BlockKind = {
  ExpressionFieldBlock: "ExpressionFieldBlock",
  FigureBlock: "FigureBlock",
  FormulaBlock: "FormulaBlock",
  FunctionPointsFieldBlock: "FunctionPointsFieldBlock",
  FunctionsGraphBlock: "FunctionsGraphBlock",
  GeometricConstructionFieldBlock: "GeometricConstructionFieldBlock",
  ImageBlock: "ImageBlock",
  NumberFieldBlock: "NumberFieldBlock",
  OrderedListFieldBlock: "OrderedListFieldBlock",
  ProofFieldBlock: "ProofFieldBlock",
  RadioFieldBlock: "RadioFieldBlock",
  SetFieldBlock: "SetFieldBlock",
  SignTableBlock: "SignTableBlock",
  SignTableFieldBlock: "SignTableFieldBlock",
  TableBlock: "TableBlock",
  TableFieldBlock: "TableFieldBlock",
  TextBlock: "TextBlock",
  TreeBlock: "TreeBlock",
  TreeFieldBlock: "TreeFieldBlock",
  VariationTableBlock: "VariationTableBlock",
  VariationTableFieldBlock: "VariationTableFieldBlock",
  VectorFieldBlock: "VectorFieldBlock",
} as const;
export type BlockKind = (typeof BlockKind)[keyof typeof BlockKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.Block
export type Block =
  | { Kind: "ExpressionFieldBlock"; Data: ExpressionFieldBlock }
  | { Kind: "FigureBlock"; Data: FigureBlock }
  | { Kind: "FormulaBlock"; Data: FormulaBlock }
  | { Kind: "FunctionPointsFieldBlock"; Data: FunctionPointsFieldBlock }
  | { Kind: "FunctionsGraphBlock"; Data: FunctionsGraphBlock }
  | {
      Kind: "GeometricConstructionFieldBlock";
      Data: GeometricConstructionFieldBlock;
    }
  | { Kind: "ImageBlock"; Data: ImageBlock }
  | { Kind: "NumberFieldBlock"; Data: NumberFieldBlock }
  | { Kind: "OrderedListFieldBlock"; Data: OrderedListFieldBlock }
  | { Kind: "ProofFieldBlock"; Data: ProofFieldBlock }
  | { Kind: "RadioFieldBlock"; Data: RadioFieldBlock }
  | { Kind: "SetFieldBlock"; Data: SetFieldBlock }
  | { Kind: "SignTableBlock"; Data: SignTableBlock }
  | { Kind: "SignTableFieldBlock"; Data: SignTableFieldBlock }
  | { Kind: "TableBlock"; Data: TableBlock }
  | { Kind: "TableFieldBlock"; Data: TableFieldBlock }
  | { Kind: "TextBlock"; Data: TextBlock }
  | { Kind: "TreeBlock"; Data: TreeBlock }
  | { Kind: "TreeFieldBlock"; Data: TreeFieldBlock }
  | { Kind: "VariationTableBlock"; Data: VariationTableBlock }
  | { Kind: "VariationTableFieldBlock"; Data: VariationTableFieldBlock }
  | { Kind: "VectorFieldBlock"; Data: VectorFieldBlock };

// github.com/benoitkugler/maths-online/server/src/maths/questions.Co
export type Co = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ComparisonLevel
export const ComparisonLevel = {
  AsLinearEquation: 102,
  ExpandedSubstitutions: 2,
  SimpleSubstitutions: 1,
  Strict: 0,
} as const;
export type ComparisonLevel =
  (typeof ComparisonLevel)[keyof typeof ComparisonLevel];

export const ComparisonLevelLabels: Record<ComparisonLevel, string> = {
  [ComparisonLevel.AsLinearEquation]: "",
  [ComparisonLevel.ExpandedSubstitutions]: "Compl√®te",
  [ComparisonLevel.SimpleSubstitutions]: "Simple",
  [ComparisonLevel.Strict]: "Exacte",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.CoordExpression
export interface CoordExpression {
  X: string;
  Y: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.Enonce
export type Enonce = Block[] | null;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ErrParameters
export interface ErrParameters {
  Origin: string;
  Details: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ErrQuestionInvalid
export interface ErrQuestionInvalid {
  ErrParameters: ErrParameters;
  ErrEnonce: errEnonce;
  ErrCorrection: errEnonce;
  Kind: ErrorKind;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ErrorKind
export const ErrorKind = {
  ErrParameters_: 0,
  ErrEnonce: 1,
  ErrCorrection: 2,
} as const;
export type ErrorKind = (typeof ErrorKind)[keyof typeof ErrorKind];

export const ErrorKindLabels: Record<ErrorKind, string> = {
  [ErrorKind.ErrParameters_]: "",
  [ErrorKind.ErrEnonce]: "",
  [ErrorKind.ErrCorrection]: "",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.ExpressionFieldBlock
export interface ExpressionFieldBlock {
  Expression: string;
  Label: Interpolated;
  ComparisonLevel: ComparisonLevel;
  ShowFractionHelp: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FigureBlock
export interface FigureBlock {
  Drawings: RandomDrawings;
  Bounds: RepereBounds;
  ShowGrid: boolean;
  ShowOrigin: boolean;
}

export const FiguresOrGraphsKind = {
  FigureBlock: "FigureBlock",
  FunctionsGraphBlock: "FunctionsGraphBlock",
} as const;
export type FiguresOrGraphsKind =
  (typeof FiguresOrGraphsKind)[keyof typeof FiguresOrGraphsKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.FiguresOrGraphs
export type FiguresOrGraphs =
  | { Kind: "FigureBlock"; Data: FigureBlock }
  | { Kind: "FunctionsGraphBlock"; Data: FunctionsGraphBlock };

// github.com/benoitkugler/maths-online/server/src/maths/questions.FormulaBlock
export interface FormulaBlock {
  Parts: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionArea
export interface FunctionArea {
  Bottom: Interpolated;
  Top: Interpolated;
  Left: string;
  Right: string;
  Color: ColorHex;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionDecoration
export interface FunctionDecoration {
  Label: Interpolated;
  Color: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionDefinition
export interface FunctionDefinition {
  Function: string;
  Decoration: FunctionDecoration;
  Variable: Variable;
  From: string;
  To: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionPoint
export interface FunctionPoint {
  Function: Interpolated;
  X: string;
  Color: ColorHex;
  Legend: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionPointsFieldBlock
export interface FunctionPointsFieldBlock {
  IsDiscrete: boolean;
  Function: string;
  Label: string;
  Variable: Variable;
  XGrid: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionSign
export interface FunctionSign {
  Label: Interpolated;
  FxSymbols: SignSymbol[] | null;
  Signs: boolean[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionsGraphBlock
export interface FunctionsGraphBlock {
  FunctionExprs: FunctionDefinition[] | null;
  FunctionVariations: VariationTableBlock[] | null;
  SequenceExprs: FunctionDefinition[] | null;
  Areas: FunctionArea[] | null;
  Points: FunctionPoint[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFAffineLine
export interface GFAffineLine {
  Label: string;
  A: string;
  B: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFPoint
export interface GFPoint {
  Answer: CoordExpression;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFVector
export interface GFVector {
  Answer: CoordExpression;
  AnswerOrigin: CoordExpression;
  MustHaveOrigin: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFVectorPair
export interface GFVectorPair {
  Criterion: VectorPairCriterion;
}

export const GeoFieldKind = {
  GFAffineLine: "GFAffineLine",
  GFPoint: "GFPoint",
  GFVector: "GFVector",
  GFVectorPair: "GFVectorPair",
} as const;
export type GeoFieldKind = (typeof GeoFieldKind)[keyof typeof GeoFieldKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.GeoField
export type GeoField =
  | { Kind: "GFAffineLine"; Data: GFAffineLine }
  | { Kind: "GFPoint"; Data: GFPoint }
  | { Kind: "GFVector"; Data: GFVector }
  | { Kind: "GFVectorPair"; Data: GFVectorPair };

// github.com/benoitkugler/maths-online/server/src/maths/questions.GeometricConstructionFieldBlock
export interface GeometricConstructionFieldBlock {
  Field: GeoField;
  Background: FiguresOrGraphs;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ImageBlock
export interface ImageBlock {
  URL: string;
  Scale: Int;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.In
export type In = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.Interpolated
export type Interpolated = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.NumberFieldBlock
export interface NumberFieldBlock {
  Expression: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.OrderedListFieldBlock
export interface OrderedListFieldBlock {
  Label: Interpolated;
  Answer: Interpolated[] | null;
  AdditionalProposals: Interpolated[] | null;
}

export const ParameterEntryKind = {
  Co: "Co",
  In: "In",
  Rp: "Rp",
} as const;
export type ParameterEntryKind =
  (typeof ParameterEntryKind)[keyof typeof ParameterEntryKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.ParameterEntry
export type ParameterEntry =
  | { Kind: "Co"; Data: Co }
  | { Kind: "In"; Data: In }
  | { Kind: "Rp"; Data: Rp };

// github.com/benoitkugler/maths-online/server/src/maths/questions.Parameters
export type Parameters = ParameterEntry[] | null;

export const ProofAssertionKind = {
  ProofEquality: "ProofEquality",
  ProofInvalid: "ProofInvalid",
  ProofNode: "ProofNode",
  ProofSequence: "ProofSequence",
  ProofStatement: "ProofStatement",
} as const;
export type ProofAssertionKind =
  (typeof ProofAssertionKind)[keyof typeof ProofAssertionKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofAssertion
export type ProofAssertion =
  | { Kind: "ProofEquality"; Data: ProofEquality }
  | { Kind: "ProofInvalid"; Data: ProofInvalid }
  | { Kind: "ProofNode"; Data: ProofNode }
  | { Kind: "ProofSequence"; Data: ProofSequence }
  | { Kind: "ProofStatement"; Data: ProofStatement };

// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofAssertions
export type ProofAssertions = ProofAssertion[] | null;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofEquality
export interface ProofEquality {
  Terms: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofFieldBlock
export interface ProofFieldBlock {
  Answer: ProofSequence;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofInvalid
export type ProofInvalid = Record<string, never>;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofNode
export interface ProofNode {
  Left: ProofAssertion;
  Right: ProofAssertion;
  Op: Binary;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofSequence
export interface ProofSequence {
  Parts: ProofAssertions;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofStatement
export interface ProofStatement {
  Content: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.QuestionPage
export interface QuestionPage {
  enonce: Enonce;
  parameters: Parameters;
  correction: Enonce;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.RadioFieldBlock
export interface RadioFieldBlock {
  Answer: string;
  Proposals: Interpolated[] | null;
  AsDropDown: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.Rp
export interface Rp {
  expression: string;
  variable: Variable;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.SetFieldBlock
export interface SetFieldBlock {
  Answer: string;
  AdditionalSets: Interpolated[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.SignTableBlock
export interface SignTableBlock {
  Xs: string[] | null;
  Functions: FunctionSign[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.SignTableFieldBlock
export interface SignTableFieldBlock {
  Answer: SignTableBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TableBlock
export interface TableBlock {
  HorizontalHeaders: TextPart[] | null;
  VerticalHeaders: TextPart[] | null;
  Values: (TextPart[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TableFieldBlock
export interface TableFieldBlock {
  HorizontalHeaders: TextPart[] | null;
  VerticalHeaders: TextPart[] | null;
  Answer: (string[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TextBlock
export interface TextBlock {
  Parts: Interpolated;
  Bold: boolean;
  Italic: boolean;
  Smaller: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TextKind
export const TextKind = {
  Text: 0,
  StaticMath: 1,
  Expression: 2,
} as const;
export type TextKind = (typeof TextKind)[keyof typeof TextKind];

export const TextKindLabels: Record<TextKind, string> = {
  [TextKind.Text]: "Text simple",
  [TextKind.StaticMath]: "Code LaTeX",
  [TextKind.Expression]: "Expression",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.TextPart
export interface TextPart {
  Content: string;
  Kind: TextKind;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeBlock
export interface TreeBlock {
  EventsProposals: Interpolated[] | null;
  AnswerRoot: TreeNodeAnswer;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeFieldBlock
export interface TreeFieldBlock {
  Answer: TreeBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeNodeAnswer
export interface TreeNodeAnswer {
  Children: TreeNodeAnswer[] | null;
  Probabilities: string[] | null;
  Value: Int;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VariationTableBlock
export interface VariationTableBlock {
  Label: Interpolated;
  Xs: string[] | null;
  Fxs: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VariationTableFieldBlock
export interface VariationTableFieldBlock {
  Answer: VariationTableBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VectorFieldBlock
export interface VectorFieldBlock {
  Answer: CoordExpression;
  AcceptColinear: boolean;
  DisplayColumn: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VectorPairCriterion
export const VectorPairCriterion = {
  VectorEquals: 0,
  VectorColinear: 1,
  VectorOrthogonal: 2,
} as const;
export type VectorPairCriterion =
  (typeof VectorPairCriterion)[keyof typeof VectorPairCriterion];

export const VectorPairCriterionLabels: Record<VectorPairCriterion, string> = {
  [VectorPairCriterion.VectorEquals]: "Vecteurs √©gaux",
  [VectorPairCriterion.VectorColinear]: "Vecteurs colin√©aires",
  [VectorPairCriterion.VectorOrthogonal]: "Vecteurs orthogonaux",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.errEnonce
export interface errEnonce {
  Error: string;
  Block: Int;
  Vars: Record<string, string> | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Binary
export const Binary = {
  Invalid: 0,
  And: 1,
  Or: 2,
} as const;
export type Binary = (typeof Binary)[keyof typeof Binary];

export const BinaryLabels: Record<Binary, string> = {
  [Binary.Invalid]: "Invalide",
  [Binary.And]: "Et",
  [Binary.Or]: "Ou",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.SignSymbol
export const SignSymbol = {
  Nothing: 0,
  Zero: 1,
  ForbiddenValue: 2,
} as const;
export type SignSymbol = (typeof SignSymbol)[keyof typeof SignSymbol];

export const SignSymbolLabels: Record<SignSymbol, string> = {
  [SignSymbol.Nothing]: "",
  [SignSymbol.Zero]: "0",
  [SignSymbol.ForbiddenValue]: "||",
};

// github.com/benoitkugler/maths-online/server/src/maths/repere.ColorHex
export type ColorHex = string;
// github.com/benoitkugler/maths-online/server/src/maths/repere.Coord
export interface Coord {
  X: number;
  Y: number;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.LabelPos
export const LabelPos = {
  Top: 0,
  Bottom: 1,
  Left: 2,
  Right: 3,
  TopLeft: 4,
  TopRight: 5,
  BottomRight: 6,
  BottomLeft: 7,
  Hide: 8,
} as const;
export type LabelPos = (typeof LabelPos)[keyof typeof LabelPos];

export const LabelPosLabels: Record<LabelPos, string> = {
  [LabelPos.Top]: "Au dessus",
  [LabelPos.Bottom]: "En dessous",
  [LabelPos.Left]: "A gauche",
  [LabelPos.Right]: "A droite",
  [LabelPos.TopLeft]: "Au dessus, √† gauche",
  [LabelPos.TopRight]: "Au dessus, √† droite",
  [LabelPos.BottomRight]: "En dessous, √† droite",
  [LabelPos.BottomLeft]: "En dessous, √† gauche",
  [LabelPos.Hide]: "Masquer la l√©gende",
};

// github.com/benoitkugler/maths-online/server/src/maths/repere.NamedRandomLabeledPoint
export interface NamedRandomLabeledPoint {
  Name: string;
  Point: RandomLabeledPoint;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomArea
export interface RandomArea {
  Color: ColorHex;
  Points: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomCircle
export interface RandomCircle {
  Center: RandomCoord;
  Radius: string;
  LineColor: ColorHex;
  FillColor: ColorHex;
  Legend: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomCoord
export interface RandomCoord {
  X: string;
  Y: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomDrawings
export interface RandomDrawings {
  Points: NamedRandomLabeledPoint[] | null;
  Segments: RandomSegment[] | null;
  Lines: RandomLine[] | null;
  Circles: RandomCircle[] | null;
  Areas: RandomArea[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomLabeledPoint
export interface RandomLabeledPoint {
  Color: ColorHex;
  Coord: RandomCoord;
  Pos: LabelPos;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomLine
export interface RandomLine {
  Label: string;
  A: string;
  B: string;
  Color: ColorHex;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomSegment
export interface RandomSegment {
  LabelName: string;
  From: string;
  To: string;
  Color: ColorHex;
  LabelPos: LabelPos;
  Kind: SegmentKind;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RepereBounds
export interface RepereBounds {
  Width: Int;
  Height: Int;
  Origin: Coord;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.SegmentKind
export const SegmentKind = {
  SKSegment: 0,
  SKVector: 1,
  SKLine: 2,
} as const;
export type SegmentKind = (typeof SegmentKind)[keyof typeof SegmentKind];

export const SegmentKindLabels: Record<SegmentKind, string> = {
  [SegmentKind.SKSegment]: "Segment",
  [SegmentKind.SKVector]: "Vecteur",
  [SegmentKind.SKLine]: "Droite (infinie)",
};

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.BeltquestionHeader
export interface BeltquestionHeader {
  Id: IdBeltquestion;
  Title: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.DeleteBeltquestionOut
export interface DeleteBeltquestionOut {
  Preview: LoopbackServerEvent;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.DuplicateQuestionOut
export interface DuplicateQuestionOut {
  Question: Beltquestion;
  Preview: LoopbackShowCeinture;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.GetSchemeOut
export interface GetSchemeOut {
  Scheme: Scheme;
  Stages: Ar12_Ar11_StageHeader;
  IsAdmin: boolean;
  Classrooms: Classroom[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.Prerequisite
export interface Prerequisite {
  Need: Stage;
  Pending: Stage;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.SaveBeltQuestionIn
export interface SaveBeltQuestionIn {
  Question: Beltquestion;
  ShowCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.SaveBeltquestionAndPreviewOut
export interface SaveBeltquestionAndPreviewOut {
  Error: ErrQuestionInvalid;
  IsValid: boolean;
  Preview: LoopbackShowCeinture;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.Scheme
export interface Scheme {
  Ps: Prerequisite[] | null;
  Levels: Ar12_Level;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.Stage
export interface Stage {
  Domain: Domain;
  Rank: Rank;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.StageHeader
export interface StageHeader {
  Questions: BeltquestionHeader[] | null;
  HasTODO: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.UpdateBeltquestionIn
export interface UpdateBeltquestionIn {
  Id: IdBeltquestion;
  Repeat: Int;
  Title: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/ceintures.studentAdvance
export interface studentAdvance {
  Student: Student;
  Advance: Beltevolution;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ChapterItems
export interface ChapterItems {
  Chapter: string;
  GroupCount: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.CheckExerciceParametersIn
export interface CheckExerciceParametersIn {
  IdExercice: IdExercice;
  SharedParameters: Parameters;
  QuestionParameters: Parameters[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.CheckExerciceParametersOut
export interface CheckExerciceParametersOut {
  ErrDefinition: ErrParameters;
  QuestionIndex: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.CheckQuestionParametersIn
export interface CheckQuestionParametersIn {
  Parameters: Parameters;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.CheckQuestionParametersOut
export interface CheckQuestionParametersOut {
  ErrDefinition: ErrParameters;
  Variables: Variable[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.DeleteExerciceOut
export interface DeleteExerciceOut {
  Deleted: boolean;
  BlockedBy: TaskUses;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.DeleteQuestionOut
export interface DeleteQuestionOut {
  Deleted: boolean;
  BlockedBy: TaskUses;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceCreateQuestionIn
export interface ExerciceCreateQuestionIn {
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceDuplicateQuestionIn
export interface ExerciceDuplicateQuestionIn {
  QuestionIndex: Int;
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceExt
export interface ExerciceExt {
  Exercice: Exercice;
  Questions: ExerciceQuestionExt[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceHeader
export interface ExerciceHeader {
  Id: IdExercice;
  Subtitle: string;
  Difficulty: DifficultyTag;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceImportQuestionIn
export interface ExerciceImportQuestionIn {
  IdQuestion: IdQuestion;
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceQuestionExt
export interface ExerciceQuestionExt {
  Question: Question;
  Bareme: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceUpdateQuestionsIn
export interface ExerciceUpdateQuestionsIn {
  Questions: ExerciceQuestions;
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceUpdateVisiblityIn
export interface ExerciceUpdateVisiblityIn {
  ID: IdExercicegroup;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExerciceWithPreview
export interface ExerciceWithPreview {
  Ex: ExerciceExt;
  Preview: LoopbackShowExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExercicegroupExt
export interface ExercicegroupExt {
  Group: Exercicegroup;
  Origin: Origin;
  Tags: Tags;
  Variants: ExerciceHeader[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExportExerciceLatexIn
export interface ExportExerciceLatexIn {
  Parameters: Parameters;
  Questions: QuestionPage[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExportExerciceLatexOut
export interface ExportExerciceLatexOut {
  Error: ErrQuestionInvalid;
  QuestionIndex: Int;
  IsValid: boolean;
  Latex: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ExportQuestionLatexOut
export interface ExportQuestionLatexOut {
  Error: ErrQuestionInvalid;
  IsValid: boolean;
  Latex: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.GenerateSyntaxHintIn
export interface GenerateSyntaxHintIn {
  Block: ExpressionFieldBlock;
  SharedParameters: Parameters;
  QuestionParameters: Parameters;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.Index
export type Index = LevelItems[] | null;
// github.com/benoitkugler/maths-online/server/src/prof/editor.LevelItems
export interface LevelItems {
  Level: LevelTag;
  Chapters: ChapterItems[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ListExercicesOut
export interface ListExercicesOut {
  Groups: ExercicegroupExt[] | null;
  NbExercices: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.ListQuestionsOut
export interface ListQuestionsOut {
  Groups: QuestiongroupExt[] | null;
  NbQuestions: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.OriginKind
export const OriginKind = {
  All: 0,
  OnlyPersonnal: 1,
  OnlyAdmin: 2,
} as const;
export type OriginKind = (typeof OriginKind)[keyof typeof OriginKind];

export const OriginKindLabels: Record<OriginKind, string> = {
  [OriginKind.All]: "",
  [OriginKind.OnlyPersonnal]: "",
  [OriginKind.OnlyAdmin]: "",
};

// github.com/benoitkugler/maths-online/server/src/prof/editor.Query
export interface Query {
  TitleQuery: string;
  LevelTags: string[] | null;
  ChapterTags: string[] | null;
  SubLevelTags: string[] | null;
  Origin: OriginKind;
  Matiere: MatiereTag;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.QuestionHeader
export interface QuestionHeader {
  Id: IdQuestion;
  Subtitle: string;
  Difficulty: DifficultyTag;
  HasCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.QuestionUpdateVisiblityIn
export interface QuestionUpdateVisiblityIn {
  ID: IdQuestiongroup;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.QuestiongroupExt
export interface QuestiongroupExt {
  Group: Questiongroup;
  Origin: Origin;
  Tags: Tags;
  Variants: QuestionHeader[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveExerciceAndPreviewIn
export interface SaveExerciceAndPreviewIn {
  OnlyPreview: boolean;
  IdExercice: IdExercice;
  Parameters: Parameters;
  Questions: Question[] | null;
  CurrentQuestion: Int;
  ShowCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveExerciceAndPreviewOut
export interface SaveExerciceAndPreviewOut {
  Error: ErrQuestionInvalid;
  QuestionIndex: Int;
  IsValid: boolean;
  Preview: LoopbackShowExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveQuestionAndPreviewIn
export interface SaveQuestionAndPreviewIn {
  Id: IdQuestion;
  Page: QuestionPage;
  ShowCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveQuestionAndPreviewOut
export interface SaveQuestionAndPreviewOut {
  Error: ErrQuestionInvalid;
  IsValid: boolean;
  Preview: LoopbackShowQuestion;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.SaveQuestionMetaIn
export interface SaveQuestionMetaIn {
  Question: Question;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.TagsDB
export interface TagsDB {
  Levels: string[] | null;
  ChaptersByLevel: Record<string, string[] | null> | null;
  TrivByChapters: Record<string, Record<string, string[] | null> | null> | null;
  SubLevelsByLevel: Record<string, string[] | null> | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.TaskDetails
export interface TaskDetails {
  Id: IdTask;
  Sheet: Sheet;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.TaskUses
export type TaskUses = TaskDetails[] | null;
// github.com/benoitkugler/maths-online/server/src/prof/editor.UpdateExercicegroupTagsIn
export interface UpdateExercicegroupTagsIn {
  Id: IdExercicegroup;
  Tags: Tags;
}
// github.com/benoitkugler/maths-online/server/src/prof/editor.UpdateQuestiongroupTagsIn
export interface UpdateQuestiongroupTagsIn {
  Id: IdQuestiongroup;
  Tags: Tags;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.AddExerciceToTaskIn
export interface AddExerciceToTaskIn {
  IdSheet: IdSheet;
  IdExercice: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.AddMonoquestionToTaskIn
export interface AddMonoquestionToTaskIn {
  IdSheet: IdSheet;
  IdQuestion: IdQuestion;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.AddRandomMonoquestionToTaskIn
export interface AddRandomMonoquestionToTaskIn {
  IdSheet: IdSheet;
  IdQuestiongroup: IdQuestiongroup;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.ClassroomTravaux
export interface ClassroomTravaux {
  Classroom: Classroom;
  Travaux: Travail[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CopySheetIn
export interface CopySheetIn {
  IdSheet: IdSheet;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CopyTravailIn
export interface CopyTravailIn {
  IdTravail: IdTravail;
  IdClassroom: IdClassroom;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CopyTravailToOut
export interface CopyTravailToOut {
  Travail: Travail;
  HasNewSheet: boolean;
  NewSheet: SheetExt;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CreateTravailOut
export interface CreateTravailOut {
  Sheet: SheetExt;
  Travail: Travail;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.CreateTravailWithIn
export interface CreateTravailWithIn {
  IdSheet: IdSheet;
  IdClassroom: IdClassroom;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.Exceptions
export interface Exceptions {
  Exceptions: TravailExceptions;
  Students: Students;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.HomeworkMarksOut
export interface HomeworkMarksOut {
  Students: StudentHeader[] | null;
  Marks: Record<IdTravail, TravailMarks> | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.Homeworks
export interface Homeworks {
  Sheets: Record<IdSheet, SheetExt> | null;
  Travaux: ClassroomTravaux[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.HowemorkMarksIn
export interface HowemorkMarksIn {
  IdClassroom: IdClassroom;
  IdTravaux: IdTravail[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.MissingTasksHint
export interface MissingTasksHint {
  Pattern: Tags;
  MissingExercices: Tags[] | null;
  MissingQuestions: Tags[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.QuestionStat
export interface QuestionStat {
  Description: string;
  Id: IdQuestion;
  Difficulty: DifficultyTag;
  NbSuccess: Int;
  NbFailure: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.ReorderSheetTasksIn
export interface ReorderSheetTasksIn {
  IdSheet: IdSheet;
  Tasks: IdTask[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.SheetExt
export interface SheetExt {
  Sheet: Sheet;
  Tasks: TaskExt[] | null;
  NbTravaux: Int;
  Origin: Origin;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.StudentTravailMark
export interface StudentTravailMark {
  Mark: number;
  Dispensed: boolean;
  NbTries: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.TaskExt
export interface TaskExt {
  Id: IdTask;
  IdWork: WorkID;
  Title: string;
  Tags: Tags;
  GroupID: Int;
  Bareme: TaskBareme;
  NbProgressions: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.TaskStat
export interface TaskStat {
  IdWork: WorkID;
  Title: string;
  QuestionStats: QuestionStat[] | null;
  NbSuccess: Int;
  NbFailure: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/homework.TravailMarks
export interface TravailMarks {
  Marks: Record<IdStudent, StudentTravailMark> | null;
  TaskStats: TaskStat[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackPaused
export type LoopbackPaused = Record<string, never>;

export const LoopbackServerEventKind = {
  LoopbackPaused: "LoopbackPaused",
  LoopbackShowCeinture: "LoopbackShowCeinture",
  LoopbackShowExercice: "LoopbackShowExercice",
  LoopbackShowQuestion: "LoopbackShowQuestion",
} as const;
export type LoopbackServerEventKind =
  (typeof LoopbackServerEventKind)[keyof typeof LoopbackServerEventKind];

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackServerEvent
export type LoopbackServerEvent =
  | { Kind: "LoopbackPaused"; Data: LoopbackPaused }
  | { Kind: "LoopbackShowCeinture"; Data: LoopbackShowCeinture }
  | { Kind: "LoopbackShowExercice"; Data: LoopbackShowExercice }
  | { Kind: "LoopbackShowQuestion"; Data: LoopbackShowQuestion };

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowCeinture
export interface LoopbackShowCeinture {
  Questions: unknown;
  QuestionIndex: Int;
  Origin: QuestionPage[] | null;
  ShowCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowExercice
export interface LoopbackShowExercice {
  Exercice: unknown;
  Progression: unknown;
  ShowCorrection: boolean;
  Origin: QuestionPage[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowQuestion
export interface LoopbackShowQuestion {
  Question: unknown;
  Params: unknown;
  ShowCorrection: boolean;
  Origin: QuestionPage;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.LoadTargetOut
export interface LoadTargetOut {
  Content: TargetContent;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewComment
export interface ReviewComment {
  Comment: Comment;
  AuthorMail: string;
  IsOwned: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewCreateIn
export interface ReviewCreateIn {
  Kind: ReviewKind;
  Id: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewExt
export interface ReviewExt {
  Approvals: Ar3_Int;
  Comments: ReviewComment[] | null;
  UserApproval: Approval;
  IsDeletable: boolean;
  IsAcceptable: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewHeader
export interface ReviewHeader {
  Id: IdReview;
  Title: string;
  Kind: ReviewKind;
  OwnerMail: string;
  NbComments: Int;
  Matiere: MatiereTag;
  Level: LevelTag;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewUpdateApprovalIn
export interface ReviewUpdateApprovalIn {
  IdReview: IdReview;
  Approval: Approval;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.ReviewUpdateCommentsIn
export interface ReviewUpdateCommentsIn {
  IdReview: IdReview;
  Comments: Comments;
}

export const TargetContentKind = {
  TargetExercice: "TargetExercice",
  TargetQuestion: "TargetQuestion",
  TargetSheet: "TargetSheet",
  TargetTrivial: "TargetTrivial",
} as const;
export type TargetContentKind =
  (typeof TargetContentKind)[keyof typeof TargetContentKind];

// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetContent
export type TargetContent =
  | { Kind: "TargetExercice"; Data: TargetExercice }
  | { Kind: "TargetQuestion"; Data: TargetQuestion }
  | { Kind: "TargetSheet"; Data: TargetSheet }
  | { Kind: "TargetTrivial"; Data: TargetTrivial };

// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetExercice
export interface TargetExercice {
  Group: ExercicegroupExt;
  AllTags: TagsDB;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetQuestion
export interface TargetQuestion {
  Group: QuestiongroupExt;
  Variants: Question[] | null;
  AllTags: TagsDB;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetSheet
export interface TargetSheet {
  Sheet: SheetExt;
}
// github.com/benoitkugler/maths-online/server/src/prof/reviews.TargetTrivial
export interface TargetTrivial {
  Config: Trivial;
  NbQuestionsByCategories: Ar5_Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.AskInscriptionIn
export interface AskInscriptionIn {
  Mail: string;
  Password: string;
  FavoriteMatiere: MatiereTag;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.AskInscriptionOut
export interface AskInscriptionOut {
  Error: string;
  IsPasswordError: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.ClassroomExt
export interface ClassroomExt {
  Classroom: Classroom;
  NbStudents: Int;
  SharedWith: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.GenerateClassroomCodeOut
export interface GenerateClassroomCodeOut {
  Code: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.InviteTeacherIn
export interface InviteTeacherIn {
  IdClassroom: IdClassroom;
  MailToInvite: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.LogginIn
export interface LogginIn {
  Mail: string;
  Password: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.LogginOut
export interface LogginOut {
  Error: string;
  IsPasswordError: boolean;
  Token: string;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.OptionalIdReview
export interface OptionalIdReview {
  InReview: boolean;
  Id: IdReview;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.Origin
export interface Origin {
  Visibility: Visibility;
  PublicStatus: PublicStatus;
  IsInReview: OptionalIdReview;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.PublicStatus
export const PublicStatus = {
  NotAdmin: 0,
  AdminPublic: 1,
  AdminNotPublic: 2,
} as const;
export type PublicStatus = (typeof PublicStatus)[keyof typeof PublicStatus];

export const PublicStatusLabels: Record<PublicStatus, string> = {
  [PublicStatus.NotAdmin]: "",
  [PublicStatus.AdminPublic]: "",
  [PublicStatus.AdminNotPublic]: "",
};

// github.com/benoitkugler/maths-online/server/src/prof/teacher.StudentExt
export interface StudentExt {
  Student: Student;
  Success: StudentAdvance;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.StudentHeader
export interface StudentHeader {
  Id: IdStudent;
  Label: string;
  HasAttachedClients: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.TeacherSettings
export interface TeacherSettings {
  Mail: string;
  Password: string;
  HasEditorSimplified: boolean;
  Contact: Contact;
  FavoriteMatiere: MatiereTag;
}
// github.com/benoitkugler/maths-online/server/src/prof/teacher.Visibility
export const Visibility = {
  Hidden: 0,
  Personnal: 1,
  Admin: 2,
} as const;
export type Visibility = (typeof Visibility)[keyof typeof Visibility];

export const VisibilityLabels: Record<Visibility, string> = {
  [Visibility.Hidden]: "not accessible by the user, except in reviews",
  [Visibility.Personnal]: "Personnel",
  [Visibility.Admin]: "Officiel",
};

// github.com/benoitkugler/maths-online/server/src/prof/trivial.CheckMissingQuestionsOut
export interface CheckMissingQuestionsOut {
  Pattern: Tags;
  Missing: Tags[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.GamePlayers
export interface GamePlayers {
  Player: string;
  Successes: Success;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.GameSummary
export interface GameSummary {
  GameID: RoomID;
  CurrentPlayer: string;
  LatestQuestion: QuestionContent;
  Players: GamePlayers[] | null;
  RoomSize: RoomSize;
  InQuestionStudents: string[] | null;
}

export const GroupsStrategyKind = {
  GroupsStrategyAuto: "GroupsStrategyAuto",
  GroupsStrategyManual: "GroupsStrategyManual",
} as const;
export type GroupsStrategyKind =
  (typeof GroupsStrategyKind)[keyof typeof GroupsStrategyKind];

// github.com/benoitkugler/maths-online/server/src/prof/trivial.GroupsStrategy
export type GroupsStrategy =
  | { Kind: "GroupsStrategyAuto"; Data: GroupsStrategyAuto }
  | { Kind: "GroupsStrategyManual"; Data: GroupsStrategyManual };

// github.com/benoitkugler/maths-online/server/src/prof/trivial.GroupsStrategyAuto
export interface GroupsStrategyAuto {
  Groups: Int[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.GroupsStrategyManual
export interface GroupsStrategyManual {
  NbGroups: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.LaunchSessionIn
export interface LaunchSessionIn {
  IdConfig: IdTrivial;
  Groups: GroupsStrategy;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.LaunchSessionOut
export interface LaunchSessionOut {
  GameIDs: RoomID[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.MonitorOut
export interface MonitorOut {
  Games: GameSummary[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.QuestionContent
export interface QuestionContent {
  Id: IdQuestion;
  Categorie: Categorie;
  Question: unknown;
  Params: unknown;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.RunningSessionMetaOut
export interface RunningSessionMetaOut {
  NbGames: Int;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.TrivialExt
export interface TrivialExt {
  Config: Trivial;
  Origin: Origin;
  NbQuestionsByCategories: Ar5_Int;
  Levels: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.TrivialSelfaccess
export interface TrivialSelfaccess {
  Classrooms: Classroom[] | null;
  Actives: IdClassroom[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.UpdateSelfaccessIn
export interface UpdateSelfaccessIn {
  IdTrivial: IdTrivial;
  IdClassrooms: IdClassroom[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.UpdateTrivialVisiblityIn
export interface UpdateTrivialVisiblityIn {
  ConfigID: IdTrivial;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/trivial.stopGame
export interface stopGame {
  ID: string;
  Restart: boolean;
}
// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Advance
export type Advance = Ar12_Rank;
// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Beltevolution
export interface Beltevolution {
  IdStudent: IdStudent;
  Level: Level;
  Advance: Advance;
  Stats: Stats;
}
// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Beltquestion
export interface Beltquestion {
  Id: IdBeltquestion;
  Domain: Domain;
  Rank: Rank;
  Parameters: Parameters;
  Enonce: Enonce;
  Correction: Enonce;
  Repeat: Int;
  Title: string;
}
// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Domain
export const Domain = {
  CalculMentalI: 0,
  CalculMentalII: 1,
  Puissances: 2,
  Fractions: 3,
  Reduction: 4,
  Factorisation: 5,
  Developpement: 6,
  IsolerVariable: 7,
  Equations: 8,
  Inequations: 9,
  Derivation: 10,
  Matrices: 11,
} as const;
export type Domain = (typeof Domain)[keyof typeof Domain];

export const DomainLabels: Record<Domain, string> = {
  [Domain.CalculMentalI]: "Calcul mental I",
  [Domain.CalculMentalII]: "Calcul mental II",
  [Domain.Puissances]: "Puissances et racines",
  [Domain.Fractions]: "Fractions",
  [Domain.Reduction]: "R√©duction",
  [Domain.Factorisation]: "Factorisation",
  [Domain.Developpement]: "D√©veloppement",
  [Domain.IsolerVariable]: "Isoler une variable",
  [Domain.Equations]: "√âquations",
  [Domain.Inequations]: "In√©quations",
  [Domain.Derivation]: "D√©rivation",
  [Domain.Matrices]: "Matrices et syst√®mes",
};

export type IdBeltquestion = Int & { __opaque_int__: "IdBeltquestion" };
// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Level
export const Level = {
  Seconde: 0,
  Premiere: 1,
  Terminale: 2,
  PostBac: 3,
} as const;
export type Level = (typeof Level)[keyof typeof Level];

export const LevelLabels: Record<Level, string> = {
  [Level.Seconde]: "Seconde",
  [Level.Premiere]: "Premi√®re",
  [Level.Terminale]: "Terminale",
  [Level.PostBac]: "Post-bac",
};

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Rank
export const Rank = {
  StartRank: 0,
  Blanche: 1,
  Jaune: 2,
  Orange: 3,
  VerteI: 4,
  VerteII: 5,
  Bleue: 6,
  Violet: 7,
  Rouge: 8,
  Marron: 9,
  Noire: 10,
} as const;
export type Rank = (typeof Rank)[keyof typeof Rank];

export const RankLabels: Record<Rank, string> = {
  [Rank.StartRank]: "D√©part",
  [Rank.Blanche]: "Blanche",
  [Rank.Jaune]: "Jaune",
  [Rank.Orange]: "Orange",
  [Rank.VerteI]: "Verte clair",
  [Rank.VerteII]: "Verte fonc√©e",
  [Rank.Bleue]: "Bleue",
  [Rank.Violet]: "Violette",
  [Rank.Rouge]: "Rouge",
  [Rank.Marron]: "Marron",
  [Rank.Noire]: "Noire",
};

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Stat
export interface Stat {
  Success: Int;
  Failure: Int;
}
// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Stats
export type Stats = Ar12_Ar11_Stat;
// github.com/benoitkugler/maths-online/server/src/sql/editor.DifficultyQuery
export type DifficultyQuery = DifficultyTag[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/editor.DifficultyTag
export const DifficultyTag = {
  Diff1: "‚òÖ",
  Diff2: "‚òÖ‚òÖ",
  Diff3: "‚òÖ‚òÖ‚òÖ",
  DiffEmpty: "",
} as const;
export type DifficultyTag = (typeof DifficultyTag)[keyof typeof DifficultyTag];

export const DifficultyTagLabels: Record<DifficultyTag, string> = {
  [DifficultyTag.Diff1]: "1 √©toile",
  [DifficultyTag.Diff2]: "2 √©toiles",
  [DifficultyTag.Diff3]: "3 √©toiles",
  [DifficultyTag.DiffEmpty]: "",
};

// github.com/benoitkugler/maths-online/server/src/sql/editor.Exercice
export interface Exercice {
  Id: IdExercice;
  IdGroup: IdExercicegroup;
  Subtitle: string;
  Parameters: Parameters;
  Difficulty: DifficultyTag;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.ExerciceQuestion
export interface ExerciceQuestion {
  id_exercice: IdExercice;
  id_question: IdQuestion;
  bareme: Int;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.ExerciceQuestions
export type ExerciceQuestions = ExerciceQuestion[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/editor.Exercicegroup
export interface Exercicegroup {
  Id: IdExercicegroup;
  Title: string;
  Public: boolean;
  IdTeacher: IdTeacher;
}
export type IdExercice = Int & { __opaque_int__: "IdExercice" };
export type IdExercicegroup = Int & { __opaque_int__: "IdExercicegroup" };
export type IdQuestion = Int & { __opaque_int__: "IdQuestion" };
export type IdQuestiongroup = Int & { __opaque_int__: "IdQuestiongroup" };
// github.com/benoitkugler/maths-online/server/src/sql/editor.LevelTag
export const LevelTag = {
  CPGE: "CPGE",
  Premiere: "1ERE",
  Seconde: "2NDE",
  Terminale: "TERM",
} as const;
export type LevelTag = (typeof LevelTag)[keyof typeof LevelTag];

export const LevelTagLabels: Record<LevelTag, string> = {
  [LevelTag.CPGE]: "CPGE",
  [LevelTag.Premiere]: "Premi√®re",
  [LevelTag.Seconde]: "Seconde",
  [LevelTag.Terminale]: "Terminale",
};

// github.com/benoitkugler/maths-online/server/src/sql/editor.OptionalIdExercice
export interface OptionalIdExercice {
  Valid: boolean;
  ID: IdExercice;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.OptionalIdQuestiongroup
export interface OptionalIdQuestiongroup {
  ID: IdQuestiongroup;
  Valid: boolean;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.Question
export interface Question {
  Id: IdQuestion;
  Subtitle: string;
  Difficulty: DifficultyTag;
  NeedExercice: OptionalIdExercice;
  IdGroup: OptionalIdQuestiongroup;
  Enonce: Enonce;
  Parameters: Parameters;
  Correction: Enonce;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.Questiongroup
export interface Questiongroup {
  Id: IdQuestiongroup;
  Title: string;
  Public: boolean;
  IdTeacher: IdTeacher;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.Section
export const Section = {
  Chapter: 2,
  Level: 1,
  Matiere: 5,
  SubLevel: 4,
  TrivMath: 3,
} as const;
export type Section = (typeof Section)[keyof typeof Section];

export const SectionLabels: Record<Section, string> = {
  [Section.Chapter]: "Chapitre",
  [Section.Level]: "Niveau",
  [Section.Matiere]: "Mati√®re",
  [Section.SubLevel]: "Fili√®re",
  [Section.TrivMath]: "Triv'Math",
};

// github.com/benoitkugler/maths-online/server/src/sql/editor.TagSection
export interface TagSection {
  Tag: string;
  Section: Section;
}
// github.com/benoitkugler/maths-online/server/src/sql/editor.Tags
export type Tags = TagSection[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/events.StudentAdvance
export interface StudentAdvance {
  Occurences: Ar11_Int;
  TotalPoints: Int;
  Flames: Int;
  Rank: Int;
  PointsCurrentRank: Int;
  PointsNextRank: Int;
}
export type IdSheet = Int & { __opaque_int__: "IdSheet" };
export type IdTravail = Int & { __opaque_int__: "IdTravail" };
// github.com/benoitkugler/maths-online/server/src/sql/homework.OptionalIdTravail
export interface OptionalIdTravail {
  Valid: boolean;
  ID: IdTravail;
}
// github.com/benoitkugler/maths-online/server/src/sql/homework.QuestionRepeat
export const QuestionRepeat = {
  Unlimited: 0,
  OneTry: 1,
} as const;
export type QuestionRepeat =
  (typeof QuestionRepeat)[keyof typeof QuestionRepeat];

export const QuestionRepeatLabels: Record<QuestionRepeat, string> = {
  [QuestionRepeat.Unlimited]: "Illimit√©",
  [QuestionRepeat.OneTry]: "Un seul",
};

// github.com/benoitkugler/maths-online/server/src/sql/homework.Sheet
export interface Sheet {
  Id: IdSheet;
  Title: string;
  IdTeacher: IdTeacher;
  Level: string;
  Anonymous: OptionalIdTravail;
  Public: boolean;
  Matiere: MatiereTag;
}
// github.com/benoitkugler/maths-online/server/src/sql/homework.Travail
export interface Travail {
  Id: IdTravail;
  IdClassroom: IdClassroom;
  IdSheet: IdSheet;
  Noted: boolean;
  Deadline: Time;
  ShowAfter: Time;
  QuestionRepeat: QuestionRepeat;
  QuestionTimeLimit: Int;
}
// github.com/benoitkugler/maths-online/server/src/sql/homework.TravailException
export interface TravailException {
  IdStudent: IdStudent;
  IdTravail: IdTravail;
  Deadline: NullTime;
  IgnoreForMark: boolean;
}
// github.com/benoitkugler/maths-online/server/src/sql/homework.TravailExceptions
export type TravailExceptions = TravailException[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/reviews.Approval
export const Approval = {
  Neutral: 0,
  InFavor: 1,
  Opposed: 2,
} as const;
export type Approval = (typeof Approval)[keyof typeof Approval];

export const ApprovalLabels: Record<Approval, string> = {
  [Approval.Neutral]: "",
  [Approval.InFavor]: "",
  [Approval.Opposed]: "",
};

// github.com/benoitkugler/maths-online/server/src/sql/reviews.Comment
export interface Comment {
  Time: Time;
  Message: string;
}
// github.com/benoitkugler/maths-online/server/src/sql/reviews.Comments
export type Comments = Comment[] | null;
export type IdReview = Int & { __opaque_int__: "IdReview" };
// github.com/benoitkugler/maths-online/server/src/sql/reviews.Review
export interface Review {
  Id: IdReview;
  Kind: ReviewKind;
}
// github.com/benoitkugler/maths-online/server/src/sql/reviews.ReviewKind
export const ReviewKind = {
  KQuestion: 0,
  KExercice: 1,
  KTrivial: 2,
  KSheet: 3,
} as const;
export type ReviewKind = (typeof ReviewKind)[keyof typeof ReviewKind];

export const ReviewKindLabels: Record<ReviewKind, string> = {
  [ReviewKind.KQuestion]: "Question",
  [ReviewKind.KExercice]: "Exercice",
  [ReviewKind.KTrivial]: "Isy'Triv",
  [ReviewKind.KSheet]: "Feuille d'exercice",
};

export type IdMonoquestion = Int & { __opaque_int__: "IdMonoquestion" };
export type IdRandomMonoquestion = Int & {
  __opaque_int__: "IdRandomMonoquestion";
};
export type IdTask = Int & { __opaque_int__: "IdTask" };
// github.com/benoitkugler/maths-online/server/src/sql/tasks.Monoquestion
export interface Monoquestion {
  Id: IdMonoquestion;
  IdQuestion: IdQuestion;
  NbRepeat: Int;
  Bareme: Int;
}
// github.com/benoitkugler/maths-online/server/src/sql/tasks.RandomMonoquestion
export interface RandomMonoquestion {
  Id: IdRandomMonoquestion;
  IdQuestiongroup: IdQuestiongroup;
  NbRepeat: Int;
  Bareme: Int;
  Difficulty: DifficultyQuery;
}
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Classroom
export interface Classroom {
  id: IdClassroom;
  name: string;
  MaxRankThreshold: Int;
}
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Client
export interface Client {
  Device: string;
  Time: Time;
}
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Clients
export type Clients = Client[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Contact
export interface Contact {
  Name: string;
  URL: string;
}
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Date
export type Date = Date_;
export type IdClassroom = Int & { __opaque_int__: "IdClassroom" };
export type IdStudent = Int & { __opaque_int__: "IdStudent" };
export type IdTeacher = Int & { __opaque_int__: "IdTeacher" };
// github.com/benoitkugler/maths-online/server/src/sql/teacher.MatiereTag
export const MatiereTag = {
  Allemand: "ALLEMAND",
  Anglais: "ANGLAIS",
  Autre: "AUTRE",
  Espagnol: "ESPAGNOL",
  Francais: "FRANCAIS",
  HistoireGeo: "HISTOIRE-GEO",
  Italien: "ITALIEN",
  Mathematiques: "MATHS",
  PhysiqueChimie: "PHYSIQUE",
  SES: "SES",
  SVT: "SVT",
} as const;
export type MatiereTag = (typeof MatiereTag)[keyof typeof MatiereTag];

export const MatiereTagLabels: Record<MatiereTag, string> = {
  [MatiereTag.Allemand]: "ALLEMAND",
  [MatiereTag.Anglais]: "ANGLAIS",
  [MatiereTag.Autre]: "AUTRE",
  [MatiereTag.Espagnol]: "ESPAGNOL",
  [MatiereTag.Francais]: "FRANCAIS",
  [MatiereTag.HistoireGeo]: "HISTOIRE-GEO",
  [MatiereTag.Italien]: "ITALIEN",
  [MatiereTag.Mathematiques]: "MATHS",
  [MatiereTag.PhysiqueChimie]: "PHYSIQUE",
  [MatiereTag.SES]: "SES",
  [MatiereTag.SVT]: "SVT",
};

// github.com/benoitkugler/maths-online/server/src/sql/teacher.Student
export interface Student {
  Id: IdStudent;
  Name: string;
  Surname: string;
  Birthday: Date;
  id_classroom: IdClassroom;
  Clients: Clients;
}
// github.com/benoitkugler/maths-online/server/src/sql/teacher.Students
export type Students = Record<IdStudent, Student> | null;
// github.com/benoitkugler/maths-online/server/src/sql/trivial.CategoriesQuestions
export interface CategoriesQuestions {
  Tags: Ar5_QuestionCriterion;
  Difficulties: DifficultyQuery;
}
export type IdTrivial = Int & { __opaque_int__: "IdTrivial" };
// github.com/benoitkugler/maths-online/server/src/sql/trivial.QuestionCriterion
export type QuestionCriterion = (TagSection[] | null)[] | null;
// github.com/benoitkugler/maths-online/server/src/sql/trivial.Trivial
export interface Trivial {
  Id: IdTrivial;
  Questions: CategoriesQuestions;
  QuestionTimeout: Int;
  ShowDecrassage: boolean;
  Public: boolean;
  IdTeacher: IdTeacher;
  Name: string;
}
// github.com/benoitkugler/maths-online/server/src/tasks.TaskBareme
export type TaskBareme = Int[] | null;
// github.com/benoitkugler/maths-online/server/src/tasks.WorkID
export interface WorkID {
  ID: Int;
  Kind: WorkKind;
  IsExercice: boolean;
}
// github.com/benoitkugler/maths-online/server/src/tasks.WorkKind
export const WorkKind = {
  WorkExercice: 1,
  WorkMonoquestion: 2,
  WorkRandomMonoquestion: 3,
} as const;
export type WorkKind = (typeof WorkKind)[keyof typeof WorkKind];

export const WorkKindLabels: Record<WorkKind, string> = {
  [WorkKind.WorkExercice]: "",
  [WorkKind.WorkMonoquestion]: "",
  [WorkKind.WorkRandomMonoquestion]: "",
};

// github.com/benoitkugler/maths-online/server/src/trivial.Categorie
export const Categorie = {
  Purple: 0,
  Green: 1,
  Orange: 2,
  Yellow: 3,
  Blue: 4,
  nbCategories: 5,
} as const;
export type Categorie = (typeof Categorie)[keyof typeof Categorie];

export const CategorieLabels: Record<Categorie, string> = {
  [Categorie.Purple]: "purple",
  [Categorie.Green]: "green",
  [Categorie.Orange]: "orange",
  [Categorie.Yellow]: "yellow",
  [Categorie.Blue]: "blue",
  [Categorie.nbCategories]: "the number of categories a player should complete",
};

// github.com/benoitkugler/maths-online/server/src/trivial.RoomID
export type RoomID = string;
// github.com/benoitkugler/maths-online/server/src/trivial.RoomSize
export interface RoomSize {
  Current: Int;
  Max: Int;
}
// github.com/benoitkugler/maths-online/server/src/trivial.Success
export type Success = Ar5_boolean;

/** AbstractAPI provides auto-generated API calls and should be used 
		as base class for an app controller.
	*/
export abstract class AbstractAPI {
  constructor(
    protected baseURL: string,
    public authToken: string,
  ) {}

  protected abstract handleError(error: any): void;

  protected abstract startRequest(): void;

  getHeaders() {
    return { Authorization: "Bearer " + this.authToken };
  }

  /** AskInscription performs the request and handles the error */
  async AskInscription(params: AskInscriptionIn) {
    const fullUrl = this.baseURL + "/prof/inscription";
    this.startRequest();
    try {
      const rep: AxiosResponse<AskInscriptionOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ValidateInscription performs the request and handles the error */
  async ValidateInscription(params: { data: string }) {
    const fullUrl = this.baseURL + "inscription";
    this.startRequest();
    try {
      await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { data: params["data"] },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** Loggin performs the request and handles the error */
  async Loggin(params: LogginIn) {
    const fullUrl = this.baseURL + "/prof/loggin";
    this.startRequest();
    try {
      const rep: AxiosResponse<LogginOut> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherSendResetPassword performs the request and handles the error */
  async TeacherSendResetPassword(params: { mail: string }) {
    const fullUrl = this.baseURL + "/api/prof/send-reset";
    this.startRequest();
    try {
      await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { mail: params["mail"] },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherResetPassword performs the request and handles the error */
  async TeacherResetPassword(params: { seal: string; password: string }) {
    const fullUrl = this.baseURL + "/api/prof/reset";
    this.startRequest();
    try {
      await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { seal: params["seal"], password: params["password"] },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** Returns an URL */
  TeacherExportStudentsAdvance(id_classroom: IdClassroom, token: string) {
    return (
      this.baseURL +
      "/api/prof/classrooms/students-csv" +
      `?id-classroom=${id_classroom}&token=${token}`
    );
  }

  /** TeacherGetSettings performs the request and handles the error */
  async TeacherGetSettings() {
    const fullUrl = this.baseURL + "/api/prof/settings";
    this.startRequest();
    try {
      const rep: AxiosResponse<TeacherSettings> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherUpdateSettings performs the request and handles the error */
  async TeacherUpdateSettings(params: TeacherSettings) {
    const fullUrl = this.baseURL + "/api/prof/settings";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherGetClassrooms performs the request and handles the error */
  async TeacherGetClassrooms() {
    const fullUrl = this.baseURL + "/api/prof/classrooms";
    this.startRequest();
    try {
      const rep: AxiosResponse<ClassroomExt[] | null> = await Axios.get(
        fullUrl,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherCreateClassroom performs the request and handles the error */
  async TeacherCreateClassroom() {
    const fullUrl = this.baseURL + "/api/prof/classrooms";
    this.startRequest();
    try {
      await Axios.put(fullUrl, null, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherUpdateClassroom performs the request and handles the error */
  async TeacherUpdateClassroom(params: Classroom) {
    const fullUrl = this.baseURL + "/api/prof/classrooms";
    this.startRequest();
    try {
      const rep: AxiosResponse<Classroom> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherDeleteClassroom performs the request and handles the error */
  async TeacherDeleteClassroom(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/classrooms";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherInviteTeacherToClassroom performs the request and handles the error */
  async TeacherInviteTeacherToClassroom(params: InviteTeacherIn) {
    const fullUrl = this.baseURL + "/api/prof/classrooms/invite";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherGetClassroomStudents performs the request and handles the error */
  async TeacherGetClassroomStudents(params: { "id-classroom": Int }) {
    const fullUrl = this.baseURL + "/api/prof/classrooms/students";
    this.startRequest();
    try {
      const rep: AxiosResponse<StudentExt[] | null> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { "id-classroom": String(params["id-classroom"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherAddStudent performs the request and handles the error */
  async TeacherAddStudent(params: { "id-classroom": Int }) {
    const fullUrl = this.baseURL + "/api/prof/classrooms/students";
    this.startRequest();
    try {
      const rep: AxiosResponse<StudentExt> = await Axios.put(fullUrl, null, {
        headers: this.getHeaders(),
        params: { "id-classroom": String(params["id-classroom"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherUpdateStudent performs the request and handles the error */
  async TeacherUpdateStudent(params: Student) {
    const fullUrl = this.baseURL + "/api/prof/classrooms/students";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherDeleteStudent performs the request and handles the error */
  async TeacherDeleteStudent(params: { "id-student": Int }) {
    const fullUrl = this.baseURL + "/api/prof/classrooms/students";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { "id-student": String(params["id-student"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherImportStudents performs the request and handles the error */
  async TeacherImportStudents(
    formParams: { "id-classroom": string },
    file: File,
  ) {
    const fullUrl = this.baseURL + "/api/prof/classrooms/students/import";
    this.startRequest();
    try {
      const formData = new FormData();
      formData.append("file", file, file.name);
      formData.append("id-classroom", formParams["id-classroom"]);
      await Axios.post(fullUrl, formData, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TeacherGenerateClassroomCode performs the request and handles the error */
  async TeacherGenerateClassroomCode(params: { "id-classroom": Int }) {
    const fullUrl = this.baseURL + "/api/prof/classrooms/students/connect";
    this.startRequest();
    try {
      const rep: AxiosResponse<GenerateClassroomCodeOut> = await Axios.get(
        fullUrl,
        {
          headers: this.getHeaders(),
          params: { "id-classroom": String(params["id-classroom"]) },
        },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** GetTrivialPoursuit performs the request and handles the error */
  async GetTrivialPoursuit(params: { matiere: string }) {
    const fullUrl = this.baseURL + "/api/prof/trivial/config";
    this.startRequest();
    try {
      const rep: AxiosResponse<TrivialExt[] | null> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { matiere: params["matiere"] },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CreateTrivialPoursuit performs the request and handles the error */
  async CreateTrivialPoursuit(params: { matiere: string }) {
    const fullUrl = this.baseURL + "/api/prof/trivial/config";
    this.startRequest();
    try {
      const rep: AxiosResponse<TrivialExt> = await Axios.put(fullUrl, null, {
        headers: this.getHeaders(),
        params: { matiere: params["matiere"] },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** UpdateTrivialPoursuit performs the request and handles the error */
  async UpdateTrivialPoursuit(params: Trivial) {
    const fullUrl = this.baseURL + "/api/prof/trivial/config";
    this.startRequest();
    try {
      const rep: AxiosResponse<TrivialExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** DeleteTrivialPoursuit performs the request and handles the error */
  async DeleteTrivialPoursuit(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/trivial/config";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** UpdateTrivialVisiblity performs the request and handles the error */
  async UpdateTrivialVisiblity(params: UpdateTrivialVisiblityIn) {
    const fullUrl = this.baseURL + "/api/prof/trivial/config/visibility";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** DuplicateTrivialPoursuit performs the request and handles the error */
  async DuplicateTrivialPoursuit(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/trivial/config/duplicate";
    this.startRequest();
    try {
      const rep: AxiosResponse<TrivialExt> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CheckMissingQuestions performs the request and handles the error */
  async CheckMissingQuestions(params: CategoriesQuestions) {
    const fullUrl =
      this.baseURL + "/api/prof/trivial/config/check-missing-questions";
    this.startRequest();
    try {
      const rep: AxiosResponse<CheckMissingQuestionsOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TrivialTeacherMonitor performs the request and handles the error */
  async TrivialTeacherMonitor() {
    const fullUrl = this.baseURL + "/api/prof/trivial/monitor";
    this.startRequest();
    try {
      const rep: AxiosResponse<MonitorOut> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TrivialGetSelfaccess performs the request and handles the error */
  async TrivialGetSelfaccess(params: { "id-trivial": Int }) {
    const fullUrl = this.baseURL + "/api/prof/trivial/selfaccess";
    this.startRequest();
    try {
      const rep: AxiosResponse<TrivialSelfaccess> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { "id-trivial": String(params["id-trivial"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** TrivialUpdateSelfaccess performs the request and handles the error */
  async TrivialUpdateSelfaccess(params: UpdateSelfaccessIn) {
    const fullUrl = this.baseURL + "/api/prof/trivial/selfaccess";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** GetTrivialRunningSessions performs the request and handles the error */
  async GetTrivialRunningSessions() {
    const fullUrl = this.baseURL + "/api/trivial/sessions";
    this.startRequest();
    try {
      const rep: AxiosResponse<RunningSessionMetaOut> = await Axios.get(
        fullUrl,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** LaunchSessionTrivialPoursuit performs the request and handles the error */
  async LaunchSessionTrivialPoursuit(params: LaunchSessionIn) {
    const fullUrl = this.baseURL + "/api/trivial/sessions";
    this.startRequest();
    try {
      const rep: AxiosResponse<LaunchSessionOut> = await Axios.put(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** StartTrivialGame performs the request and handles the error */
  async StartTrivialGame(params: { "game-id": string }) {
    const fullUrl = this.baseURL + "/api/trivial/sessions/start";
    this.startRequest();
    try {
      await Axios.post(fullUrl, null, {
        headers: this.getHeaders(),
        params: { "game-id": params["game-id"] },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** StopTrivialGame performs the request and handles the error */
  async StopTrivialGame(params: stopGame) {
    const fullUrl = this.baseURL + "/api/trivial/sessions/stop";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorGetTags performs the request and handles the error */
  async EditorGetTags() {
    const fullUrl = this.baseURL + "/api/prof/editor/tags";
    this.startRequest();
    try {
      const rep: AxiosResponse<TagsDB> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorGenerateSyntaxHint performs the request and handles the error */
  async EditorGenerateSyntaxHint(params: GenerateSyntaxHintIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/syntax-hint";
    this.startRequest();
    try {
      const rep: AxiosResponse<TextBlock> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorGetQuestionsIndex performs the request and handles the error */
  async EditorGetQuestionsIndex() {
    const fullUrl = this.baseURL + "/api/prof/editor/questiongroups";
    this.startRequest();
    try {
      const rep: AxiosResponse<Index> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorSearchQuestions performs the request and handles the error */
  async EditorSearchQuestions(params: Query) {
    const fullUrl = this.baseURL + "/api/prof/editor/questiongroups";
    this.startRequest();
    try {
      const rep: AxiosResponse<ListQuestionsOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorDuplicateQuestion performs the request and handles the error */
  async EditorDuplicateQuestion(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/question/duplicate";
    this.startRequest();
    try {
      const rep: AxiosResponse<Question> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorDuplicateQuestiongroup performs the request and handles the error */
  async EditorDuplicateQuestiongroup(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/questiongroup/duplicate";
    this.startRequest();
    try {
      await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorCreateQuestiongroup performs the request and handles the error */
  async EditorCreateQuestiongroup() {
    const fullUrl = this.baseURL + "/api/prof/editor/questiongroup";
    this.startRequest();
    try {
      const rep: AxiosResponse<QuestiongroupExt> = await Axios.put(
        fullUrl,
        null,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorUpdateQuestiongroup performs the request and handles the error */
  async EditorUpdateQuestiongroup(params: Questiongroup) {
    const fullUrl = this.baseURL + "/api/prof/editor/questiongroup";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorDeleteQuestiongroup performs the request and handles the error */
  async EditorDeleteQuestiongroup(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/questiongroup";
    this.startRequest();
    try {
      const rep: AxiosResponse<DeleteQuestionOut> = await Axios.delete(
        fullUrl,
        { headers: this.getHeaders(), params: { id: String(params["id"]) } },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorUpdateQuestionTags performs the request and handles the error */
  async EditorUpdateQuestionTags(params: UpdateQuestiongroupTagsIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/questiongroup/tags";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorUpdateQuestiongroupVis performs the request and handles the error */
  async EditorUpdateQuestiongroupVis(params: QuestionUpdateVisiblityIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/questiongroup/visibility";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorGetQuestions performs the request and handles the error */
  async EditorGetQuestions(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/question";
    this.startRequest();
    try {
      const rep: AxiosResponse<Question[] | null> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorDeleteQuestion performs the request and handles the error */
  async EditorDeleteQuestion(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/question";
    this.startRequest();
    try {
      const rep: AxiosResponse<DeleteQuestionOut> = await Axios.delete(
        fullUrl,
        { headers: this.getHeaders(), params: { id: String(params["id"]) } },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorSaveQuestionMeta performs the request and handles the error */
  async EditorSaveQuestionMeta(params: SaveQuestionMetaIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/question/variant";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorCheckQuestionParameters performs the request and handles the error */
  async EditorCheckQuestionParameters(params: CheckQuestionParametersIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/question/check-params";
    this.startRequest();
    try {
      const rep: AxiosResponse<CheckQuestionParametersOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorSaveQuestionAndPreview performs the request and handles the error */
  async EditorSaveQuestionAndPreview(params: SaveQuestionAndPreviewIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/question/preview";
    this.startRequest();
    try {
      const rep: AxiosResponse<SaveQuestionAndPreviewOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorQuestionExportLateX performs the request and handles the error */
  async EditorQuestionExportLateX(params: QuestionPage) {
    const fullUrl = this.baseURL + "/api/prof/editor/question/export/latex";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExportQuestionLatexOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorGetExercicesIndex performs the request and handles the error */
  async EditorGetExercicesIndex() {
    const fullUrl = this.baseURL + "/api/prof/editor/exercicegroups";
    this.startRequest();
    try {
      const rep: AxiosResponse<Index> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorSearchExercices performs the request and handles the error */
  async EditorSearchExercices(params: Query) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercicegroups";
    this.startRequest();
    try {
      const rep: AxiosResponse<ListExercicesOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorUpdateExercicegroup performs the request and handles the error */
  async EditorUpdateExercicegroup(params: Exercicegroup) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercicegroup";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorDeleteExercicegroup performs the request and handles the error */
  async EditorDeleteExercicegroup(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercicegroup";
    this.startRequest();
    try {
      const rep: AxiosResponse<DeleteExerciceOut> = await Axios.delete(
        fullUrl,
        { headers: this.getHeaders(), params: { id: String(params["id"]) } },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorUpdateExerciceTags performs the request and handles the error */
  async EditorUpdateExerciceTags(params: UpdateExercicegroupTagsIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercicegroup/tags";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorDuplicateExercicegroup performs the request and handles the error */
  async EditorDuplicateExercicegroup(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercicegroup/duplicate";
    this.startRequest();
    try {
      await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorGetExerciceContent performs the request and handles the error */
  async EditorGetExerciceContent(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExerciceExt> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorCreateExercice performs the request and handles the error */
  async EditorCreateExercice() {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExercicegroupExt> = await Axios.put(
        fullUrl,
        null,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorDeleteExercice performs the request and handles the error */
  async EditorDeleteExercice(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice";
    this.startRequest();
    try {
      const rep: AxiosResponse<DeleteExerciceOut> = await Axios.delete(
        fullUrl,
        { headers: this.getHeaders(), params: { id: String(params["id"]) } },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorSaveExerciceMeta performs the request and handles the error */
  async EditorSaveExerciceMeta(params: ExerciceHeader) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice";
    this.startRequest();
    try {
      const rep: AxiosResponse<Exercice> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorDuplicateExercice performs the request and handles the error */
  async EditorDuplicateExercice(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice/duplicate";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExerciceHeader> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorExerciceCreateQuestion performs the request and handles the error */
  async EditorExerciceCreateQuestion(params: ExerciceCreateQuestionIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice/questions";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExerciceWithPreview> = await Axios.put(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorExerciceImportQuestion performs the request and handles the error */
  async EditorExerciceImportQuestion(params: ExerciceImportQuestionIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice/questions/import";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExerciceWithPreview> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorExerciceDuplicateQuestion performs the request and handles the error */
  async EditorExerciceDuplicateQuestion(params: ExerciceDuplicateQuestionIn) {
    const fullUrl =
      this.baseURL + "/api/prof/editor/exercice/questions/duplicate";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExerciceWithPreview> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorExerciceUpdateQuestions performs the request and handles the error */
  async EditorExerciceUpdateQuestions(params: ExerciceUpdateQuestionsIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice/questions";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExerciceWithPreview> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorUpdateExercicegroupVis performs the request and handles the error */
  async EditorUpdateExercicegroupVis(params: ExerciceUpdateVisiblityIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercicegroup/visibility";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorCheckExerciceParameters performs the request and handles the error */
  async EditorCheckExerciceParameters(params: CheckExerciceParametersIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice/check-params";
    this.startRequest();
    try {
      const rep: AxiosResponse<CheckExerciceParametersOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorSaveExerciceAndPreview performs the request and handles the error */
  async EditorSaveExerciceAndPreview(params: SaveExerciceAndPreviewIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice/preview";
    this.startRequest();
    try {
      const rep: AxiosResponse<SaveExerciceAndPreviewOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** EditorExerciceExportLateX performs the request and handles the error */
  async EditorExerciceExportLateX(params: ExportExerciceLatexIn) {
    const fullUrl = this.baseURL + "/api/prof/editor/exercice/export/latex";
    this.startRequest();
    try {
      const rep: AxiosResponse<ExportExerciceLatexOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkGetSheets performs the request and handles the error */
  async HomeworkGetSheets(params: { matiere: string }) {
    const fullUrl = this.baseURL + "/api/prof/homework";
    this.startRequest();
    try {
      const rep: AxiosResponse<Homeworks> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { matiere: params["matiere"] },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkCreateSheet performs the request and handles the error */
  async HomeworkCreateSheet() {
    const fullUrl = this.baseURL + "/api/prof/homework";
    this.startRequest();
    try {
      const rep: AxiosResponse<SheetExt> = await Axios.put(fullUrl, null, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkUpdateSheet performs the request and handles the error */
  async HomeworkUpdateSheet(params: Sheet) {
    const fullUrl = this.baseURL + "/api/prof/homework";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkDeleteSheet performs the request and handles the error */
  async HomeworkDeleteSheet(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/homework";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkCopySheet performs the request and handles the error */
  async HomeworkCopySheet(params: CopySheetIn) {
    const fullUrl = this.baseURL + "/api/prof/homework/sheet/copy";
    this.startRequest();
    try {
      const rep: AxiosResponse<SheetExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkCreateTravailWith performs the request and handles the error */
  async HomeworkCreateTravailWith(params: CreateTravailWithIn) {
    const fullUrl = this.baseURL + "/api/prof/homework/travail";
    this.startRequest();
    try {
      const rep: AxiosResponse<Travail> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkCreateTravail performs the request and handles the error */
  async HomeworkCreateTravail(params: { "id-classroom": Int }) {
    const fullUrl = this.baseURL + "/api/prof/homework/travail/anonymous";
    this.startRequest();
    try {
      const rep: AxiosResponse<CreateTravailOut> = await Axios.put(
        fullUrl,
        null,
        {
          headers: this.getHeaders(),
          params: { "id-classroom": String(params["id-classroom"]) },
        },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkUpdateTravail performs the request and handles the error */
  async HomeworkUpdateTravail(params: Travail) {
    const fullUrl = this.baseURL + "/api/prof/homework/travail";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkDeleteTravail performs the request and handles the error */
  async HomeworkDeleteTravail(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/homework/travail";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkCopyTravail performs the request and handles the error */
  async HomeworkCopyTravail(params: CopyTravailIn) {
    const fullUrl = this.baseURL + "/api/prof/homework/travail/copy";
    this.startRequest();
    try {
      const rep: AxiosResponse<CopyTravailToOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkRemoveTask performs the request and handles the error */
  async HomeworkRemoveTask(params: { "id-task": Int }) {
    const fullUrl = this.baseURL + "/api/prof/homework/sheet";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { "id-task": String(params["id-task"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkAddExercice performs the request and handles the error */
  async HomeworkAddExercice(params: AddExerciceToTaskIn) {
    const fullUrl = this.baseURL + "/api/prof/homework/sheet/exercice";
    this.startRequest();
    try {
      const rep: AxiosResponse<TaskExt> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkGetMonoquestion performs the request and handles the error */
  async HomeworkGetMonoquestion(params: { "id-monoquestion": Int }) {
    const fullUrl = this.baseURL + "/api/prof/homework/sheet/monoquestion";
    this.startRequest();
    try {
      const rep: AxiosResponse<Monoquestion> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { "id-monoquestion": String(params["id-monoquestion"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkAddMonoquestion performs the request and handles the error */
  async HomeworkAddMonoquestion(params: AddMonoquestionToTaskIn) {
    const fullUrl = this.baseURL + "/api/prof/homework/sheet/monoquestion";
    this.startRequest();
    try {
      const rep: AxiosResponse<TaskExt> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkGetRandomMonoquestion performs the request and handles the error */
  async HomeworkGetRandomMonoquestion(params: {
    "id-randommonoquestion": Int;
  }) {
    const fullUrl =
      this.baseURL + "/api/prof/homework/sheet/randommonoquestion";
    this.startRequest();
    try {
      const rep: AxiosResponse<RandomMonoquestion> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: {
          "id-randommonoquestion": String(params["id-randommonoquestion"]),
        },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkAddRandomMonoquestion performs the request and handles the error */
  async HomeworkAddRandomMonoquestion(params: AddRandomMonoquestionToTaskIn) {
    const fullUrl =
      this.baseURL + "/api/prof/homework/sheet/randommonoquestion";
    this.startRequest();
    try {
      const rep: AxiosResponse<TaskExt> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkUpdateMonoquestion performs the request and handles the error */
  async HomeworkUpdateMonoquestion(params: Monoquestion) {
    const fullUrl = this.baseURL + "/api/prof/homework/sheet/monoquestion";
    this.startRequest();
    try {
      const rep: AxiosResponse<TaskExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkUpdateRandomMonoquestion performs the request and handles the error */
  async HomeworkUpdateRandomMonoquestion(params: RandomMonoquestion) {
    const fullUrl =
      this.baseURL + "/api/prof/homework/sheet/randommonoquestion";
    this.startRequest();
    try {
      const rep: AxiosResponse<TaskExt> = await Axios.post(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkReorderSheetTasks performs the request and handles the error */
  async HomeworkReorderSheetTasks(params: ReorderSheetTasksIn) {
    const fullUrl = this.baseURL + "/api/prof/homework/sheet";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkMissingTasksHint performs the request and handles the error */
  async HomeworkMissingTasksHint(params: { "id-sheet": Int }) {
    const fullUrl = this.baseURL + "/api/prof/homework/sheet/missing-hint";
    this.startRequest();
    try {
      const rep: AxiosResponse<MissingTasksHint> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { "id-sheet": String(params["id-sheet"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkGetMarks performs the request and handles the error */
  async HomeworkGetMarks(params: HowemorkMarksIn) {
    const fullUrl = this.baseURL + "/api/prof/homework/marks";
    this.startRequest();
    try {
      const rep: AxiosResponse<HomeworkMarksOut> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkGetDispenses performs the request and handles the error */
  async HomeworkGetDispenses(params: { "id-travail": Int }) {
    const fullUrl = this.baseURL + "/api/prof/homework/dispences";
    this.startRequest();
    try {
      const rep: AxiosResponse<Exceptions> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { "id-travail": String(params["id-travail"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** HomeworkSetDispense performs the request and handles the error */
  async HomeworkSetDispense(params: TravailException) {
    const fullUrl = this.baseURL + "/api/prof/homework/dispences";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesGetScheme performs the request and handles the error */
  async CeinturesGetScheme() {
    const fullUrl = this.baseURL + "/api/prof/ceintures/scheme";
    this.startRequest();
    try {
      const rep: AxiosResponse<GetSchemeOut> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesGetPending performs the request and handles the error */
  async CeinturesGetPending(params: Advance) {
    const fullUrl = this.baseURL + "/api/prof/ceintures/pending";
    this.startRequest();
    try {
      const rep: AxiosResponse<Stage[] | null> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesGetQuestions performs the request and handles the error */
  async CeinturesGetQuestions(params: Stage) {
    const fullUrl = this.baseURL + "/api/prof/ceintures/questions";
    this.startRequest();
    try {
      const rep: AxiosResponse<Beltquestion[] | null> = await Axios.post(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesUpdateQuestion performs the request and handles the error */
  async CeinturesUpdateQuestion(params: UpdateBeltquestionIn) {
    const fullUrl = this.baseURL + "/api/prof/ceintures/question-meta";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesCreateQuestion performs the request and handles the error */
  async CeinturesCreateQuestion(params: Stage) {
    const fullUrl = this.baseURL + "/api/prof/ceintures/question";
    this.startRequest();
    try {
      const rep: AxiosResponse<Beltquestion> = await Axios.put(
        fullUrl,
        params,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesSaveQuestion performs the request and handles the error */
  async CeinturesSaveQuestion(params: SaveBeltQuestionIn) {
    const fullUrl = this.baseURL + "/api/prof/ceintures/question";
    this.startRequest();
    try {
      const rep: AxiosResponse<SaveBeltquestionAndPreviewOut> =
        await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesDeleteQuestion performs the request and handles the error */
  async CeinturesDeleteQuestion(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/ceintures/question";
    this.startRequest();
    try {
      const rep: AxiosResponse<DeleteBeltquestionOut> = await Axios.delete(
        fullUrl,
        { headers: this.getHeaders(), params: { id: String(params["id"]) } },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesDuplicateQuestion performs the request and handles the error */
  async CeinturesDuplicateQuestion(params: { "id-question": Int }) {
    const fullUrl = this.baseURL + "/api/prof/ceintures/question-duplicate";
    this.startRequest();
    try {
      const rep: AxiosResponse<DuplicateQuestionOut> = await Axios.post(
        fullUrl,
        null,
        {
          headers: this.getHeaders(),
          params: { "id-question": String(params["id-question"]) },
        },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** CeinturesGetStudentsAdvance performs the request and handles the error */
  async CeinturesGetStudentsAdvance(params: { "classroom-id": Int }) {
    const fullUrl = this.baseURL + "/api/prof/ceintures/advance";
    this.startRequest();
    try {
      const rep: AxiosResponse<studentAdvance[] | null> = await Axios.get(
        fullUrl,
        {
          headers: this.getHeaders(),
          params: { "classroom-id": String(params["classroom-id"]) },
        },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ReviewCreate performs the request and handles the error */
  async ReviewCreate(params: ReviewCreateIn) {
    const fullUrl = this.baseURL + "/api/prof/review";
    this.startRequest();
    try {
      const rep: AxiosResponse<Review> = await Axios.put(fullUrl, params, {
        headers: this.getHeaders(),
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ReviewsList performs the request and handles the error */
  async ReviewsList() {
    const fullUrl = this.baseURL + "/api/prof/reviews";
    this.startRequest();
    try {
      const rep: AxiosResponse<ReviewHeader[] | null> = await Axios.get(
        fullUrl,
        { headers: this.getHeaders() },
      );
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ReviewLoad performs the request and handles the error */
  async ReviewLoad(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/review";
    this.startRequest();
    try {
      const rep: AxiosResponse<ReviewExt> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ReviewLoadTarget performs the request and handles the error */
  async ReviewLoadTarget(params: { "id-review": Int }) {
    const fullUrl = this.baseURL + "/api/prof/review/target";
    this.startRequest();
    try {
      const rep: AxiosResponse<LoadTargetOut> = await Axios.get(fullUrl, {
        headers: this.getHeaders(),
        params: { "id-review": String(params["id-review"]) },
      });
      return rep.data;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ReviewDelete performs the request and handles the error */
  async ReviewDelete(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/review";
    this.startRequest();
    try {
      await Axios.delete(fullUrl, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ReviewUpdateApproval performs the request and handles the error */
  async ReviewUpdateApproval(params: ReviewUpdateApprovalIn) {
    const fullUrl = this.baseURL + "/api/prof/review/approval";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ReviewUpdateCommnents performs the request and handles the error */
  async ReviewUpdateCommnents(params: ReviewUpdateCommentsIn) {
    const fullUrl = this.baseURL + "/api/prof/review/comments";
    this.startRequest();
    try {
      await Axios.post(fullUrl, params, { headers: this.getHeaders() });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }

  /** ReviewAccept performs the request and handles the error */
  async ReviewAccept(params: { id: Int }) {
    const fullUrl = this.baseURL + "/api/prof/review/accept";
    this.startRequest();
    try {
      await Axios.post(fullUrl, null, {
        headers: this.getHeaders(),
        params: { id: String(params["id"]) },
      });
      return true;
    } catch (error) {
      this.handleError(error);
    }
  }
}
