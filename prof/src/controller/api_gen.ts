// Code generated by apigen. DO NOT EDIT

import type { AxiosResponse } from "axios";
import Axios from "axios";

// github.com/benoitkugler/maths-online/prof/teacher.AskInscriptionIn
export interface AskInscriptionIn {
  Mail: string;
  Password: string;
}
// github.com/benoitkugler/maths-online/prof/teacher.AskInscriptionOut
export interface AskInscriptionOut {
  Error: string;
  IsPasswordError: boolean;
}
// github.com/benoitkugler/maths-online/prof/teacher.LogginIn
export interface LogginIn {
  Mail: string;
  Password: string;
}
// github.com/benoitkugler/maths-online/prof/teacher.LogginOut
export interface LogginOut {
  Error: string;
  IsPasswordError: boolean;
  Token: string;
}
// github.com/benoitkugler/maths-online/prof/teacher.Classroom
export interface Classroom {
  id: number;
  id_teacher: number;
  name: string;
}
// github.com/benoitkugler/maths-online/prof/teacher.ClassroomExt
export interface ClassroomExt {
  Classroom: Classroom;
  NbStudents: number;
}

class DateTag {
  private _: "D" = "D";
}

class TimeTag {
  private _: "T" = "T";
}

// AAAA-MM-YY date format
export type Date_ = string & DateTag;

// ISO date-time string
export type Time = string & TimeTag;

// github.com/benoitkugler/maths-online/prof/students.Student
export interface Student {
  Id: number;
  Name: string;
  Surname: string;
  Birthday: Date_;
  TrivialSuccess: number;
  IsClientAttached: boolean;
}
// github.com/benoitkugler/maths-online/prof/teacher.GenerateClassroomCodeOut
export interface GenerateClassroomCodeOut {
  Code: string;
}
// github.com/benoitkugler/maths-online/prof/trivial.QuestionCriterion
export type QuestionCriterion = (string[] | null)[] | null;
// github.com/benoitkugler/maths-online/prof/trivial.CategoriesQuestions
export type CategoriesQuestions = QuestionCriterion[];
// github.com/benoitkugler/maths-online/prof/trivial.TrivialConfig
export interface TrivialConfig {
  Id: number;
  Questions: CategoriesQuestions;
  QuestionTimeout: number;
  ShowDecrassage: boolean;
  Public: boolean;
  id_teacher: number;
  Name: string;
}
// github.com/benoitkugler/maths-online/prof/teacher.Visibility
export enum Visibility {
  Admin = 1,
  Personnal = 0,
}

export const VisibilityLabels: { [key in Visibility]: string } = {
  [Visibility.Admin]: "Officiel",
  [Visibility.Personnal]: "Personnel",
};

// github.com/benoitkugler/maths-online/prof/teacher.Origin
export interface Origin {
  AllowPublish: boolean;
  IsPublic: boolean;
  Visibility: Visibility;
}
// github.com/benoitkugler/maths-online/prof/trivial.TrivialConfigExt
export interface TrivialConfigExt {
  Config: TrivialConfig;
  Origin: Origin;
  NbQuestionsByCategories: number[];
}
// github.com/benoitkugler/maths-online/prof/trivial.UpdateTrivialVisiblityIn
export interface UpdateTrivialVisiblityIn {
  ConfigID: number;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/prof/trivial.CheckMissingQuestionsOut
export interface CheckMissingQuestionsOut {
  Pattern: string[] | null;
  Missing: (string[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/prof/trivial.RunningSessionMetaOut
export interface RunningSessionMetaOut {
  NbGames: number;
}
// github.com/benoitkugler/maths-online/prof/trivial.LaunchSessionIn
export interface LaunchSessionIn {
  IdConfig: number;
  Groups: number[] | null;
}
// github.com/benoitkugler/maths-online/prof/trivial.LaunchSessionOut
export interface LaunchSessionOut {
  GameIDs: string[] | null;
}
// github.com/benoitkugler/maths-online/trivial-poursuit.GameID
export type GameID = string;
// github.com/benoitkugler/maths-online/prof/trivial.stopGame
export interface stopGame {
  ID: GameID;
  Restart: boolean;
}
// github.com/benoitkugler/maths-online/prof/editor.StartSessionOut
export interface StartSessionOut {
  ID: string;
}
// github.com/benoitkugler/maths-online/prof/editor.ListQuestionsIn
export interface ListQuestionsIn {
  TitleQuery: string;
  Tags: string[] | null;
}
// github.com/benoitkugler/maths-online/prof/editor.DifficultyTag
export enum DifficultyTag {
  Diff1 = "★",
  Diff2 = "★★",
  Diff3 = "★★★",
}

export const DifficultyTagLabels: { [key in DifficultyTag]: string } = {
  [DifficultyTag.Diff1]: "1 étoile",
  [DifficultyTag.Diff2]: "2 étoiles",
  [DifficultyTag.Diff3]: "3 étoiles",
};

// github.com/benoitkugler/maths-online/prof/editor.QuestionHeader
export interface QuestionHeader {
  Title: string;
  Tags: string[] | null;
  Id: number;
  Difficulty: DifficultyTag;
  IsInGroup: boolean;
  Origin: Origin;
  NeedExercice: boolean;
}
// github.com/benoitkugler/maths-online/prof/editor.QuestionGroup
export interface QuestionGroup {
  Title: string;
  Questions: QuestionHeader[] | null;
  Size: number;
}
// github.com/benoitkugler/maths-online/prof/editor.ListQuestionsOut
export interface ListQuestionsOut {
  Questions: QuestionGroup[] | null;
  Size: number;
}

export enum BlockKind {
  ExpressionFieldBlock = 0,
  FigureAffineLineFieldBlock = 1,
  FigureBlock = 2,
  FigurePointFieldBlock = 3,
  FigureVectorFieldBlock = 4,
  FigureVectorPairFieldBlock = 5,
  FormulaBlock = 6,
  FunctionGraphBlock = 7,
  FunctionPointsFieldBlock = 8,
  FunctionVariationGraphBlock = 9,
  NumberFieldBlock = 10,
  OrderedListFieldBlock = 11,
  RadioFieldBlock = 12,
  SignTableBlock = 13,
  TableBlock = 14,
  TableFieldBlock = 15,
  TextBlock = 16,
  TreeFieldBlock = 17,
  VariationTableBlock = 18,
  VariationTableFieldBlock = 19,
  VectorFieldBlock = 20,
}

export interface Block {
  Kind: BlockKind;
  Data:
    | ExpressionFieldBlock
    | FigureAffineLineFieldBlock
    | FigureBlock
    | FigurePointFieldBlock
    | FigureVectorFieldBlock
    | FigureVectorPairFieldBlock
    | FormulaBlock
    | FunctionGraphBlock
    | FunctionPointsFieldBlock
    | FunctionVariationGraphBlock
    | NumberFieldBlock
    | OrderedListFieldBlock
    | RadioFieldBlock
    | SignTableBlock
    | TableBlock
    | TableFieldBlock
    | TextBlock
    | TreeFieldBlock
    | VariationTableBlock
    | VariationTableFieldBlock
    | VectorFieldBlock;
}
// github.com/benoitkugler/maths-online/maths/questions.TextKind
export enum TextKind {
  Expression = 2,
  StaticMath = 1,
  Text = 0,
}

export const TextKindLabels: { [key in TextKind]: string } = {
  [TextKind.Expression]: "Expression",
  [TextKind.StaticMath]: "Code LaTeX",
  [TextKind.Text]: "Text simple",
};

// github.com/benoitkugler/maths-online/maths/questions.TextPart
export interface TextPart {
  Content: string;
  Kind: TextKind;
}
// github.com/benoitkugler/maths-online/maths/expression.ComparisonLevel
export enum ComparisonLevel {
  ExpandedSubstitutions = 2,
  SimpleSubstitutions = 1,
  Strict = 0,
}

export const ComparisonLevelLabels: { [key in ComparisonLevel]: string } = {
  [ComparisonLevel.ExpandedSubstitutions]: "Complète",
  [ComparisonLevel.SimpleSubstitutions]: "Simple",
  [ComparisonLevel.Strict]: "Exacte",
};

// github.com/benoitkugler/maths-online/maths/questions.ExpressionFieldBlock
export interface ExpressionFieldBlock {
  Expression: string;
  Label: TextPart;
  ComparisonLevel: ComparisonLevel;
}
// github.com/benoitkugler/maths-online/maths/repere.RandomCoord
export interface RandomCoord {
  X: string;
  Y: string;
}
// github.com/benoitkugler/maths-online/maths/repere.LabelPos
export enum LabelPos {
  Bottom = 1,
  BottomLeft = 7,
  BottomRight = 6,
  Hide = 8,
  Left = 2,
  Right = 3,
  Top = 0,
  TopLeft = 4,
  TopRight = 5,
}

export const LabelPosLabels: { [key in LabelPos]: string } = {
  [LabelPos.Bottom]: "En dessous",
  [LabelPos.BottomLeft]: "En dessous, à gauche",
  [LabelPos.BottomRight]: "En dessous, à droite",
  [LabelPos.Hide]: "Masquer la légende",
  [LabelPos.Left]: "A gauche",
  [LabelPos.Right]: "A droite",
  [LabelPos.Top]: "Au dessus",
  [LabelPos.TopLeft]: "Au dessus, à gauche",
  [LabelPos.TopRight]: "Au dessus, à droite",
};

// github.com/benoitkugler/maths-online/maths/repere.RandomLabeledPoint
export interface RandomLabeledPoint {
  Color: string;
  Coord: RandomCoord;
  Pos: LabelPos;
}
// github.com/benoitkugler/maths-online/maths/repere.NamedRandomLabeledPoint
export interface NamedRandomLabeledPoint {
  Name: string;
  Point: RandomLabeledPoint;
}
// github.com/benoitkugler/maths-online/maths/repere.SegmentKind
export enum SegmentKind {
  SKLine = 2,
  SKSegment = 0,
  SKVector = 1,
}

export const SegmentKindLabels: { [key in SegmentKind]: string } = {
  [SegmentKind.SKLine]: "Droite (infinie)",
  [SegmentKind.SKSegment]: "Segment",
  [SegmentKind.SKVector]: "Vecteur",
};

// github.com/benoitkugler/maths-online/maths/repere.Segment
export interface Segment {
  LabelName: string;
  From: string;
  To: string;
  Color: string;
  LabelPos: LabelPos;
  Kind: SegmentKind;
}
// github.com/benoitkugler/maths-online/maths/repere.RandomLine
export interface RandomLine {
  Label: string;
  A: string;
  B: string;
  Color: string;
}
// github.com/benoitkugler/maths-online/maths/repere.RandomDrawings
export interface RandomDrawings {
  Points: NamedRandomLabeledPoint[] | null;
  Segments: Segment[] | null;
  Lines: RandomLine[] | null;
}
// github.com/benoitkugler/maths-online/maths/repere.Coord
export interface Coord {
  X: number;
  Y: number;
}
// github.com/benoitkugler/maths-online/maths/repere.RepereBounds
export interface RepereBounds {
  Width: number;
  Height: number;
  Origin: Coord;
}
// github.com/benoitkugler/maths-online/maths/questions.FigureBlock
export interface FigureBlock {
  Drawings: RandomDrawings;
  Bounds: RepereBounds;
  ShowGrid: boolean;
}
// github.com/benoitkugler/maths-online/maths/questions.FigureAffineLineFieldBlock
export interface FigureAffineLineFieldBlock {
  Label: string;
  A: string;
  B: string;
  Figure: FigureBlock;
}
// github.com/benoitkugler/maths-online/maths/questions.CoordExpression
export interface CoordExpression {
  X: string;
  Y: string;
}
// github.com/benoitkugler/maths-online/maths/questions.FigurePointFieldBlock
export interface FigurePointFieldBlock {
  Answer: CoordExpression;
  Figure: FigureBlock;
}
// github.com/benoitkugler/maths-online/maths/questions.FigureVectorFieldBlock
export interface FigureVectorFieldBlock {
  Answer: CoordExpression;
  AnswerOrigin: CoordExpression;
  Figure: FigureBlock;
  MustHaveOrigin: boolean;
}
// github.com/benoitkugler/maths-online/maths/questions.VectorPairCriterion
export enum VectorPairCriterion {
  VectorColinear = 1,
  VectorEquals = 0,
  VectorOrthogonal = 2,
}

export const VectorPairCriterionLabels: {
  [key in VectorPairCriterion]: string;
} = {
  [VectorPairCriterion.VectorColinear]: "Vecteurs colinéaires",
  [VectorPairCriterion.VectorEquals]: "Vecteurs égaux",
  [VectorPairCriterion.VectorOrthogonal]: "Vecteurs orthogonaux",
};

// github.com/benoitkugler/maths-online/maths/questions.FigureVectorPairFieldBlock
export interface FigureVectorPairFieldBlock {
  Figure: FigureBlock;
  Criterion: VectorPairCriterion;
}
// github.com/benoitkugler/maths-online/maths/questions.Interpolated
export type Interpolated = string;
// github.com/benoitkugler/maths-online/maths/questions.FormulaBlock
export interface FormulaBlock {
  Parts: Interpolated;
}
// github.com/benoitkugler/maths-online/maths/functiongrapher.FunctionDecoration
export interface FunctionDecoration {
  Label: string;
  Color: string;
}
// github.com/benoitkugler/maths-online/maths/expression.Variable
export interface Variable {
  Indice: string;
  Name: number;
}
// github.com/benoitkugler/maths-online/maths/questions.FunctionDefinition
export interface FunctionDefinition {
  Function: string;
  Decoration: FunctionDecoration;
  Variable: Variable;
  From: string;
  To: string;
}
// github.com/benoitkugler/maths-online/maths/questions.FunctionGraphBlock
export interface FunctionGraphBlock {
  Functions: FunctionDefinition[] | null;
}
// github.com/benoitkugler/maths-online/maths/questions.FunctionPointsFieldBlock
export interface FunctionPointsFieldBlock {
  Function: string;
  Label: string;
  Variable: Variable;
  XGrid: string[] | null;
}
// github.com/benoitkugler/maths-online/maths/questions.VariationTableBlock
export interface VariationTableBlock {
  Label: Interpolated;
  Xs: string[] | null;
  Fxs: string[] | null;
}
// github.com/benoitkugler/maths-online/maths/questions.FunctionVariationGraphBlock
export type FunctionVariationGraphBlock = VariationTableBlock;
// github.com/benoitkugler/maths-online/maths/questions.NumberFieldBlock
export interface NumberFieldBlock {
  Expression: string;
}
// github.com/benoitkugler/maths-online/maths/questions.OrderedListFieldBlock
export interface OrderedListFieldBlock {
  Label: Interpolated;
  Answer: Interpolated[] | null;
  AdditionalProposals: Interpolated[] | null;
}
// github.com/benoitkugler/maths-online/maths/questions.RadioFieldBlock
export interface RadioFieldBlock {
  Answer: string;
  Proposals: Interpolated[] | null;
  AsDropDown: boolean;
}
// github.com/benoitkugler/maths-online/maths/questions.SignSymbol
export enum SignSymbol {
  ForbiddenValue = 2,
  Nothing = 0,
  Zero = 1,
}

export const SignSymbolLabels: { [key in SignSymbol]: string } = {
  [SignSymbol.ForbiddenValue]: "||",
  [SignSymbol.Nothing]: "",
  [SignSymbol.Zero]: "0",
};

// github.com/benoitkugler/maths-online/maths/questions.SignTableBlock
export interface SignTableBlock {
  Label: string;
  FxSymbols: SignSymbol[] | null;
  Xs: Interpolated[] | null;
  Signs: boolean[] | null;
}
// github.com/benoitkugler/maths-online/maths/questions.TableBlock
export interface TableBlock {
  HorizontalHeaders: TextPart[] | null;
  VerticalHeaders: TextPart[] | null;
  Values: (TextPart[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/maths/questions.TableFieldBlock
export interface TableFieldBlock {
  HorizontalHeaders: TextPart[] | null;
  VerticalHeaders: TextPart[] | null;
  Answer: (string[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/maths/questions.TextBlock
export interface TextBlock {
  Parts: Interpolated;
  Bold: boolean;
  Italic: boolean;
  Smaller: boolean;
}
// github.com/benoitkugler/maths-online/maths/questions.TreeNodeAnswer
export interface TreeNodeAnswer {
  Children: TreeNodeAnswer[] | null;
  Probabilities: string[] | null;
  Value: number;
}
// github.com/benoitkugler/maths-online/maths/questions.TreeFieldBlock
export interface TreeFieldBlock {
  EventsProposals: string[] | null;
  AnswerRoot: TreeNodeAnswer;
}
// github.com/benoitkugler/maths-online/maths/questions.VariationTableFieldBlock
export interface VariationTableFieldBlock {
  Answer: VariationTableBlock;
}
// github.com/benoitkugler/maths-online/maths/questions.VectorFieldBlock
export interface VectorFieldBlock {
  Answer: CoordExpression;
  AcceptColinear: boolean;
  DisplayColumn: boolean;
}
// github.com/benoitkugler/maths-online/maths/questions.Enonce
export type Enonce = Block[] | null;
// github.com/benoitkugler/maths-online/maths/questions.RandomParameter
export interface RandomParameter {
  expression: string;
  variable: Variable;
}
// github.com/benoitkugler/maths-online/maths/questions.RandomParameters
export type RandomParameters = RandomParameter[] | null;
// github.com/benoitkugler/maths-online/maths/questions.Parameters
export interface Parameters {
  Variables: RandomParameters;
  Intrinsics: string[] | null;
}
// github.com/benoitkugler/maths-online/maths/questions.QuestionPage
export interface QuestionPage {
  title: string;
  enonce: Enonce;
  parameters: Parameters;
}
// github.com/benoitkugler/maths-online/prof/editor.Question
export interface Question {
  id: number;
  page: QuestionPage;
  public: boolean;
  id_teacher: number;
  description: string;
  need_exercice: boolean;
}
// github.com/benoitkugler/maths-online/prof/editor.SaveAndPreviewIn
export interface SaveAndPreviewIn {
  SessionID: string;
  Question: Question;
}
// github.com/benoitkugler/maths-online/maths/questions.ErrParameters
export interface ErrParameters {
  Origin: string;
  Details: string;
}
// github.com/benoitkugler/maths-online/maths/questions.errEnonce
export interface errEnonce {
  Error: string;
  Block: number;
  Vars: { [key: string]: string } | null;
}
// github.com/benoitkugler/maths-online/maths/questions.ErrQuestionInvalid
export interface ErrQuestionInvalid {
  ErrParameters: ErrParameters;
  ErrEnonce: errEnonce;
  ParametersInvalid: boolean;
}
// github.com/benoitkugler/maths-online/prof/editor.SaveAndPreviewOut
export interface SaveAndPreviewOut {
  Error: ErrQuestionInvalid;
  IsValid: boolean;
}
// github.com/benoitkugler/maths-online/prof/editor.UpdateTagsIn
export interface UpdateTagsIn {
  Tags: string[] | null;
  IdQuestion: number;
}
// github.com/benoitkugler/maths-online/prof/editor.UpdateGroupTagsIn
export interface UpdateGroupTagsIn {
  GroupTitle: string;
  CommonTags: string[] | null;
}
// github.com/benoitkugler/maths-online/prof/editor.UpdateGroupTagsOut
export interface UpdateGroupTagsOut {
  Tags: { [key: number]: string[] | null } | null;
}
// github.com/benoitkugler/maths-online/prof/editor.QuestionUpdateVisiblityIn
export interface QuestionUpdateVisiblityIn {
  QuestionID: number;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/prof/editor.CheckParametersIn
export interface CheckParametersIn {
  SessionID: string;
  Parameters: Parameters;
}
// github.com/benoitkugler/maths-online/prof/editor.CheckParametersOut
export interface CheckParametersOut {
  ErrDefinition: ErrParameters;
  Variables: Variable[] | null;
}
// github.com/benoitkugler/maths-online/prof/editor.Flow
export enum Flow {
  Parallel = 0,
  Sequencial = 1,
}

export const FlowLabels: { [key in Flow]: string } = {
  [Flow.Parallel]: "Questions indépendantes",
  [Flow.Sequencial]: "Questions liées",
};

// github.com/benoitkugler/maths-online/prof/editor.Exercice
export interface Exercice {
  Id: number;
  Title: string;
  Description: string;
  Parameters: Parameters;
  Flow: Flow;
  id_teacher: number;
  Public: boolean;
}
// github.com/benoitkugler/maths-online/prof/editor.ExerciceQuestion
export interface ExerciceQuestion {
  id_exercice: number;
  id_question: number;
  bareme: number;
}
// github.com/benoitkugler/maths-online/prof/editor.ExerciceQuestionExt
export interface ExerciceQuestionExt {
  Title: string;
  Question: ExerciceQuestion;
}
// github.com/benoitkugler/maths-online/prof/editor.ExerciceExt
export interface ExerciceExt {
  Exercice: Exercice;
  Origin: Origin;
  Questions: ExerciceQuestionExt[] | null;
}
// github.com/benoitkugler/maths-online/prof/editor.ExerciceCreateQuestionIn
export interface ExerciceCreateQuestionIn {
  IdExercice: number;
}
// github.com/benoitkugler/maths-online/prof/editor.ExerciceQuestions
export type ExerciceQuestions = ExerciceQuestion[] | null;
// github.com/benoitkugler/maths-online/prof/editor.ExerciceUpdateQuestionsIn
export interface ExerciceUpdateQuestionsIn {
  Questions: ExerciceQuestions;
  IdExercice: number;
}

/** AbstractAPI provides auto-generated API calls and should be used 
		as base class for an app controller.
	*/
export abstract class AbstractAPI {
  constructor(protected baseUrl: string, protected authToken: string) {}

  abstract handleError(error: any): void;

  abstract startRequest(): void;

  getHeaders() {
    return { Authorization: "Bearer " + this.authToken };
  }

  protected async rawAskInscription(params: AskInscriptionIn) {
    const fullUrl = this.baseUrl + "/prof/inscription";
    const rep: AxiosResponse<AskInscriptionOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** AskInscription wraps rawAskInscription and handles the error */
  async AskInscription(params: AskInscriptionIn) {
    this.startRequest();
    try {
      const out = await this.rawAskInscription(params);
      this.onSuccessAskInscription(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessAskInscription(data: AskInscriptionOut): void;

  protected async rawValidateInscription(params: { data: string }) {
    const fullUrl = this.baseUrl + "inscription";
    const rep: AxiosResponse<any> = await Axios.get(fullUrl, {
      params: { data: params["data"] },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ValidateInscription wraps rawValidateInscription and handles the error */
  async ValidateInscription(params: { data: string }) {
    this.startRequest();
    try {
      const out = await this.rawValidateInscription(params);
      this.onSuccessValidateInscription(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessValidateInscription(data: any): void;

  protected async rawLoggin(params: LogginIn) {
    const fullUrl = this.baseUrl + "/prof/loggin";
    const rep: AxiosResponse<LogginOut> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** Loggin wraps rawLoggin and handles the error */
  async Loggin(params: LogginIn) {
    this.startRequest();
    try {
      const out = await this.rawLoggin(params);
      this.onSuccessLoggin(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessLoggin(data: LogginOut): void;

  protected async rawTeacherGetClassrooms() {
    const fullUrl = this.baseUrl + "/prof/classrooms/api";
    const rep: AxiosResponse<ClassroomExt[] | null> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherGetClassrooms wraps rawTeacherGetClassrooms and handles the error */
  async TeacherGetClassrooms() {
    this.startRequest();
    try {
      const out = await this.rawTeacherGetClassrooms();
      this.onSuccessTeacherGetClassrooms(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherGetClassrooms(
    data: ClassroomExt[] | null
  ): void;

  protected async rawTeacherCreateClassroom() {
    const fullUrl = this.baseUrl + "/prof/classrooms/api";
    const rep: AxiosResponse<any> = await Axios.put(fullUrl, null, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherCreateClassroom wraps rawTeacherCreateClassroom and handles the error */
  async TeacherCreateClassroom() {
    this.startRequest();
    try {
      const out = await this.rawTeacherCreateClassroom();
      this.onSuccessTeacherCreateClassroom(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherCreateClassroom(data: any): void;

  protected async rawTeacherUpdateClassroom(params: Classroom) {
    const fullUrl = this.baseUrl + "/prof/classrooms/api";
    const rep: AxiosResponse<Classroom> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherUpdateClassroom wraps rawTeacherUpdateClassroom and handles the error */
  async TeacherUpdateClassroom(params: Classroom) {
    this.startRequest();
    try {
      const out = await this.rawTeacherUpdateClassroom(params);
      this.onSuccessTeacherUpdateClassroom(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherUpdateClassroom(data: Classroom): void;

  protected async rawTeacherDeleteClassroom(params: { id: number }) {
    const fullUrl = this.baseUrl + "/prof/classrooms/api";
    const rep: AxiosResponse<any> = await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherDeleteClassroom wraps rawTeacherDeleteClassroom and handles the error */
  async TeacherDeleteClassroom(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherDeleteClassroom(params);
      this.onSuccessTeacherDeleteClassroom(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherDeleteClassroom(data: any): void;

  protected async rawTeacherGetClassroomStudents(params: {
    "id-classroom": number;
  }) {
    const fullUrl = this.baseUrl + "/prof/classrooms/api/students";
    const rep: AxiosResponse<Student[] | null> = await Axios.get(fullUrl, {
      params: { "id-classroom": String(params["id-classroom"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherGetClassroomStudents wraps rawTeacherGetClassroomStudents and handles the error */
  async TeacherGetClassroomStudents(params: { "id-classroom": number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherGetClassroomStudents(params);
      this.onSuccessTeacherGetClassroomStudents(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherGetClassroomStudents(
    data: Student[] | null
  ): void;

  protected async rawTeacherAddStudent(params: { "id-classroom": number }) {
    const fullUrl = this.baseUrl + "/prof/classrooms/api/students";
    const rep: AxiosResponse<Student> = await Axios.put(fullUrl, null, {
      params: { "id-classroom": String(params["id-classroom"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherAddStudent wraps rawTeacherAddStudent and handles the error */
  async TeacherAddStudent(params: { "id-classroom": number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherAddStudent(params);
      this.onSuccessTeacherAddStudent(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherAddStudent(data: Student): void;

  protected async rawTeacherUpdateStudent(params: Student) {
    const fullUrl = this.baseUrl + "/prof/classrooms/api/students";
    const rep: AxiosResponse<any> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherUpdateStudent wraps rawTeacherUpdateStudent and handles the error */
  async TeacherUpdateStudent(params: Student) {
    this.startRequest();
    try {
      const out = await this.rawTeacherUpdateStudent(params);
      this.onSuccessTeacherUpdateStudent(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherUpdateStudent(data: any): void;

  protected async rawTeacherDeleteStudent(params: { "id-student": number }) {
    const fullUrl = this.baseUrl + "/prof/classrooms/api/students";
    const rep: AxiosResponse<any> = await Axios.delete(fullUrl, {
      params: { "id-student": String(params["id-student"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherDeleteStudent wraps rawTeacherDeleteStudent and handles the error */
  async TeacherDeleteStudent(params: { "id-student": number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherDeleteStudent(params);
      this.onSuccessTeacherDeleteStudent(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherDeleteStudent(data: any): void;

  protected async rawTeacherImportStudents(
    params: { "id-classroom": string },
    file: File
  ) {
    const fullUrl = this.baseUrl + "/prof/classrooms/api/students/import";
    const formData = new FormData();
    formData.append("file", file, file.name);
    formData.append("id-classroom", params["id-classroom"]);
    const rep: AxiosResponse<any> = await Axios.post(fullUrl, formData, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** TeacherImportStudents wraps rawTeacherImportStudents and handles the error */
  async TeacherImportStudents(params: { "id-classroom": string }, file: File) {
    this.startRequest();
    try {
      const out = await this.rawTeacherImportStudents(params, file);
      this.onSuccessTeacherImportStudents(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherImportStudents(data: any): void;

  protected async rawTeacherGenerateClassroomCode(params: {
    "id-classroom": number;
  }) {
    const fullUrl = this.baseUrl + "/prof/classrooms/api/students/connect";
    const rep: AxiosResponse<GenerateClassroomCodeOut> = await Axios.get(
      fullUrl,
      {
        params: { "id-classroom": String(params["id-classroom"]) },
        headers: this.getHeaders(),
      }
    );
    return rep.data;
  }

  /** TeacherGenerateClassroomCode wraps rawTeacherGenerateClassroomCode and handles the error */
  async TeacherGenerateClassroomCode(params: { "id-classroom": number }) {
    this.startRequest();
    try {
      const out = await this.rawTeacherGenerateClassroomCode(params);
      this.onSuccessTeacherGenerateClassroomCode(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessTeacherGenerateClassroomCode(
    data: GenerateClassroomCodeOut
  ): void;

  protected async rawGetTrivialPoursuit() {
    const fullUrl = this.baseUrl + "/prof/trivial/config";
    const rep: AxiosResponse<TrivialConfigExt[] | null> = await Axios.get(
      fullUrl,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** GetTrivialPoursuit wraps rawGetTrivialPoursuit and handles the error */
  async GetTrivialPoursuit() {
    this.startRequest();
    try {
      const out = await this.rawGetTrivialPoursuit();
      this.onSuccessGetTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessGetTrivialPoursuit(
    data: TrivialConfigExt[] | null
  ): void;

  protected async rawCreateTrivialPoursuit() {
    const fullUrl = this.baseUrl + "/prof/trivial/config";
    const rep: AxiosResponse<TrivialConfigExt> = await Axios.put(
      fullUrl,
      null,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** CreateTrivialPoursuit wraps rawCreateTrivialPoursuit and handles the error */
  async CreateTrivialPoursuit() {
    this.startRequest();
    try {
      const out = await this.rawCreateTrivialPoursuit();
      this.onSuccessCreateTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessCreateTrivialPoursuit(
    data: TrivialConfigExt
  ): void;

  protected async rawUpdateTrivialPoursuit(params: TrivialConfig) {
    const fullUrl = this.baseUrl + "/prof/trivial/config";
    const rep: AxiosResponse<TrivialConfigExt> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** UpdateTrivialPoursuit wraps rawUpdateTrivialPoursuit and handles the error */
  async UpdateTrivialPoursuit(params: TrivialConfig) {
    this.startRequest();
    try {
      const out = await this.rawUpdateTrivialPoursuit(params);
      this.onSuccessUpdateTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessUpdateTrivialPoursuit(
    data: TrivialConfigExt
  ): void;

  protected async rawDeleteTrivialPoursuit(params: { id: number }) {
    const fullUrl = this.baseUrl + "/prof/trivial/config";
    const rep: AxiosResponse<any> = await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** DeleteTrivialPoursuit wraps rawDeleteTrivialPoursuit and handles the error */
  async DeleteTrivialPoursuit(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawDeleteTrivialPoursuit(params);
      this.onSuccessDeleteTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessDeleteTrivialPoursuit(data: any): void;

  protected async rawUpdateTrivialVisiblity(params: UpdateTrivialVisiblityIn) {
    const fullUrl = this.baseUrl + "/prof/trivial/config/visibility";
    const rep: AxiosResponse<any> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** UpdateTrivialVisiblity wraps rawUpdateTrivialVisiblity and handles the error */
  async UpdateTrivialVisiblity(params: UpdateTrivialVisiblityIn) {
    this.startRequest();
    try {
      const out = await this.rawUpdateTrivialVisiblity(params);
      this.onSuccessUpdateTrivialVisiblity(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessUpdateTrivialVisiblity(data: any): void;

  protected async rawDuplicateTrivialPoursuit(params: { id: number }) {
    const fullUrl = this.baseUrl + "/prof/trivial/config/duplicate";
    const rep: AxiosResponse<TrivialConfigExt> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** DuplicateTrivialPoursuit wraps rawDuplicateTrivialPoursuit and handles the error */
  async DuplicateTrivialPoursuit(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawDuplicateTrivialPoursuit(params);
      this.onSuccessDuplicateTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessDuplicateTrivialPoursuit(
    data: TrivialConfigExt
  ): void;

  protected async rawCheckMissingQuestions(params: CategoriesQuestions) {
    const fullUrl =
      this.baseUrl + "/prof/trivial/config/check-missing-questions";
    const rep: AxiosResponse<CheckMissingQuestionsOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** CheckMissingQuestions wraps rawCheckMissingQuestions and handles the error */
  async CheckMissingQuestions(params: CategoriesQuestions) {
    this.startRequest();
    try {
      const out = await this.rawCheckMissingQuestions(params);
      this.onSuccessCheckMissingQuestions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessCheckMissingQuestions(
    data: CheckMissingQuestionsOut
  ): void;

  protected async rawGetTrivialRunningSessions() {
    const fullUrl = this.baseUrl + "/trivial/sessions";
    const rep: AxiosResponse<RunningSessionMetaOut> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** GetTrivialRunningSessions wraps rawGetTrivialRunningSessions and handles the error */
  async GetTrivialRunningSessions() {
    this.startRequest();
    try {
      const out = await this.rawGetTrivialRunningSessions();
      this.onSuccessGetTrivialRunningSessions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessGetTrivialRunningSessions(
    data: RunningSessionMetaOut
  ): void;

  protected async rawLaunchSessionTrivialPoursuit(params: LaunchSessionIn) {
    const fullUrl = this.baseUrl + "/trivial/sessions";
    const rep: AxiosResponse<LaunchSessionOut> = await Axios.put(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** LaunchSessionTrivialPoursuit wraps rawLaunchSessionTrivialPoursuit and handles the error */
  async LaunchSessionTrivialPoursuit(params: LaunchSessionIn) {
    this.startRequest();
    try {
      const out = await this.rawLaunchSessionTrivialPoursuit(params);
      this.onSuccessLaunchSessionTrivialPoursuit(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessLaunchSessionTrivialPoursuit(
    data: LaunchSessionOut
  ): void;

  protected async rawStopTrivialGame(params: stopGame) {
    const fullUrl = this.baseUrl + "/trivial/sessions/stop";
    const rep: AxiosResponse<any> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** StopTrivialGame wraps rawStopTrivialGame and handles the error */
  async StopTrivialGame(params: stopGame) {
    this.startRequest();
    try {
      const out = await this.rawStopTrivialGame(params);
      this.onSuccessStopTrivialGame(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessStopTrivialGame(data: any): void;

  protected async rawEditorStartSession() {
    const fullUrl = this.baseUrl + "/prof/editor/api/new";
    const rep: AxiosResponse<StartSessionOut> = await Axios.put(fullUrl, null, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorStartSession wraps rawEditorStartSession and handles the error */
  async EditorStartSession() {
    this.startRequest();
    try {
      const out = await this.rawEditorStartSession();
      this.onSuccessEditorStartSession(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorStartSession(data: StartSessionOut): void;

  protected async rawEditorGetTags() {
    const fullUrl = this.baseUrl + "/prof/editor/api/tags";
    const rep: AxiosResponse<string[] | null> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorGetTags wraps rawEditorGetTags and handles the error */
  async EditorGetTags() {
    this.startRequest();
    try {
      const out = await this.rawEditorGetTags();
      this.onSuccessEditorGetTags(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorGetTags(data: string[] | null): void;

  protected async rawEditorSearchQuestions(params: ListQuestionsIn) {
    const fullUrl = this.baseUrl + "/prof/editor/api/questions";
    const rep: AxiosResponse<ListQuestionsOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** EditorSearchQuestions wraps rawEditorSearchQuestions and handles the error */
  async EditorSearchQuestions(params: ListQuestionsIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorSearchQuestions(params);
      this.onSuccessEditorSearchQuestions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorSearchQuestions(
    data: ListQuestionsOut
  ): void;

  protected async rawEditorDuplicateQuestion(params: { id: number }) {
    const fullUrl = this.baseUrl + "/prof/editor/api/question-duplicate-one";
    const rep: AxiosResponse<Question> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDuplicateQuestion wraps rawEditorDuplicateQuestion and handles the error */
  async EditorDuplicateQuestion(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDuplicateQuestion(params);
      this.onSuccessEditorDuplicateQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorDuplicateQuestion(data: Question): void;

  protected async rawEditorDuplicateQuestionWithDifficulty(params: {
    id: number;
  }) {
    const fullUrl = this.baseUrl + "/prof/editor/api/question-duplicate";
    const rep: AxiosResponse<any> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDuplicateQuestionWithDifficulty wraps rawEditorDuplicateQuestionWithDifficulty and handles the error */
  async EditorDuplicateQuestionWithDifficulty(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDuplicateQuestionWithDifficulty(params);
      this.onSuccessEditorDuplicateQuestionWithDifficulty(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorDuplicateQuestionWithDifficulty(
    data: any
  ): void;

  protected async rawEditorCreateQuestion() {
    const fullUrl = this.baseUrl + "/prof/editor/api/question";
    const rep: AxiosResponse<Question> = await Axios.put(fullUrl, null, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorCreateQuestion wraps rawEditorCreateQuestion and handles the error */
  async EditorCreateQuestion() {
    this.startRequest();
    try {
      const out = await this.rawEditorCreateQuestion();
      this.onSuccessEditorCreateQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorCreateQuestion(data: Question): void;

  protected async rawEditorGetQuestion(params: { id: number }) {
    const fullUrl = this.baseUrl + "/prof/editor/api/question";
    const rep: AxiosResponse<Question> = await Axios.get(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorGetQuestion wraps rawEditorGetQuestion and handles the error */
  async EditorGetQuestion(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorGetQuestion(params);
      this.onSuccessEditorGetQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorGetQuestion(data: Question): void;

  protected async rawEditorDeleteQuestion(params: { id: number }) {
    const fullUrl = this.baseUrl + "/prof/editor/api/question";
    const rep: AxiosResponse<any> = await Axios.delete(fullUrl, {
      params: { id: String(params["id"]) },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorDeleteQuestion wraps rawEditorDeleteQuestion and handles the error */
  async EditorDeleteQuestion(params: { id: number }) {
    this.startRequest();
    try {
      const out = await this.rawEditorDeleteQuestion(params);
      this.onSuccessEditorDeleteQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorDeleteQuestion(data: any): void;

  protected async rawEditorSaveAndPreview(params: SaveAndPreviewIn) {
    const fullUrl = this.baseUrl + "/prof/editor/api/question";
    const rep: AxiosResponse<SaveAndPreviewOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** EditorSaveAndPreview wraps rawEditorSaveAndPreview and handles the error */
  async EditorSaveAndPreview(params: SaveAndPreviewIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorSaveAndPreview(params);
      this.onSuccessEditorSaveAndPreview(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorSaveAndPreview(
    data: SaveAndPreviewOut
  ): void;

  protected async rawEditorPausePreview(params: { sessionID: string }) {
    const fullUrl = this.baseUrl + "/prof/editor/api/pause-preview";
    const rep: AxiosResponse<any> = await Axios.get(fullUrl, {
      params: { sessionID: params["sessionID"] },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorPausePreview wraps rawEditorPausePreview and handles the error */
  async EditorPausePreview(params: { sessionID: string }) {
    this.startRequest();
    try {
      const out = await this.rawEditorPausePreview(params);
      this.onSuccessEditorPausePreview(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorPausePreview(data: any): void;

  protected async rawEditorUpdateTags(params: UpdateTagsIn) {
    const fullUrl = this.baseUrl + "/prof/editor/api/question/tags";
    const rep: AxiosResponse<any> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditorUpdateTags wraps rawEditorUpdateTags and handles the error */
  async EditorUpdateTags(params: UpdateTagsIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorUpdateTags(params);
      this.onSuccessEditorUpdateTags(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorUpdateTags(data: any): void;

  protected async rawEditorUpdateGroupTags(params: UpdateGroupTagsIn) {
    const fullUrl = this.baseUrl + "/prof/editor/api/question/group-tags";
    const rep: AxiosResponse<UpdateGroupTagsOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** EditorUpdateGroupTags wraps rawEditorUpdateGroupTags and handles the error */
  async EditorUpdateGroupTags(params: UpdateGroupTagsIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorUpdateGroupTags(params);
      this.onSuccessEditorUpdateGroupTags(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorUpdateGroupTags(
    data: UpdateGroupTagsOut
  ): void;

  protected async rawQuestionUpdateVisiblity(
    params: QuestionUpdateVisiblityIn
  ) {
    const fullUrl = this.baseUrl + "/prof/editor/api/question/visibility";
    const rep: AxiosResponse<any> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** QuestionUpdateVisiblity wraps rawQuestionUpdateVisiblity and handles the error */
  async QuestionUpdateVisiblity(params: QuestionUpdateVisiblityIn) {
    this.startRequest();
    try {
      const out = await this.rawQuestionUpdateVisiblity(params);
      this.onSuccessQuestionUpdateVisiblity(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessQuestionUpdateVisiblity(data: any): void;

  protected async rawEditorCheckParameters(params: CheckParametersIn) {
    const fullUrl = this.baseUrl + "/prof/editor/api/check-params";
    const rep: AxiosResponse<CheckParametersOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** EditorCheckParameters wraps rawEditorCheckParameters and handles the error */
  async EditorCheckParameters(params: CheckParametersIn) {
    this.startRequest();
    try {
      const out = await this.rawEditorCheckParameters(params);
      this.onSuccessEditorCheckParameters(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditorCheckParameters(
    data: CheckParametersOut
  ): void;

  protected async rawExercicesGetList() {
    const fullUrl = this.baseUrl + "/prof/editor/api/exercices";
    const rep: AxiosResponse<ExerciceExt[] | null> = await Axios.get(fullUrl, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ExercicesGetList wraps rawExercicesGetList and handles the error */
  async ExercicesGetList() {
    this.startRequest();
    try {
      const out = await this.rawExercicesGetList();
      this.onSuccessExercicesGetList(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessExercicesGetList(
    data: ExerciceExt[] | null
  ): void;

  protected async rawExerciceCreate() {
    const fullUrl = this.baseUrl + "/prof/editor/api/exercice";
    const rep: AxiosResponse<ExerciceExt> = await Axios.put(fullUrl, null, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ExerciceCreate wraps rawExerciceCreate and handles the error */
  async ExerciceCreate() {
    this.startRequest();
    try {
      const out = await this.rawExerciceCreate();
      this.onSuccessExerciceCreate(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessExerciceCreate(data: ExerciceExt): void;

  protected async rawExerciceDelete(params: {
    id: number;
    delete_questions: boolean;
  }) {
    const fullUrl = this.baseUrl + "/prof/editor/api/exercice";
    const rep: AxiosResponse<any> = await Axios.delete(fullUrl, {
      params: {
        id: String(params["id"]),
        delete_questions: params["delete_questions"] ? "ok" : "",
      },
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ExerciceDelete wraps rawExerciceDelete and handles the error */
  async ExerciceDelete(params: { id: number; delete_questions: boolean }) {
    this.startRequest();
    try {
      const out = await this.rawExerciceDelete(params);
      this.onSuccessExerciceDelete(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessExerciceDelete(data: any): void;

  protected async rawExerciceUpdate(params: Exercice) {
    const fullUrl = this.baseUrl + "/prof/editor/api/exercice";
    const rep: AxiosResponse<Exercice> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** ExerciceUpdate wraps rawExerciceUpdate and handles the error */
  async ExerciceUpdate(params: Exercice) {
    this.startRequest();
    try {
      const out = await this.rawExerciceUpdate(params);
      this.onSuccessExerciceUpdate(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessExerciceUpdate(data: Exercice): void;

  protected async rawExerciceCreateQuestion(params: ExerciceCreateQuestionIn) {
    const fullUrl = this.baseUrl + "/prof/editor/api/exercice/questions";
    const rep: AxiosResponse<ExerciceQuestionExt[] | null> = await Axios.put(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** ExerciceCreateQuestion wraps rawExerciceCreateQuestion and handles the error */
  async ExerciceCreateQuestion(params: ExerciceCreateQuestionIn) {
    this.startRequest();
    try {
      const out = await this.rawExerciceCreateQuestion(params);
      this.onSuccessExerciceCreateQuestion(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessExerciceCreateQuestion(
    data: ExerciceQuestionExt[] | null
  ): void;

  protected async rawExerciceUpdateQuestions(
    params: ExerciceUpdateQuestionsIn
  ) {
    const fullUrl = this.baseUrl + "/prof/editor/api/exercice/questions";
    const rep: AxiosResponse<ExerciceQuestionExt[] | null> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** ExerciceUpdateQuestions wraps rawExerciceUpdateQuestions and handles the error */
  async ExerciceUpdateQuestions(params: ExerciceUpdateQuestionsIn) {
    this.startRequest();
    try {
      const out = await this.rawExerciceUpdateQuestions(params);
      this.onSuccessExerciceUpdateQuestions(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessExerciceUpdateQuestions(
    data: ExerciceQuestionExt[] | null
  ): void;
}
