// Code generated by apigen. DO NOT EDIT

import Axios, { AxiosResponse } from "axios";

// github.com/benoitkugler/maths-online/trivial-poursuit.LaunchGameIn
export interface LaunchGameIn {
  NbPlayers: number;
  TimeoutSeconds: number;
}
// github.com/benoitkugler/maths-online/trivial-poursuit.LaunchGameOut
export interface LaunchGameOut {
  URL: string;
}
// github.com/benoitkugler/maths-online/prof/editor.StartSessionOut
export interface StartSessionOut {
  ID: string;
}
// github.com/benoitkugler/maths-online/maths/exercice.Block
export type Block = any;
// github.com/benoitkugler/maths-online/maths/exercice.Enonce
export type Enonce = Block[] | null;
// github.com/benoitkugler/maths-online/maths/exercice.randomParameter
export interface randomParameter {
  expression: string;
  variable: number;
}
// github.com/benoitkugler/maths-online/maths/exercice.randomParameters
export type randomParameters = randomParameter[] | null;
// github.com/benoitkugler/maths-online/maths/exercice.Question
export interface Question {
  title: string;
  enonce: Enonce;
  random_parameters: randomParameters;
}
// github.com/benoitkugler/maths-online/prof/editor.SaveAndPreviewIn
export interface SaveAndPreviewIn {
  SessionID: string;
  Question: Question;
}

/** AbstractAPI provides auto-generated API calls and should be used 
		as base class for an app controller.
	*/
export abstract class AbstractAPI {
  constructor(
    protected baseUrl: string,
    protected authToken: string,
    protected urlParams: {}
  ) {}

  abstract handleError(error: any): void;

  abstract startRequest(): void;

  getHeaders() {
    return { Authorization: "Bearer " + this.authToken };
  }

  protected async rawLaunchGame(params: LaunchGameIn) {
    const fullUrl = this.baseUrl + "/trivial/launch_game";
    const rep: AxiosResponse<LaunchGameOut> = await Axios.post(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** LaunchGame wraps rawLaunchGame and handles the error */
  async LaunchGame(params: LaunchGameIn) {
    this.startRequest();
    try {
      const out = await this.rawLaunchGame(params);
      this.onSuccessLaunchGame(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessLaunchGame(data: LaunchGameOut): void;

  protected async rawEditStartSession(params: any) {
    const fullUrl = this.baseUrl + "/prof/editor/api/new";
    const rep: AxiosResponse<StartSessionOut> = await Axios.put(
      fullUrl,
      params,
      { headers: this.getHeaders() }
    );
    return rep.data;
  }

  /** EditStartSession wraps rawEditStartSession and handles the error */
  async EditStartSession(params: any) {
    this.startRequest();
    try {
      const out = await this.rawEditStartSession(params);
      this.onSuccessEditStartSession(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditStartSession(data: StartSessionOut): void;

  protected async rawEditSaveAndPreview(params: SaveAndPreviewIn) {
    const fullUrl = this.baseUrl + "/prof/editor/api/save";
    const rep: AxiosResponse<any> = await Axios.post(fullUrl, params, {
      headers: this.getHeaders(),
    });
    return rep.data;
  }

  /** EditSaveAndPreview wraps rawEditSaveAndPreview and handles the error */
  async EditSaveAndPreview(params: SaveAndPreviewIn) {
    this.startRequest();
    try {
      const out = await this.rawEditSaveAndPreview(params);
      this.onSuccessEditSaveAndPreview(out);
      return out;
    } catch (error) {
      this.handleError(error);
    }
  }

  protected abstract onSuccessEditSaveAndPreview(data: any): void;
}
