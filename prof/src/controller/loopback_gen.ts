// Code generated by gomacro/generator/typescript. DO NOT EDIT.
export type Int = number & { __opaque__: "Int" };
// github.com/benoitkugler/maths-online/server/src/maths/expression.Variable
export interface Variable {
  Indice: string;
  Name: Int;
}

export const BlockKind = {
  ExpressionFieldBlock: "ExpressionFieldBlock",
  FigureBlock: "FigureBlock",
  FormulaBlock: "FormulaBlock",
  FunctionPointsFieldBlock: "FunctionPointsFieldBlock",
  FunctionsGraphBlock: "FunctionsGraphBlock",
  GeometricConstructionFieldBlock: "GeometricConstructionFieldBlock",
  ImageBlock: "ImageBlock",
  NumberFieldBlock: "NumberFieldBlock",
  OrderedListFieldBlock: "OrderedListFieldBlock",
  ProofFieldBlock: "ProofFieldBlock",
  RadioFieldBlock: "RadioFieldBlock",
  SetFieldBlock: "SetFieldBlock",
  SignTableBlock: "SignTableBlock",
  SignTableFieldBlock: "SignTableFieldBlock",
  TableBlock: "TableBlock",
  TableFieldBlock: "TableFieldBlock",
  TextBlock: "TextBlock",
  TreeBlock: "TreeBlock",
  TreeFieldBlock: "TreeFieldBlock",
  VariationTableBlock: "VariationTableBlock",
  VariationTableFieldBlock: "VariationTableFieldBlock",
  VectorFieldBlock: "VectorFieldBlock",
} as const;
export type BlockKind = (typeof BlockKind)[keyof typeof BlockKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.Block
export type Block =
  | { Kind: "ExpressionFieldBlock"; Data: ExpressionFieldBlock }
  | { Kind: "FigureBlock"; Data: FigureBlock }
  | { Kind: "FormulaBlock"; Data: FormulaBlock }
  | { Kind: "FunctionPointsFieldBlock"; Data: FunctionPointsFieldBlock }
  | { Kind: "FunctionsGraphBlock"; Data: FunctionsGraphBlock }
  | {
      Kind: "GeometricConstructionFieldBlock";
      Data: GeometricConstructionFieldBlock;
    }
  | { Kind: "ImageBlock"; Data: ImageBlock }
  | { Kind: "NumberFieldBlock"; Data: NumberFieldBlock }
  | { Kind: "OrderedListFieldBlock"; Data: OrderedListFieldBlock }
  | { Kind: "ProofFieldBlock"; Data: ProofFieldBlock }
  | { Kind: "RadioFieldBlock"; Data: RadioFieldBlock }
  | { Kind: "SetFieldBlock"; Data: SetFieldBlock }
  | { Kind: "SignTableBlock"; Data: SignTableBlock }
  | { Kind: "SignTableFieldBlock"; Data: SignTableFieldBlock }
  | { Kind: "TableBlock"; Data: TableBlock }
  | { Kind: "TableFieldBlock"; Data: TableFieldBlock }
  | { Kind: "TextBlock"; Data: TextBlock }
  | { Kind: "TreeBlock"; Data: TreeBlock }
  | { Kind: "TreeFieldBlock"; Data: TreeFieldBlock }
  | { Kind: "VariationTableBlock"; Data: VariationTableBlock }
  | { Kind: "VariationTableFieldBlock"; Data: VariationTableFieldBlock }
  | { Kind: "VectorFieldBlock"; Data: VectorFieldBlock };

// github.com/benoitkugler/maths-online/server/src/maths/questions.Co
export type Co = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ComparisonLevel
export const ComparisonLevel = {
  AsLinearEquation: 102,
  ExpandedSubstitutions: 2,
  SimpleSubstitutions: 1,
  Strict: 0,
} as const;
export type ComparisonLevel =
  (typeof ComparisonLevel)[keyof typeof ComparisonLevel];

export const ComparisonLevelLabels: Record<ComparisonLevel, string> = {
  [ComparisonLevel.AsLinearEquation]: "",
  [ComparisonLevel.ExpandedSubstitutions]: "Compl√®te",
  [ComparisonLevel.SimpleSubstitutions]: "Simple",
  [ComparisonLevel.Strict]: "Exacte",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.CoordExpression
export interface CoordExpression {
  X: string;
  Y: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.Enonce
export type Enonce = Block[] | null;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ExpressionFieldBlock
export interface ExpressionFieldBlock {
  Expression: string;
  Label: Interpolated;
  ComparisonLevel: ComparisonLevel;
  ShowFractionHelp: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FigureBlock
export interface FigureBlock {
  Drawings: RandomDrawings;
  Bounds: RepereBounds;
  ShowGrid: boolean;
  ShowOrigin: boolean;
}

export const FiguresOrGraphsKind = {
  FigureBlock: "FigureBlock",
  FunctionsGraphBlock: "FunctionsGraphBlock",
} as const;
export type FiguresOrGraphsKind =
  (typeof FiguresOrGraphsKind)[keyof typeof FiguresOrGraphsKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.FiguresOrGraphs
export type FiguresOrGraphs =
  | { Kind: "FigureBlock"; Data: FigureBlock }
  | { Kind: "FunctionsGraphBlock"; Data: FunctionsGraphBlock };

// github.com/benoitkugler/maths-online/server/src/maths/questions.FormulaBlock
export interface FormulaBlock {
  Parts: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionArea
export interface FunctionArea {
  Bottom: Interpolated;
  Top: Interpolated;
  Left: string;
  Right: string;
  Color: ColorHex;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionDecoration
export interface FunctionDecoration {
  Label: Interpolated;
  Color: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionDefinition
export interface FunctionDefinition {
  Function: string;
  Decoration: FunctionDecoration;
  Variable: Variable;
  From: string;
  To: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionPoint
export interface FunctionPoint {
  Function: Interpolated;
  X: string;
  Color: ColorHex;
  Legend: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionPointsFieldBlock
export interface FunctionPointsFieldBlock {
  IsDiscrete: boolean;
  Function: string;
  Label: string;
  Variable: Variable;
  XGrid: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionSign
export interface FunctionSign {
  Label: Interpolated;
  FxSymbols: SignSymbol[] | null;
  Signs: boolean[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.FunctionsGraphBlock
export interface FunctionsGraphBlock {
  FunctionExprs: FunctionDefinition[] | null;
  FunctionVariations: VariationTableBlock[] | null;
  SequenceExprs: FunctionDefinition[] | null;
  Areas: FunctionArea[] | null;
  Points: FunctionPoint[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFAffineLine
export interface GFAffineLine {
  Label: string;
  A: string;
  B: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFPoint
export interface GFPoint {
  Answer: CoordExpression;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFVector
export interface GFVector {
  Answer: CoordExpression;
  AnswerOrigin: CoordExpression;
  MustHaveOrigin: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.GFVectorPair
export interface GFVectorPair {
  Criterion: VectorPairCriterion;
}

export const GeoFieldKind = {
  GFAffineLine: "GFAffineLine",
  GFPoint: "GFPoint",
  GFVector: "GFVector",
  GFVectorPair: "GFVectorPair",
} as const;
export type GeoFieldKind = (typeof GeoFieldKind)[keyof typeof GeoFieldKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.GeoField
export type GeoField =
  | { Kind: "GFAffineLine"; Data: GFAffineLine }
  | { Kind: "GFPoint"; Data: GFPoint }
  | { Kind: "GFVector"; Data: GFVector }
  | { Kind: "GFVectorPair"; Data: GFVectorPair };

// github.com/benoitkugler/maths-online/server/src/maths/questions.GeometricConstructionFieldBlock
export interface GeometricConstructionFieldBlock {
  Field: GeoField;
  Background: FiguresOrGraphs;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ImageBlock
export interface ImageBlock {
  URL: string;
  Scale: Int;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.In
export type In = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.Interpolated
export type Interpolated = string;
// github.com/benoitkugler/maths-online/server/src/maths/questions.NumberFieldBlock
export interface NumberFieldBlock {
  Expression: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.OrderedListFieldBlock
export interface OrderedListFieldBlock {
  Label: Interpolated;
  Answer: Interpolated[] | null;
  AdditionalProposals: Interpolated[] | null;
}

export const ParameterEntryKind = {
  Co: "Co",
  In: "In",
  Rp: "Rp",
} as const;
export type ParameterEntryKind =
  (typeof ParameterEntryKind)[keyof typeof ParameterEntryKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.ParameterEntry
export type ParameterEntry =
  | { Kind: "Co"; Data: Co }
  | { Kind: "In"; Data: In }
  | { Kind: "Rp"; Data: Rp };

// github.com/benoitkugler/maths-online/server/src/maths/questions.Parameters
export type Parameters = ParameterEntry[] | null;

export const ProofAssertionKind = {
  ProofEquality: "ProofEquality",
  ProofInvalid: "ProofInvalid",
  ProofNode: "ProofNode",
  ProofSequence: "ProofSequence",
  ProofStatement: "ProofStatement",
} as const;
export type ProofAssertionKind =
  (typeof ProofAssertionKind)[keyof typeof ProofAssertionKind];

// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofAssertion
export type ProofAssertion =
  | { Kind: "ProofEquality"; Data: ProofEquality }
  | { Kind: "ProofInvalid"; Data: ProofInvalid }
  | { Kind: "ProofNode"; Data: ProofNode }
  | { Kind: "ProofSequence"; Data: ProofSequence }
  | { Kind: "ProofStatement"; Data: ProofStatement };

// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofAssertions
export type ProofAssertions = ProofAssertion[] | null;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofEquality
export interface ProofEquality {
  Terms: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofFieldBlock
export interface ProofFieldBlock {
  Answer: ProofSequence;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofInvalid
export type ProofInvalid = Record<string, never>;
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofNode
export interface ProofNode {
  Left: ProofAssertion;
  Right: ProofAssertion;
  Op: Binary;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofSequence
export interface ProofSequence {
  Parts: ProofAssertions;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.ProofStatement
export interface ProofStatement {
  Content: Interpolated;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.QuestionPage
export interface QuestionPage {
  enonce: Enonce;
  parameters: Parameters;
  correction: Enonce;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.RadioFieldBlock
export interface RadioFieldBlock {
  Answer: string;
  Proposals: Interpolated[] | null;
  AsDropDown: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.Rp
export interface Rp {
  expression: string;
  variable: Variable;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.SetFieldBlock
export interface SetFieldBlock {
  Answer: string;
  AdditionalSets: Interpolated[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.SignTableBlock
export interface SignTableBlock {
  Xs: string[] | null;
  Functions: FunctionSign[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.SignTableFieldBlock
export interface SignTableFieldBlock {
  Answer: SignTableBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TableBlock
export interface TableBlock {
  HorizontalHeaders: TextPart[] | null;
  VerticalHeaders: TextPart[] | null;
  Values: (TextPart[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TableFieldBlock
export interface TableFieldBlock {
  HorizontalHeaders: TextPart[] | null;
  VerticalHeaders: TextPart[] | null;
  Answer: (string[] | null)[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TextBlock
export interface TextBlock {
  Parts: Interpolated;
  Bold: boolean;
  Italic: boolean;
  Smaller: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TextKind
export const TextKind = {
  Text: 0,
  StaticMath: 1,
  Expression: 2,
} as const;
export type TextKind = (typeof TextKind)[keyof typeof TextKind];

export const TextKindLabels: Record<TextKind, string> = {
  [TextKind.Text]: "Text simple",
  [TextKind.StaticMath]: "Code LaTeX",
  [TextKind.Expression]: "Expression",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions.TextPart
export interface TextPart {
  Content: string;
  Kind: TextKind;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeBlock
export interface TreeBlock {
  EventsProposals: Interpolated[] | null;
  AnswerRoot: TreeNodeAnswer;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeFieldBlock
export interface TreeFieldBlock {
  Answer: TreeBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.TreeNodeAnswer
export interface TreeNodeAnswer {
  Children: TreeNodeAnswer[] | null;
  Probabilities: string[] | null;
  Value: Int;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VariationTableBlock
export interface VariationTableBlock {
  Label: Interpolated;
  Xs: string[] | null;
  Fxs: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VariationTableFieldBlock
export interface VariationTableFieldBlock {
  Answer: VariationTableBlock;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VectorFieldBlock
export interface VectorFieldBlock {
  Answer: CoordExpression;
  AcceptColinear: boolean;
  DisplayColumn: boolean;
}
// github.com/benoitkugler/maths-online/server/src/maths/questions.VectorPairCriterion
export const VectorPairCriterion = {
  VectorEquals: 0,
  VectorColinear: 1,
  VectorOrthogonal: 2,
} as const;
export type VectorPairCriterion =
  (typeof VectorPairCriterion)[keyof typeof VectorPairCriterion];

export const VectorPairCriterionLabels: Record<VectorPairCriterion, string> = {
  [VectorPairCriterion.VectorEquals]: "Vecteurs √©gaux",
  [VectorPairCriterion.VectorColinear]: "Vecteurs colin√©aires",
  [VectorPairCriterion.VectorOrthogonal]: "Vecteurs orthogonaux",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Binary
export const Binary = {
  Invalid: 0,
  And: 1,
  Or: 2,
} as const;
export type Binary = (typeof Binary)[keyof typeof Binary];

export const BinaryLabels: Record<Binary, string> = {
  [Binary.Invalid]: "Invalide",
  [Binary.And]: "Et",
  [Binary.Or]: "Ou",
};

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.SignSymbol
export const SignSymbol = {
  Nothing: 0,
  Zero: 1,
  ForbiddenValue: 2,
} as const;
export type SignSymbol = (typeof SignSymbol)[keyof typeof SignSymbol];

export const SignSymbolLabels: Record<SignSymbol, string> = {
  [SignSymbol.Nothing]: "",
  [SignSymbol.Zero]: "0",
  [SignSymbol.ForbiddenValue]: "||",
};

// github.com/benoitkugler/maths-online/server/src/maths/repere.ColorHex
export type ColorHex = string;
// github.com/benoitkugler/maths-online/server/src/maths/repere.Coord
export interface Coord {
  X: number;
  Y: number;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.LabelPos
export const LabelPos = {
  Top: 0,
  Bottom: 1,
  Left: 2,
  Right: 3,
  TopLeft: 4,
  TopRight: 5,
  BottomRight: 6,
  BottomLeft: 7,
  Hide: 8,
} as const;
export type LabelPos = (typeof LabelPos)[keyof typeof LabelPos];

export const LabelPosLabels: Record<LabelPos, string> = {
  [LabelPos.Top]: "Au dessus",
  [LabelPos.Bottom]: "En dessous",
  [LabelPos.Left]: "A gauche",
  [LabelPos.Right]: "A droite",
  [LabelPos.TopLeft]: "Au dessus, √† gauche",
  [LabelPos.TopRight]: "Au dessus, √† droite",
  [LabelPos.BottomRight]: "En dessous, √† droite",
  [LabelPos.BottomLeft]: "En dessous, √† gauche",
  [LabelPos.Hide]: "Masquer la l√©gende",
};

// github.com/benoitkugler/maths-online/server/src/maths/repere.NamedRandomLabeledPoint
export interface NamedRandomLabeledPoint {
  Name: string;
  Point: RandomLabeledPoint;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomArea
export interface RandomArea {
  Color: ColorHex;
  Points: string[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomCircle
export interface RandomCircle {
  Center: RandomCoord;
  Radius: string;
  LineColor: ColorHex;
  FillColor: ColorHex;
  Legend: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomCoord
export interface RandomCoord {
  X: string;
  Y: string;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomDrawings
export interface RandomDrawings {
  Points: NamedRandomLabeledPoint[] | null;
  Segments: RandomSegment[] | null;
  Lines: RandomLine[] | null;
  Circles: RandomCircle[] | null;
  Areas: RandomArea[] | null;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomLabeledPoint
export interface RandomLabeledPoint {
  Color: ColorHex;
  Coord: RandomCoord;
  Pos: LabelPos;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomLine
export interface RandomLine {
  Label: string;
  A: string;
  B: string;
  Color: ColorHex;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RandomSegment
export interface RandomSegment {
  LabelName: string;
  From: string;
  To: string;
  Color: ColorHex;
  LabelPos: LabelPos;
  Kind: SegmentKind;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.RepereBounds
export interface RepereBounds {
  Width: Int;
  Height: Int;
  Origin: Coord;
}
// github.com/benoitkugler/maths-online/server/src/maths/repere.SegmentKind
export const SegmentKind = {
  SKSegment: 0,
  SKVector: 1,
  SKLine: 2,
} as const;
export type SegmentKind = (typeof SegmentKind)[keyof typeof SegmentKind];

export const SegmentKindLabels: Record<SegmentKind, string> = {
  [SegmentKind.SKSegment]: "Segment",
  [SegmentKind.SKVector]: "Vecteur",
  [SegmentKind.SKLine]: "Droite (infinie)",
};

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopackEvaluateQuestionIn
export interface LoopackEvaluateQuestionIn {
  Question: QuestionPage;
  Answer: unknown;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackEvaluateCeintureIn
export interface LoopbackEvaluateCeintureIn {
  Questions: IdBeltquestion[] | null;
  Answers: unknown;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackEvaluateCeintureOut
export interface LoopbackEvaluateCeintureOut {
  Answers: unknown;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackEvaluateQuestionOut
export interface LoopbackEvaluateQuestionOut {
  Answers: unknown;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackPaused
export type LoopbackPaused = Record<string, never>;

export const LoopbackServerEventKind = {
  LoopbackPaused: "LoopbackPaused",
  LoopbackShowCeinture: "LoopbackShowCeinture",
  LoopbackShowExercice: "LoopbackShowExercice",
  LoopbackShowQuestion: "LoopbackShowQuestion",
} as const;
export type LoopbackServerEventKind =
  (typeof LoopbackServerEventKind)[keyof typeof LoopbackServerEventKind];

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackServerEvent
export type LoopbackServerEvent =
  | { Kind: "LoopbackPaused"; Data: LoopbackPaused }
  | { Kind: "LoopbackShowCeinture"; Data: LoopbackShowCeinture }
  | { Kind: "LoopbackShowExercice"; Data: LoopbackShowExercice }
  | { Kind: "LoopbackShowQuestion"; Data: LoopbackShowQuestion };

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowCeinture
export interface LoopbackShowCeinture {
  Questions: unknown;
  QuestionIndex: Int;
  Origin: QuestionPage[] | null;
  ShowCorrection: boolean;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowExercice
export interface LoopbackShowExercice {
  Exercice: unknown;
  Progression: unknown;
  ShowCorrection: boolean;
  Origin: QuestionPage[] | null;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowQuestion
export interface LoopbackShowQuestion {
  Question: unknown;
  Params: unknown;
  ShowCorrection: boolean;
  Origin: QuestionPage;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowQuestionAnswerIn
export interface LoopbackShowQuestionAnswerIn {
  Question: QuestionPage;
  Params: unknown;
}
// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowQuestionAnswerOut
export interface LoopbackShowQuestionAnswerOut {
  Answers: unknown;
}
export type IdBeltquestion = Int & { __opaque_int__: "IdBeltquestion" };
