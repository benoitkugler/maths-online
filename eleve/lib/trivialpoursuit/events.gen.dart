// Code generated by structgen. DO NOT EDIT

import '../exercices/types.gen.dart';

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors

String stringFromJson(dynamic json) => json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/trivial-poursuit/game.Ping
class Ping implements ClientEventData {
  final String info;

  const Ping(this.info);

  @override
  String toString() {
    return "Ping($info)";
  }
}

Ping pingFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Ping(stringFromJson(json['Info']));
}

JSON pingToJson(Ping item) {
  return {"Info": stringToJson(item.info)};
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.answer
class Answer implements ClientEventData {
  final QuestionAnswersIn newField;
  final String content;

  const Answer(this.newField, this.content);

  @override
  String toString() {
    return "Answer($newField, $content)";
  }
}

Answer answerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Answer(questionAnswersInFromJson(json['NewField']),
      stringFromJson(json['Content']));
}

JSON answerToJson(Answer item) {
  return {
    "NewField": questionAnswersInToJson(item.newField),
    "Content": stringToJson(item.content)
  };
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.diceClicked
class DiceClicked implements ClientEventData {
  const DiceClicked();

  @override
  String toString() {
    return "DiceClicked()";
  }
}

DiceClicked diceClickedFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DiceClicked();
}

JSON diceClickedToJson(DiceClicked item) {
  return {};
}

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

List<int> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<int> item) {
  return item.map(intToJson).toList();
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.move
class Move implements GameEvent, ClientEventData {
  final List<int> path;
  final int tile;

  const Move(this.path, this.tile);

  @override
  String toString() {
    return "Move($path, $tile)";
  }
}

Move moveFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Move(listIntFromJson(json['Path']), intFromJson(json['Tile']));
}

JSON moveToJson(Move item) {
  return {"Path": listIntToJson(item.path), "Tile": intToJson(item.tile)};
}

bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

// github.com/benoitkugler/maths-online/trivial-poursuit/game.wantNextTurn
class WantNextTurn implements ClientEventData {
  final bool markQuestion;

  const WantNextTurn(this.markQuestion);

  @override
  String toString() {
    return "WantNextTurn($markQuestion)";
  }
}

WantNextTurn wantNextTurnFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return WantNextTurn(boolFromJson(json['MarkQuestion']));
}

JSON wantNextTurnToJson(WantNextTurn item) {
  return {"MarkQuestion": boolToJson(item.markQuestion)};
}

abstract class ClientEventData {}

ClientEventData clientEventDataFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return pingFromJson(data);
    case 1:
      return answerFromJson(data);
    case 2:
      return diceClickedFromJson(data);
    case 3:
      return moveFromJson(data);
    case 4:
      return wantNextTurnFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON clientEventDataToJson(ClientEventData item) {
  if (item is Ping) {
    return {'Kind': 0, 'Data': pingToJson(item)};
  } else if (item is Answer) {
    return {'Kind': 1, 'Data': answerToJson(item)};
  } else if (item is DiceClicked) {
    return {'Kind': 2, 'Data': diceClickedToJson(item)};
  } else if (item is Move) {
    return {'Kind': 3, 'Data': moveToJson(item)};
  } else if (item is WantNextTurn) {
    return {'Kind': 4, 'Data': wantNextTurnToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.ClientEvent
class ClientEvent {
  final ClientEventData event;
  final int player;

  const ClientEvent(this.event, this.player);

  @override
  String toString() {
    return "ClientEvent($event, $player)";
  }
}

ClientEvent clientEventFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ClientEvent(
      clientEventDataFromJson(json['Event']), intFromJson(json['Player']));
}

JSON clientEventToJson(ClientEvent item) {
  return {
    "Event": clientEventDataToJson(item.event),
    "Player": intToJson(item.player)
  };
}

Map<int, String> dictIntStringFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), stringFromJson(v)));
}

Map<String, dynamic> dictIntStringToJson(Map<int, String> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), stringToJson(v)));
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.LobbyUpdate
class LobbyUpdate implements GameEvent {
  final Map<int, String> names;
  final String playerName;
  final int player;
  final bool isJoining;

  const LobbyUpdate(this.names, this.playerName, this.player, this.isJoining);

  @override
  String toString() {
    return "LobbyUpdate($names, $playerName, $player, $isJoining)";
  }
}

LobbyUpdate lobbyUpdateFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return LobbyUpdate(
      dictIntStringFromJson(json['Names']),
      stringFromJson(json['PlayerName']),
      intFromJson(json['Player']),
      boolFromJson(json['IsJoining']));
}

JSON lobbyUpdateToJson(LobbyUpdate item) {
  return {
    "Names": dictIntStringToJson(item.names),
    "PlayerName": stringToJson(item.playerName),
    "Player": intToJson(item.player),
    "IsJoining": boolToJson(item.isJoining)
  };
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.PlayerJoin
class PlayerJoin implements GameEvent {
  final int player;

  const PlayerJoin(this.player);

  @override
  String toString() {
    return "PlayerJoin($player)";
  }
}

PlayerJoin playerJoinFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PlayerJoin(intFromJson(json['Player']));
}

JSON playerJoinToJson(PlayerJoin item) {
  return {"Player": intToJson(item.player)};
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.diceThrow
class DiceThrow implements GameEvent {
  final int face;

  const DiceThrow(this.face);

  @override
  String toString() {
    return "DiceThrow($face)";
  }
}

DiceThrow diceThrowFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DiceThrow(intFromJson(json['Face']));
}

JSON diceThrowToJson(DiceThrow item) {
  return {"Face": intToJson(item.face)};
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.gameEnd
class GameEnd implements GameEvent {
  final List<int> winners;
  final List<String> winnerNames;

  const GameEnd(this.winners, this.winnerNames);

  @override
  String toString() {
    return "GameEnd($winners, $winnerNames)";
  }
}

GameEnd gameEndFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return GameEnd(listIntFromJson(json['Winners']),
      listStringFromJson(json['WinnerNames']));
}

JSON gameEndToJson(GameEnd item) {
  return {
    "Winners": listIntToJson(item.winners),
    "WinnerNames": listStringToJson(item.winnerNames)
  };
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.gameStart
class GameStart implements GameEvent {
  const GameStart();

  @override
  String toString() {
    return "GameStart()";
  }
}

GameStart gameStartFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return GameStart();
}

JSON gameStartToJson(GameStart item) {
  return {};
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.categorie
enum Categorie { purple, green, orange, yellow, blue }

extension _CategorieExt on Categorie {
  static Categorie fromValue(int i) {
    return Categorie.values[i];
  }

  int toValue() {
    return index;
  }
}

Categorie categorieFromJson(dynamic json) =>
    _CategorieExt.fromValue(json as int);

dynamic categorieToJson(Categorie item) => item.toValue();

// github.com/benoitkugler/maths-online/trivial-poursuit/game.playerAnswerResult
class PlayerAnswerResult implements GameEvent {
  final String correctAnwser;
  final int player;
  final bool success;
  final Categorie categorie;

  const PlayerAnswerResult(
      this.correctAnwser, this.player, this.success, this.categorie);

  @override
  String toString() {
    return "PlayerAnswerResult($correctAnwser, $player, $success, $categorie)";
  }
}

PlayerAnswerResult playerAnswerResultFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PlayerAnswerResult(
      stringFromJson(json['CorrectAnwser']),
      intFromJson(json['Player']),
      boolFromJson(json['Success']),
      categorieFromJson(json['Categorie']));
}

JSON playerAnswerResultToJson(PlayerAnswerResult item) {
  return {
    "CorrectAnwser": stringToJson(item.correctAnwser),
    "Player": intToJson(item.player),
    "Success": boolToJson(item.success),
    "Categorie": categorieToJson(item.categorie)
  };
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.playerLeft
class PlayerLeft implements GameEvent {
  final int player;

  const PlayerLeft(this.player);

  @override
  String toString() {
    return "PlayerLeft($player)";
  }
}

PlayerLeft playerLeftFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PlayerLeft(intFromJson(json['Player']));
}

JSON playerLeftToJson(PlayerLeft item) {
  return {"Player": intToJson(item.player)};
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.playerTurn
class PlayerTurn implements GameEvent {
  final String playerName;
  final int player;

  const PlayerTurn(this.playerName, this.player);

  @override
  String toString() {
    return "PlayerTurn($playerName, $player)";
  }
}

PlayerTurn playerTurnFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PlayerTurn(
      stringFromJson(json['PlayerName']), intFromJson(json['Player']));
}

JSON playerTurnToJson(PlayerTurn item) {
  return {
    "PlayerName": stringToJson(item.playerName),
    "Player": intToJson(item.player)
  };
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.possibleMoves
class PossibleMoves implements GameEvent {
  final String playerName;
  final List<int> tiles;
  final int player;

  const PossibleMoves(this.playerName, this.tiles, this.player);

  @override
  String toString() {
    return "PossibleMoves($playerName, $tiles, $player)";
  }
}

PossibleMoves possibleMovesFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PossibleMoves(stringFromJson(json['PlayerName']),
      listIntFromJson(json['Tiles']), intFromJson(json['Player']));
}

JSON possibleMovesToJson(PossibleMoves item) {
  return {
    "PlayerName": stringToJson(item.playerName),
    "Tiles": listIntToJson(item.tiles),
    "Player": intToJson(item.player)
  };
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.showQuestion
class ShowQuestion implements GameEvent {
  final String question;
  final int timeoutSeconds;
  final Categorie categorie;

  const ShowQuestion(this.question, this.timeoutSeconds, this.categorie);

  @override
  String toString() {
    return "ShowQuestion($question, $timeoutSeconds, $categorie)";
  }
}

ShowQuestion showQuestionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ShowQuestion(
      stringFromJson(json['Question']),
      intFromJson(json['TimeoutSeconds']),
      categorieFromJson(json['Categorie']));
}

JSON showQuestionToJson(ShowQuestion item) {
  return {
    "Question": stringToJson(item.question),
    "TimeoutSeconds": intToJson(item.timeoutSeconds),
    "Categorie": categorieToJson(item.categorie)
  };
}

abstract class GameEvent {}

GameEvent gameEventFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return lobbyUpdateFromJson(data);
    case 1:
      return playerJoinFromJson(data);
    case 2:
      return diceThrowFromJson(data);
    case 3:
      return gameEndFromJson(data);
    case 4:
      return gameStartFromJson(data);
    case 5:
      return moveFromJson(data);
    case 6:
      return playerAnswerResultFromJson(data);
    case 7:
      return playerLeftFromJson(data);
    case 8:
      return playerTurnFromJson(data);
    case 9:
      return possibleMovesFromJson(data);
    case 10:
      return showQuestionFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON gameEventToJson(GameEvent item) {
  if (item is LobbyUpdate) {
    return {'Kind': 0, 'Data': lobbyUpdateToJson(item)};
  } else if (item is PlayerJoin) {
    return {'Kind': 1, 'Data': playerJoinToJson(item)};
  } else if (item is DiceThrow) {
    return {'Kind': 2, 'Data': diceThrowToJson(item)};
  } else if (item is GameEnd) {
    return {'Kind': 3, 'Data': gameEndToJson(item)};
  } else if (item is GameStart) {
    return {'Kind': 4, 'Data': gameStartToJson(item)};
  } else if (item is Move) {
    return {'Kind': 5, 'Data': moveToJson(item)};
  } else if (item is PlayerAnswerResult) {
    return {'Kind': 6, 'Data': playerAnswerResultToJson(item)};
  } else if (item is PlayerLeft) {
    return {'Kind': 7, 'Data': playerLeftToJson(item)};
  } else if (item is PlayerTurn) {
    return {'Kind': 8, 'Data': playerTurnToJson(item)};
  } else if (item is PossibleMoves) {
    return {'Kind': 9, 'Data': possibleMovesToJson(item)};
  } else if (item is ShowQuestion) {
    return {'Kind': 10, 'Data': showQuestionToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

List<GameEvent> listGameEventFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(gameEventFromJson).toList();
}

List<dynamic> listGameEventToJson(List<GameEvent> item) {
  return item.map(gameEventToJson).toList();
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.Events
typedef Events = List<GameEvent>;

List<bool> listBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(boolFromJson).toList();
}

List<dynamic> listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.success
typedef Success = List<bool>;

// github.com/benoitkugler/maths-online/trivial-poursuit/game.PlayerStatus
class PlayerStatus {
  final String name;
  final Success success;

  const PlayerStatus(this.name, this.success);

  @override
  String toString() {
    return "PlayerStatus($name, $success)";
  }
}

PlayerStatus playerStatusFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PlayerStatus(
      stringFromJson(json['Name']), listBoolFromJson(json['Success']));
}

JSON playerStatusToJson(PlayerStatus item) {
  return {
    "Name": stringToJson(item.name),
    "Success": listBoolToJson(item.success)
  };
}

Map<int, PlayerStatus> dictIntPlayerStatusFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), playerStatusFromJson(v)));
}

Map<String, dynamic> dictIntPlayerStatusToJson(Map<int, PlayerStatus> item) {
  return item
      .map((k, v) => MapEntry(intToJson(k).toString(), playerStatusToJson(v)));
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.GameState
class GameState {
  final Map<int, PlayerStatus> players;
  final int pawnTile;
  final int player;

  const GameState(this.players, this.pawnTile, this.player);

  @override
  String toString() {
    return "GameState($players, $pawnTile, $player)";
  }
}

GameState gameStateFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return GameState(dictIntPlayerStatusFromJson(json['Players']),
      intFromJson(json['PawnTile']), intFromJson(json['Player']));
}

JSON gameStateToJson(GameState item) {
  return {
    "Players": dictIntPlayerStatusToJson(item.players),
    "PawnTile": intToJson(item.pawnTile),
    "Player": intToJson(item.player)
  };
}

// github.com/benoitkugler/maths-online/trivial-poursuit/game.StateUpdate
class StateUpdate {
  final Events events;
  final GameState state;

  const StateUpdate(this.events, this.state);

  @override
  String toString() {
    return "StateUpdate($events, $state)";
  }
}

StateUpdate stateUpdateFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return StateUpdate(
      listGameEventFromJson(json['Events']), gameStateFromJson(json['State']));
}

JSON stateUpdateToJson(StateUpdate item) {
  return {
    "Events": listGameEventToJson(item.events),
    "State": gameStateToJson(item.state)
  };
}

List<StateUpdate> listStateUpdateFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stateUpdateFromJson).toList();
}

List<dynamic> listStateUpdateToJson(List<StateUpdate> item) {
  return item.map(stateUpdateToJson).toList();
}
