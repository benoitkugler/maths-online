// Code generated by structgen. DO NOT EDIT

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors

int intFromJson(dynamic json) => json as int;

dynamic intToJson(int item) => item;

// github.com/benoitkugler/maths-online/trivial-poursuit.diceThrow
class DiceThrow implements Event {
  final int face;

  const DiceThrow(this.face);
}

DiceThrow diceThrowFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DiceThrow(intFromJson(json['Face']));
}

JSON diceThrowToJson(DiceThrow item) {
  return {"Face": intToJson(item.face)};
}

// github.com/benoitkugler/maths-online/trivial-poursuit.move
class Move implements Event {
  final int tile;

  const Move(this.tile);
}

Move moveFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Move(intFromJson(json['Tile']));
}

JSON moveToJson(Move item) {
  return {"Tile": intToJson(item.tile)};
}

bool boolFromJson(dynamic json) => json as bool;

dynamic boolToJson(bool item) => item;

// github.com/benoitkugler/maths-online/trivial-poursuit.playerAnswerResult
class PlayerAnswerResult implements Event {
  final int player;
  final bool success;

  const PlayerAnswerResult(this.player, this.success);
}

PlayerAnswerResult playerAnswerResultFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PlayerAnswerResult(
      intFromJson(json['Player']), boolFromJson(json['Success']));
}

JSON playerAnswerResultToJson(PlayerAnswerResult item) {
  return {
    "Player": intToJson(item.player),
    "Success": boolToJson(item.success)
  };
}

// github.com/benoitkugler/maths-online/trivial-poursuit.playerTurn
class PlayerTurn implements Event {
  final int player;

  const PlayerTurn(this.player);
}

PlayerTurn playerTurnFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PlayerTurn(intFromJson(json['Player']));
}

JSON playerTurnToJson(PlayerTurn item) {
  return {"Player": intToJson(item.player)};
}

List<int> listIntFromJson(dynamic json) {
  return (json as List<dynamic>).map(intFromJson).toList();
}

dynamic listIntToJson(List<int> item) {
  return item.map(intToJson).toList();
}

// github.com/benoitkugler/maths-online/trivial-poursuit.possibleMoves
class PossibleMoves implements Event {
  final List<int> tiles;

  const PossibleMoves(this.tiles);
}

PossibleMoves possibleMovesFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PossibleMoves(listIntFromJson(json['Tiles']));
}

JSON possibleMovesToJson(PossibleMoves item) {
  return {"Tiles": listIntToJson(item.tiles)};
}

String stringFromJson(dynamic json) => json as String;

dynamic stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/trivial-poursuit.showQuestion
class ShowQuestion implements Event {
  final String question;
  final int categorie;

  const ShowQuestion(this.question, this.categorie);
}

ShowQuestion showQuestionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ShowQuestion(
      stringFromJson(json['Question']), intFromJson(json['Categorie']));
}

JSON showQuestionToJson(ShowQuestion item) {
  return {
    "Question": stringToJson(item.question),
    "Categorie": intToJson(item.categorie)
  };
}

abstract class Event {}

Event eventFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return diceThrowFromJson(data);
    case 1:
      return moveFromJson(data);
    case 2:
      return playerAnswerResultFromJson(data);
    case 3:
      return playerTurnFromJson(data);
    case 4:
      return possibleMovesFromJson(data);
    case 5:
      return showQuestionFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON eventToJson(Event item) {
  if (item is DiceThrow) {
    return {'Kind': 0, 'Data': diceThrowToJson(item)};
  } else if (item is Move) {
    return {'Kind': 1, 'Data': moveToJson(item)};
  } else if (item is PlayerAnswerResult) {
    return {'Kind': 2, 'Data': playerAnswerResultToJson(item)};
  } else if (item is PlayerTurn) {
    return {'Kind': 3, 'Data': playerTurnToJson(item)};
  } else if (item is PossibleMoves) {
    return {'Kind': 4, 'Data': possibleMovesToJson(item)};
  } else if (item is ShowQuestion) {
    return {'Kind': 5, 'Data': showQuestionToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

List<Event> listEventFromJson(dynamic json) {
  return (json as List<dynamic>).map(eventFromJson).toList();
}

dynamic listEventToJson(List<Event> item) {
  return item.map(eventToJson).toList();
}

// github.com/benoitkugler/maths-online/trivial-poursuit.events
typedef Events = List<Event>;

// github.com/benoitkugler/maths-online/trivial-poursuit.EventRange
class EventRange {
  final Events events;
  final int start;

  const EventRange(this.events, this.start);
}

EventRange eventRangeFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return EventRange(
      listEventFromJson(json['Events']), intFromJson(json['Start']));
}

JSON eventRangeToJson(EventRange item) {
  return {
    "Events": listEventToJson(item.events),
    "Start": intToJson(item.start)
  };
}

List<bool> listBoolFromJson(dynamic json) {
  return (json as List<dynamic>).map(boolFromJson).toList();
}

dynamic listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

// github.com/benoitkugler/maths-online/trivial-poursuit.success
typedef Success = List<bool>;

List<Success> listListBoolFromJson(dynamic json) {
  return (json as List<dynamic>).map(listBoolFromJson).toList();
}

dynamic listListBoolToJson(List<Success> item) {
  return item.map(listBoolToJson).toList();
}

// github.com/benoitkugler/maths-online/trivial-poursuit.GameState
class GameState {
  final List<Success> successes;
  final int pawnTile;
  final int player;

  const GameState(this.successes, this.pawnTile, this.player);
}

GameState gameStateFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return GameState(listListBoolFromJson(json['Successes']),
      intFromJson(json['PawnTile']), intFromJson(json['Player']));
}

JSON gameStateToJson(GameState item) {
  return {
    "Successes": listListBoolToJson(item.successes),
    "PawnTile": intToJson(item.pawnTile),
    "Player": intToJson(item.player)
  };
}
