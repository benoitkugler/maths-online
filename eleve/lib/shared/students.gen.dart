// Code generated by gomacro/generator/dart. DO NOT EDIT

// github.com/benoitkugler/maths-online/prof/teacher.AttachStudentToClassroom2In
class AttachStudentToClassroom2In {
  final String classroomCode;
  final IdStudent idStudent;
  final String birthday;

  const AttachStudentToClassroom2In(
      this.classroomCode, this.idStudent, this.birthday);

  @override
  String toString() {
    return "AttachStudentToClassroom2In($classroomCode, $idStudent, $birthday)";
  }
}

AttachStudentToClassroom2In attachStudentToClassroom2InFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return AttachStudentToClassroom2In(stringFromJson(json['ClassroomCode']),
      intFromJson(json['IdStudent']), stringFromJson(json['Birthday']));
}

JSON attachStudentToClassroom2InToJson(AttachStudentToClassroom2In item) {
  return {
    "ClassroomCode": stringToJson(item.classroomCode),
    "IdStudent": intToJson(item.idStudent),
    "Birthday": stringToJson(item.birthday)
  };
}

// github.com/benoitkugler/maths-online/prof/teacher.AttachStudentToClassroom2Out
class AttachStudentToClassroom2Out {
  final bool errInvalidBirthday;
  final bool errAlreadyAttached;
  final String idCrypted;

  const AttachStudentToClassroom2Out(
      this.errInvalidBirthday, this.errAlreadyAttached, this.idCrypted);

  @override
  String toString() {
    return "AttachStudentToClassroom2Out($errInvalidBirthday, $errAlreadyAttached, $idCrypted)";
  }
}

AttachStudentToClassroom2Out attachStudentToClassroom2OutFromJson(
    dynamic json_) {
  final json = (json_ as JSON);
  return AttachStudentToClassroom2Out(
      boolFromJson(json['ErrInvalidBirthday']),
      boolFromJson(json['ErrAlreadyAttached']),
      stringFromJson(json['IdCrypted']));
}

JSON attachStudentToClassroom2OutToJson(AttachStudentToClassroom2Out item) {
  return {
    "ErrInvalidBirthday": boolToJson(item.errInvalidBirthday),
    "ErrAlreadyAttached": boolToJson(item.errAlreadyAttached),
    "IdCrypted": stringToJson(item.idCrypted)
  };
}

// github.com/benoitkugler/maths-online/prof/teacher.CheckStudentClassroomOut
class CheckStudentClassroomOut {
  final bool isOK;
  final StudentClassroomHeader meta;

  const CheckStudentClassroomOut(this.isOK, this.meta);

  @override
  String toString() {
    return "CheckStudentClassroomOut($isOK, $meta)";
  }
}

CheckStudentClassroomOut checkStudentClassroomOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return CheckStudentClassroomOut(
      boolFromJson(json['IsOK']), studentClassroomHeaderFromJson(json['Meta']));
}

JSON checkStudentClassroomOutToJson(CheckStudentClassroomOut item) {
  return {
    "IsOK": boolToJson(item.isOK),
    "Meta": studentClassroomHeaderToJson(item.meta)
  };
}

// github.com/benoitkugler/maths-online/prof/teacher.Date
typedef Date = DateTime;

// github.com/benoitkugler/maths-online/prof/teacher.IdClassroom
typedef IdClassroom = int;

// github.com/benoitkugler/maths-online/prof/teacher.IdStudent
typedef IdStudent = int;

String stringFromJson(dynamic json) => json == null ? "" : json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/prof/teacher.Student
class Student {
  final IdStudent id;
  final String name;
  final String surname;
  final Date birthday;
  final int trivialSuccess;
  final bool isClientAttached;
  final IdClassroom id_classroom;

  const Student(this.id, this.name, this.surname, this.birthday,
      this.trivialSuccess, this.isClientAttached, this.id_classroom);

  @override
  String toString() {
    return "Student($id, $name, $surname, $birthday, $trivialSuccess, $isClientAttached, $id_classroom)";
  }
}

Student studentFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Student(
      intFromJson(json['Id']),
      stringFromJson(json['Name']),
      stringFromJson(json['Surname']),
      dateTimeFromJson(json['Birthday']),
      intFromJson(json['TrivialSuccess']),
      boolFromJson(json['IsClientAttached']),
      intFromJson(json['id_classroom']));
}

JSON studentToJson(Student item) {
  return {
    "Id": intToJson(item.id),
    "Name": stringToJson(item.name),
    "Surname": stringToJson(item.surname),
    "Birthday": dateTimeToJson(item.birthday),
    "TrivialSuccess": intToJson(item.trivialSuccess),
    "IsClientAttached": boolToJson(item.isClientAttached),
    "id_classroom": intToJson(item.id_classroom)
  };
}

// github.com/benoitkugler/maths-online/prof/teacher.StudentClassroomHeader
class StudentClassroomHeader {
  final Student student;
  final String classroomName;
  final String teacherMail;

  const StudentClassroomHeader(
      this.student, this.classroomName, this.teacherMail);

  @override
  String toString() {
    return "StudentClassroomHeader($student, $classroomName, $teacherMail)";
  }
}

StudentClassroomHeader studentClassroomHeaderFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return StudentClassroomHeader(
      studentFromJson(json['Student']),
      stringFromJson(json['ClassroomName']),
      stringFromJson(json['TeacherMail']));
}

JSON studentClassroomHeaderToJson(StudentClassroomHeader item) {
  return {
    "Student": studentToJson(item.student),
    "ClassroomName": stringToJson(item.classroomName),
    "TeacherMail": stringToJson(item.teacherMail)
  };
}

// github.com/benoitkugler/maths-online/prof/teacher.StudentHeader
class StudentHeader {
  final IdStudent id;
  final String label;

  const StudentHeader(this.id, this.label);

  @override
  String toString() {
    return "StudentHeader($id, $label)";
  }
}

StudentHeader studentHeaderFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return StudentHeader(intFromJson(json['Id']), stringFromJson(json['Label']));
}

JSON studentHeaderToJson(StudentHeader item) {
  return {"Id": intToJson(item.id), "Label": stringToJson(item.label)};
}

DateTime dateTimeFromJson(dynamic json) => DateTime.parse(json as String);

dynamic dateTimeToJson(DateTime dt) => dt.toString();

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors
bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

List<StudentHeader> listStudentHeaderFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(studentHeaderFromJson).toList();
}

List<dynamic> listStudentHeaderToJson(List<StudentHeader> item) {
  return item.map(studentHeaderToJson).toList();
}
