// Code generated by structgen. DO NOT EDIT

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors

double doubleFromJson(dynamic json) => (json as num).toDouble();

double doubleToJson(double item) => item;

// github.com/benoitkugler/maths-online/maths/repere.Coord
class Coord {
  final double x;
  final double y;

  const Coord(this.x, this.y);

  @override
  String toString() {
    return "Coord($x, $y)";
  }
}

Coord coordFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Coord(doubleFromJson(json['X']), doubleFromJson(json['Y']));
}

JSON coordToJson(Coord item) {
  return {"X": doubleToJson(item.x), "Y": doubleToJson(item.y)};
}

String stringFromJson(dynamic json) => json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/maths/repere.LabelPos
enum LabelPos {
  top,
  bottom,
  left,
  right,
  topLeft,
  topRight,
  bottomRight,
  bottomLeft
}

extension _LabelPosExt on LabelPos {
  static LabelPos fromValue(int i) {
    return LabelPos.values[i];
  }

  int toValue() {
    return index;
  }
}

LabelPos labelPosFromJson(dynamic json) => _LabelPosExt.fromValue(json as int);

dynamic labelPosToJson(LabelPos item) => item.toValue();

// github.com/benoitkugler/maths-online/maths/repere.LabeledPoint
class LabeledPoint {
  final Coord point;
  final LabelPos pos;

  const LabeledPoint(this.point, this.pos);

  @override
  String toString() {
    return "LabeledPoint($point, $pos)";
  }
}

LabeledPoint labeledPointFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return LabeledPoint(
      coordFromJson(json['Point']), labelPosFromJson(json['Pos']));
}

JSON labeledPointToJson(LabeledPoint item) {
  return {"Point": coordToJson(item.point), "Pos": labelPosToJson(item.pos)};
}

Map<String, LabeledPoint> dictStringLabeledPointFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(k as String, labeledPointFromJson(v)));
}

Map<String, dynamic> dictStringLabeledPointToJson(
    Map<String, LabeledPoint> item) {
  return item.map(
      (k, v) => MapEntry(stringToJson(k).toString(), labeledPointToJson(v)));
}

bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

// github.com/benoitkugler/maths-online/maths/repere.Segment
class Segment {
  final String labelName;
  final String from;
  final String to;
  final LabelPos labelPos;
  final bool asVector;

  const Segment(
      this.labelName, this.from, this.to, this.labelPos, this.asVector);

  @override
  String toString() {
    return "Segment($labelName, $from, $to, $labelPos, $asVector)";
  }
}

Segment segmentFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Segment(
      stringFromJson(json['LabelName']),
      stringFromJson(json['From']),
      stringFromJson(json['To']),
      labelPosFromJson(json['LabelPos']),
      boolFromJson(json['AsVector']));
}

JSON segmentToJson(Segment item) {
  return {
    "LabelName": stringToJson(item.labelName),
    "From": stringToJson(item.from),
    "To": stringToJson(item.to),
    "LabelPos": labelPosToJson(item.labelPos),
    "AsVector": boolToJson(item.asVector)
  };
}

List<Segment> listSegmentFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(segmentFromJson).toList();
}

List<dynamic> listSegmentToJson(List<Segment> item) {
  return item.map(segmentToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/repere.Line
class Line {
  final String label;
  final double a;
  final double b;

  const Line(this.label, this.a, this.b);

  @override
  String toString() {
    return "Line($label, $a, $b)";
  }
}

Line lineFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Line(stringFromJson(json['Label']), doubleFromJson(json['A']),
      doubleFromJson(json['B']));
}

JSON lineToJson(Line item) {
  return {
    "Label": stringToJson(item.label),
    "A": doubleToJson(item.a),
    "B": doubleToJson(item.b)
  };
}

List<Line> listLineFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(lineFromJson).toList();
}

List<dynamic> listLineToJson(List<Line> item) {
  return item.map(lineToJson).toList();
}

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

// github.com/benoitkugler/maths-online/maths/repere.Figure
class Figure {
  final Map<String, LabeledPoint> points;
  final List<Segment> segments;
  final List<Line> lines;
  final int width;
  final int height;
  final Coord origin;
  final bool showGrid;

  const Figure(this.points, this.segments, this.lines, this.width, this.height,
      this.origin, this.showGrid);

  @override
  String toString() {
    return "Figure($points, $segments, $lines, $width, $height, $origin, $showGrid)";
  }
}

Figure figureFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Figure(
      dictStringLabeledPointFromJson(json['Points']),
      listSegmentFromJson(json['Segments']),
      listLineFromJson(json['Lines']),
      intFromJson(json['Width']),
      intFromJson(json['Height']),
      coordFromJson(json['Origin']),
      boolFromJson(json['ShowGrid']));
}

JSON figureToJson(Figure item) {
  return {
    "Points": dictStringLabeledPointToJson(item.points),
    "Segments": listSegmentToJson(item.segments),
    "Lines": listLineToJson(item.lines),
    "Width": intToJson(item.width),
    "Height": intToJson(item.height),
    "Origin": coordToJson(item.origin),
    "ShowGrid": boolToJson(item.showGrid)
  };
}
