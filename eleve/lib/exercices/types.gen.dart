// Code generated by structgen. DO NOT EDIT

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors

double doubleFromJson(dynamic json) => json as double;

double doubleToJson(double item) => item;

// github.com/benoitkugler/maths-online/maths/exercice/client.NumberAnswer
class NumberAnswer implements Answer {
  final double value;

  const NumberAnswer(this.value);

  @override
  String toString() {
    return "NumberAnswer($value)";
  }
}

NumberAnswer numberAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return NumberAnswer(doubleFromJson(json['Value']));
}

JSON numberAnswerToJson(NumberAnswer item) {
  return {"Value": doubleToJson(item.value)};
}

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

// github.com/benoitkugler/maths-online/maths/exercice/client.RadioAnswer
class RadioAnswer implements Answer {
  final int index;

  const RadioAnswer(this.index);

  @override
  String toString() {
    return "RadioAnswer($index)";
  }
}

RadioAnswer radioAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return RadioAnswer(intFromJson(json['Index']));
}

JSON radioAnswerToJson(RadioAnswer item) {
  return {"Index": intToJson(item.index)};
}

abstract class Answer {}

Answer answerFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return numberAnswerFromJson(data);
    case 1:
      return radioAnswerFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON answerToJson(Answer item) {
  if (item is NumberAnswer) {
    return {'Kind': 0, 'Data': numberAnswerToJson(item)};
  } else if (item is RadioAnswer) {
    return {'Kind': 1, 'Data': radioAnswerToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

String stringFromJson(dynamic json) => json as String;

String stringToJson(String item) => item;

bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

// github.com/benoitkugler/maths-online/maths/exercice/client.FormulaBlock
class FormulaBlock implements Block {
  final String content;
  final bool isInline;

  const FormulaBlock(this.content, this.isInline);

  @override
  String toString() {
    return "FormulaBlock($content, $isInline)";
  }
}

FormulaBlock formulaBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FormulaBlock(
      stringFromJson(json['Content']), boolFromJson(json['IsInline']));
}

JSON formulaBlockToJson(FormulaBlock item) {
  return {
    "Content": stringToJson(item.content),
    "IsInline": boolToJson(item.isInline)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FormulaFieldBlock
class FormulaFieldBlock implements Block {
  final String expression;
  final int iD;

  const FormulaFieldBlock(this.expression, this.iD);

  @override
  String toString() {
    return "FormulaFieldBlock($expression, $iD)";
  }
}

FormulaFieldBlock formulaFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FormulaFieldBlock(
      stringFromJson(json['Expression']), intFromJson(json['ID']));
}

JSON formulaFieldBlockToJson(FormulaFieldBlock item) {
  return {
    "Expression": stringToJson(item.expression),
    "ID": intToJson(item.iD)
  };
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.ListFieldBlock
class ListFieldBlock implements Block {
  final List<String> choices;
  final int iD;

  const ListFieldBlock(this.choices, this.iD);

  @override
  String toString() {
    return "ListFieldBlock($choices, $iD)";
  }
}

ListFieldBlock listFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ListFieldBlock(
      listStringFromJson(json['Choices']), intFromJson(json['ID']));
}

JSON listFieldBlockToJson(ListFieldBlock item) {
  return {"Choices": listStringToJson(item.choices), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.NumberFieldBlock
class NumberFieldBlock implements Block {
  final int iD;

  const NumberFieldBlock(this.iD);

  @override
  String toString() {
    return "NumberFieldBlock($iD)";
  }
}

NumberFieldBlock numberFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return NumberFieldBlock(intFromJson(json['ID']));
}

JSON numberFieldBlockToJson(NumberFieldBlock item) {
  return {"ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TextBlock
class TextBlock implements Block {
  final String text;

  const TextBlock(this.text);

  @override
  String toString() {
    return "TextBlock($text)";
  }
}

TextBlock textBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TextBlock(stringFromJson(json['Text']));
}

JSON textBlockToJson(TextBlock item) {
  return {"Text": stringToJson(item.text)};
}

abstract class Block {}

Block blockFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return formulaBlockFromJson(data);
    case 1:
      return formulaFieldBlockFromJson(data);
    case 2:
      return listFieldBlockFromJson(data);
    case 3:
      return numberFieldBlockFromJson(data);
    case 4:
      return textBlockFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON blockToJson(Block item) {
  if (item is FormulaBlock) {
    return {'Kind': 0, 'Data': formulaBlockToJson(item)};
  } else if (item is FormulaFieldBlock) {
    return {'Kind': 1, 'Data': formulaFieldBlockToJson(item)};
  } else if (item is ListFieldBlock) {
    return {'Kind': 2, 'Data': listFieldBlockToJson(item)};
  } else if (item is NumberFieldBlock) {
    return {'Kind': 3, 'Data': numberFieldBlockToJson(item)};
  } else if (item is TextBlock) {
    return {'Kind': 4, 'Data': textBlockToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

List<Block> listBlockFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(blockFromJson).toList();
}

List<dynamic> listBlockToJson(List<Block> item) {
  return item.map(blockToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.Enonce
typedef Enonce = List<Block>;

// github.com/benoitkugler/maths-online/maths/exercice/client.Question
class Question {
  final String title;
  final Enonce enonce;

  const Question(this.title, this.enonce);

  @override
  String toString() {
    return "Question($title, $enonce)";
  }
}

Question questionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Question(
      stringFromJson(json['Title']), listBlockFromJson(json['Enonce']));
}

JSON questionToJson(Question item) {
  return {
    "Title": stringToJson(item.title),
    "Enonce": listBlockToJson(item.enonce)
  };
}

Map<int, Answer> dictIntAnswerFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), answerFromJson(v)));
}

Map<String, dynamic> dictIntAnswerToJson(Map<int, Answer> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), answerToJson(v)));
}

// github.com/benoitkugler/maths-online/maths/exercice/client.QuestionAnswersIn
class QuestionAnswersIn {
  final Map<int, Answer> data;

  const QuestionAnswersIn(this.data);

  @override
  String toString() {
    return "QuestionAnswersIn($data)";
  }
}

QuestionAnswersIn questionAnswersInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionAnswersIn(dictIntAnswerFromJson(json['Data']));
}

JSON questionAnswersInToJson(QuestionAnswersIn item) {
  return {"Data": dictIntAnswerToJson(item.data)};
}

Map<int, bool> dictIntBoolFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON).map((k, v) => MapEntry(int.parse(k), boolFromJson(v)));
}

Map<String, dynamic> dictIntBoolToJson(Map<int, bool> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), boolToJson(v)));
}

// github.com/benoitkugler/maths-online/maths/exercice/client.QuestionAnswersOut
class QuestionAnswersOut {
  final Map<int, bool> data;

  const QuestionAnswersOut(this.data);

  @override
  String toString() {
    return "QuestionAnswersOut($data)";
  }
}

QuestionAnswersOut questionAnswersOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionAnswersOut(dictIntBoolFromJson(json['Data']));
}

JSON questionAnswersOutToJson(QuestionAnswersOut item) {
  return {"Data": dictIntBoolToJson(item.data)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.QuestionSyntaxCheckIn
class QuestionSyntaxCheckIn {
  final Answer answer;
  final int iD;

  const QuestionSyntaxCheckIn(this.answer, this.iD);

  @override
  String toString() {
    return "QuestionSyntaxCheckIn($answer, $iD)";
  }
}

QuestionSyntaxCheckIn questionSyntaxCheckInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionSyntaxCheckIn(
      answerFromJson(json['Answer']), intFromJson(json['ID']));
}

JSON questionSyntaxCheckInToJson(QuestionSyntaxCheckIn item) {
  return {"Answer": answerToJson(item.answer), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.QuestionSyntaxCheckOut
class QuestionSyntaxCheckOut {
  final String reason;
  final bool isValid;

  const QuestionSyntaxCheckOut(this.reason, this.isValid);

  @override
  String toString() {
    return "QuestionSyntaxCheckOut($reason, $isValid)";
  }
}

QuestionSyntaxCheckOut questionSyntaxCheckOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionSyntaxCheckOut(
      stringFromJson(json['Reason']), boolFromJson(json['IsValid']));
}

JSON questionSyntaxCheckOutToJson(QuestionSyntaxCheckOut item) {
  return {
    "Reason": stringToJson(item.reason),
    "IsValid": boolToJson(item.isValid)
  };
}
