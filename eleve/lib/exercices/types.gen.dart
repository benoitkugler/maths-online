// Code generated by structgen. DO NOT EDIT

import 'repere.gen.dart';

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

// github.com/benoitkugler/maths-online/maths/repere.IntCoord
class IntCoord {
  final int x;
  final int y;

  const IntCoord(this.x, this.y);

  @override
  String toString() {
    return "IntCoord($x, $y)";
  }
}

IntCoord intCoordFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return IntCoord(intFromJson(json['X']), intFromJson(json['Y']));
}

JSON intCoordToJson(IntCoord item) {
  return {"X": intToJson(item.x), "Y": intToJson(item.y)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.DoublePointAnswer
class DoublePointAnswer implements Answer {
  final IntCoord from;
  final IntCoord to;

  const DoublePointAnswer(this.from, this.to);

  @override
  String toString() {
    return "DoublePointAnswer($from, $to)";
  }
}

DoublePointAnswer doublePointAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DoublePointAnswer(
      intCoordFromJson(json['From']), intCoordFromJson(json['To']));
}

JSON doublePointAnswerToJson(DoublePointAnswer item) {
  return {"From": intCoordToJson(item.from), "To": intCoordToJson(item.to)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.DoublePointPairAnswer
class DoublePointPairAnswer implements Answer {
  final IntCoord from1;
  final IntCoord to1;
  final IntCoord from2;
  final IntCoord to2;

  const DoublePointPairAnswer(this.from1, this.to1, this.from2, this.to2);

  @override
  String toString() {
    return "DoublePointPairAnswer($from1, $to1, $from2, $to2)";
  }
}

DoublePointPairAnswer doublePointPairAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DoublePointPairAnswer(
      intCoordFromJson(json['From1']),
      intCoordFromJson(json['To1']),
      intCoordFromJson(json['From2']),
      intCoordFromJson(json['To2']));
}

JSON doublePointPairAnswerToJson(DoublePointPairAnswer item) {
  return {
    "From1": intCoordToJson(item.from1),
    "To1": intCoordToJson(item.to1),
    "From2": intCoordToJson(item.from2),
    "To2": intCoordToJson(item.to2)
  };
}

String stringFromJson(dynamic json) => json == null ? "" : json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/maths/exercice/client.ExpressionAnswer
class ExpressionAnswer implements Answer {
  final String expression;

  const ExpressionAnswer(this.expression);

  @override
  String toString() {
    return "ExpressionAnswer($expression)";
  }
}

ExpressionAnswer expressionAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ExpressionAnswer(stringFromJson(json['Expression']));
}

JSON expressionAnswerToJson(ExpressionAnswer item) {
  return {"Expression": stringToJson(item.expression)};
}

List<int> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<int> item) {
  return item.map(intToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FunctionPointsAnswer
class FunctionPointsAnswer implements Answer {
  final List<int> fxs;

  const FunctionPointsAnswer(this.fxs);

  @override
  String toString() {
    return "FunctionPointsAnswer($fxs)";
  }
}

FunctionPointsAnswer functionPointsAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionPointsAnswer(listIntFromJson(json['Fxs']));
}

JSON functionPointsAnswerToJson(FunctionPointsAnswer item) {
  return {"Fxs": listIntToJson(item.fxs)};
}

double doubleFromJson(dynamic json) => (json as num).toDouble();

double doubleToJson(double item) => item;

// github.com/benoitkugler/maths-online/maths/exercice/client.NumberAnswer
class NumberAnswer implements Answer {
  final double value;

  const NumberAnswer(this.value);

  @override
  String toString() {
    return "NumberAnswer($value)";
  }
}

NumberAnswer numberAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return NumberAnswer(doubleFromJson(json['Value']));
}

JSON numberAnswerToJson(NumberAnswer item) {
  return {"Value": doubleToJson(item.value)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.OrderedListAnswer
class OrderedListAnswer implements Answer {
  final List<int> indices;

  const OrderedListAnswer(this.indices);

  @override
  String toString() {
    return "OrderedListAnswer($indices)";
  }
}

OrderedListAnswer orderedListAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return OrderedListAnswer(listIntFromJson(json['Indices']));
}

JSON orderedListAnswerToJson(OrderedListAnswer item) {
  return {"Indices": listIntToJson(item.indices)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.PointAnswer
class PointAnswer implements Answer {
  final IntCoord point;

  const PointAnswer(this.point);

  @override
  String toString() {
    return "PointAnswer($point)";
  }
}

PointAnswer pointAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PointAnswer(intCoordFromJson(json['Point']));
}

JSON pointAnswerToJson(PointAnswer item) {
  return {"Point": intCoordToJson(item.point)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.RadioAnswer
class RadioAnswer implements Answer {
  final int index;

  const RadioAnswer(this.index);

  @override
  String toString() {
    return "RadioAnswer($index)";
  }
}

RadioAnswer radioAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return RadioAnswer(intFromJson(json['Index']));
}

JSON radioAnswerToJson(RadioAnswer item) {
  return {"Index": intToJson(item.index)};
}

List<double> listDoubleFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(doubleFromJson).toList();
}

List<dynamic> listDoubleToJson(List<double> item) {
  return item.map(doubleToJson).toList();
}

List<List<double>> listListDoubleFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listDoubleFromJson).toList();
}

List<dynamic> listListDoubleToJson(List<List<double>> item) {
  return item.map(listDoubleToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TableAnswer
class TableAnswer implements Answer {
  final List<List<double>> rows;

  const TableAnswer(this.rows);

  @override
  String toString() {
    return "TableAnswer($rows)";
  }
}

TableAnswer tableAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TableAnswer(listListDoubleFromJson(json['Rows']));
}

JSON tableAnswerToJson(TableAnswer item) {
  return {"Rows": listListDoubleToJson(item.rows)};
}

List<TreeNodeAnswer> listTreeNodeAnswerFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(treeNodeAnswerFromJson).toList();
}

List<dynamic> listTreeNodeAnswerToJson(List<TreeNodeAnswer> item) {
  return item.map(treeNodeAnswerToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TreeNodeAnswer
class TreeNodeAnswer {
  final List<TreeNodeAnswer> children;
  final List<double> probabilities;
  final int value;

  const TreeNodeAnswer(this.children, this.probabilities, this.value);

  @override
  String toString() {
    return "TreeNodeAnswer($children, $probabilities, $value)";
  }
}

TreeNodeAnswer treeNodeAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TreeNodeAnswer(listTreeNodeAnswerFromJson(json['Children']),
      listDoubleFromJson(json['Probabilities']), intFromJson(json['Value']));
}

JSON treeNodeAnswerToJson(TreeNodeAnswer item) {
  return {
    "Children": listTreeNodeAnswerToJson(item.children),
    "Probabilities": listDoubleToJson(item.probabilities),
    "Value": intToJson(item.value)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TreeAnswer
class TreeAnswer implements Answer {
  final TreeNodeAnswer root;

  const TreeAnswer(this.root);

  @override
  String toString() {
    return "TreeAnswer($root)";
  }
}

TreeAnswer treeAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TreeAnswer(treeNodeAnswerFromJson(json['Root']));
}

JSON treeAnswerToJson(TreeAnswer item) {
  return {"Root": treeNodeAnswerToJson(item.root)};
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}

bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

List<bool> listBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(boolFromJson).toList();
}

List<dynamic> listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.VariationTableAnswer
class VariationTableAnswer implements Answer {
  final List<String> xs;
  final List<String> fxs;
  final List<bool> arrows;

  const VariationTableAnswer(this.xs, this.fxs, this.arrows);

  @override
  String toString() {
    return "VariationTableAnswer($xs, $fxs, $arrows)";
  }
}

VariationTableAnswer variationTableAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VariationTableAnswer(listStringFromJson(json['Xs']),
      listStringFromJson(json['Fxs']), listBoolFromJson(json['Arrows']));
}

JSON variationTableAnswerToJson(VariationTableAnswer item) {
  return {
    "Xs": listStringToJson(item.xs),
    "Fxs": listStringToJson(item.fxs),
    "Arrows": listBoolToJson(item.arrows)
  };
}

abstract class Answer {}

Answer answerFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return doublePointAnswerFromJson(data);
    case 1:
      return doublePointPairAnswerFromJson(data);
    case 2:
      return expressionAnswerFromJson(data);
    case 3:
      return functionPointsAnswerFromJson(data);
    case 4:
      return numberAnswerFromJson(data);
    case 5:
      return orderedListAnswerFromJson(data);
    case 6:
      return pointAnswerFromJson(data);
    case 7:
      return radioAnswerFromJson(data);
    case 8:
      return tableAnswerFromJson(data);
    case 9:
      return treeAnswerFromJson(data);
    case 10:
      return variationTableAnswerFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON answerToJson(Answer item) {
  if (item is DoublePointAnswer) {
    return {'Kind': 0, 'Data': doublePointAnswerToJson(item)};
  } else if (item is DoublePointPairAnswer) {
    return {'Kind': 1, 'Data': doublePointPairAnswerToJson(item)};
  } else if (item is ExpressionAnswer) {
    return {'Kind': 2, 'Data': expressionAnswerToJson(item)};
  } else if (item is FunctionPointsAnswer) {
    return {'Kind': 3, 'Data': functionPointsAnswerToJson(item)};
  } else if (item is NumberAnswer) {
    return {'Kind': 4, 'Data': numberAnswerToJson(item)};
  } else if (item is OrderedListAnswer) {
    return {'Kind': 5, 'Data': orderedListAnswerToJson(item)};
  } else if (item is PointAnswer) {
    return {'Kind': 6, 'Data': pointAnswerToJson(item)};
  } else if (item is RadioAnswer) {
    return {'Kind': 7, 'Data': radioAnswerToJson(item)};
  } else if (item is TableAnswer) {
    return {'Kind': 8, 'Data': tableAnswerToJson(item)};
  } else if (item is TreeAnswer) {
    return {'Kind': 9, 'Data': treeAnswerToJson(item)};
  } else if (item is VariationTableAnswer) {
    return {'Kind': 10, 'Data': variationTableAnswerToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TextOrMath
class TextOrMath {
  final String text;
  final bool isMath;

  const TextOrMath(this.text, this.isMath);

  @override
  String toString() {
    return "TextOrMath($text, $isMath)";
  }
}

TextOrMath textOrMathFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TextOrMath(stringFromJson(json['Text']), boolFromJson(json['IsMath']));
}

JSON textOrMathToJson(TextOrMath item) {
  return {"Text": stringToJson(item.text), "IsMath": boolToJson(item.isMath)};
}

List<TextOrMath> listTextOrMathFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(textOrMathFromJson).toList();
}

List<dynamic> listTextOrMathToJson(List<TextOrMath> item) {
  return item.map(textOrMathToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TextLine
typedef TextLine = List<TextOrMath>;

List<TextLine> listListTextOrMathFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listTextOrMathFromJson).toList();
}

List<dynamic> listListTextOrMathToJson(List<TextLine> item) {
  return item.map(listTextOrMathToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.DropDownFieldBlock
class DropDownFieldBlock implements Block {
  final List<TextLine> proposals;
  final int iD;

  const DropDownFieldBlock(this.proposals, this.iD);

  @override
  String toString() {
    return "DropDownFieldBlock($proposals, $iD)";
  }
}

DropDownFieldBlock dropDownFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DropDownFieldBlock(
      listListTextOrMathFromJson(json['Proposals']), intFromJson(json['ID']));
}

JSON dropDownFieldBlockToJson(DropDownFieldBlock item) {
  return {
    "Proposals": listListTextOrMathToJson(item.proposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.ExpressionFieldBlock
class ExpressionFieldBlock implements Block {
  final String label;
  final int iD;

  const ExpressionFieldBlock(this.label, this.iD);

  @override
  String toString() {
    return "ExpressionFieldBlock($label, $iD)";
  }
}

ExpressionFieldBlock expressionFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ExpressionFieldBlock(
      stringFromJson(json['Label']), intFromJson(json['ID']));
}

JSON expressionFieldBlockToJson(ExpressionFieldBlock item) {
  return {"Label": stringToJson(item.label), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FigureBlock
class FigureBlock implements Block {
  final Figure figure;

  const FigureBlock(this.figure);

  @override
  String toString() {
    return "FigureBlock($figure)";
  }
}

FigureBlock figureBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FigureBlock(figureFromJson(json['Figure']));
}

JSON figureBlockToJson(FigureBlock item) {
  return {"Figure": figureToJson(item.figure)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FigurePointFieldBlock
class FigurePointFieldBlock implements Block {
  final Figure figure;
  final int iD;

  const FigurePointFieldBlock(this.figure, this.iD);

  @override
  String toString() {
    return "FigurePointFieldBlock($figure, $iD)";
  }
}

FigurePointFieldBlock figurePointFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FigurePointFieldBlock(
      figureFromJson(json['Figure']), intFromJson(json['ID']));
}

JSON figurePointFieldBlockToJson(FigurePointFieldBlock item) {
  return {"Figure": figureToJson(item.figure), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FigureVectorFieldBlock
class FigureVectorFieldBlock implements Block {
  final String lineLabel;
  final Figure figure;
  final int iD;
  final bool asLine;

  const FigureVectorFieldBlock(
      this.lineLabel, this.figure, this.iD, this.asLine);

  @override
  String toString() {
    return "FigureVectorFieldBlock($lineLabel, $figure, $iD, $asLine)";
  }
}

FigureVectorFieldBlock figureVectorFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FigureVectorFieldBlock(
      stringFromJson(json['LineLabel']),
      figureFromJson(json['Figure']),
      intFromJson(json['ID']),
      boolFromJson(json['AsLine']));
}

JSON figureVectorFieldBlockToJson(FigureVectorFieldBlock item) {
  return {
    "LineLabel": stringToJson(item.lineLabel),
    "Figure": figureToJson(item.figure),
    "ID": intToJson(item.iD),
    "AsLine": boolToJson(item.asLine)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FigureVectorPairFieldBlock
class FigureVectorPairFieldBlock implements Block {
  final Figure figure;
  final int iD;

  const FigureVectorPairFieldBlock(this.figure, this.iD);

  @override
  String toString() {
    return "FigureVectorPairFieldBlock($figure, $iD)";
  }
}

FigureVectorPairFieldBlock figureVectorPairFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FigureVectorPairFieldBlock(
      figureFromJson(json['Figure']), intFromJson(json['ID']));
}

JSON figureVectorPairFieldBlockToJson(FigureVectorPairFieldBlock item) {
  return {"Figure": figureToJson(item.figure), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FormulaBlock
class FormulaBlock implements Block {
  final String formula;

  const FormulaBlock(this.formula);

  @override
  String toString() {
    return "FormulaBlock($formula)";
  }
}

FormulaBlock formulaBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FormulaBlock(stringFromJson(json['Formula']));
}

JSON formulaBlockToJson(FormulaBlock item) {
  return {"Formula": stringToJson(item.formula)};
}

// github.com/benoitkugler/maths-online/maths/function_grapher.FunctionDecoration
class FunctionDecoration {
  final String label;
  final String color;

  const FunctionDecoration(this.label, this.color);

  @override
  String toString() {
    return "FunctionDecoration($label, $color)";
  }
}

FunctionDecoration functionDecorationFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionDecoration(
      stringFromJson(json['Label']), stringFromJson(json['Color']));
}

JSON functionDecorationToJson(FunctionDecoration item) {
  return {"Label": stringToJson(item.label), "Color": stringToJson(item.color)};
}

// github.com/benoitkugler/maths-online/maths/function_grapher.BezierCurve
class BezierCurve {
  final Coord p0;
  final Coord p1;
  final Coord p2;

  const BezierCurve(this.p0, this.p1, this.p2);

  @override
  String toString() {
    return "BezierCurve($p0, $p1, $p2)";
  }
}

BezierCurve bezierCurveFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return BezierCurve(coordFromJson(json['P0']), coordFromJson(json['P1']),
      coordFromJson(json['P2']));
}

JSON bezierCurveToJson(BezierCurve item) {
  return {
    "P0": coordToJson(item.p0),
    "P1": coordToJson(item.p1),
    "P2": coordToJson(item.p2)
  };
}

List<BezierCurve> listBezierCurveFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(bezierCurveFromJson).toList();
}

List<dynamic> listBezierCurveToJson(List<BezierCurve> item) {
  return item.map(bezierCurveToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/function_grapher.FunctionGraph
class FunctionGraph {
  final FunctionDecoration decoration;
  final List<BezierCurve> segments;

  const FunctionGraph(this.decoration, this.segments);

  @override
  String toString() {
    return "FunctionGraph($decoration, $segments)";
  }
}

FunctionGraph functionGraphFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionGraph(functionDecorationFromJson(json['Decoration']),
      listBezierCurveFromJson(json['Segments']));
}

JSON functionGraphToJson(FunctionGraph item) {
  return {
    "Decoration": functionDecorationToJson(item.decoration),
    "Segments": listBezierCurveToJson(item.segments)
  };
}

List<FunctionGraph> listFunctionGraphFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(functionGraphFromJson).toList();
}

List<dynamic> listFunctionGraphToJson(List<FunctionGraph> item) {
  return item.map(functionGraphToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/function_grapher.FunctionsGraph
class FunctionsGraph {
  final List<FunctionGraph> functions;
  final RepereBounds bounds;

  const FunctionsGraph(this.functions, this.bounds);

  @override
  String toString() {
    return "FunctionsGraph($functions, $bounds)";
  }
}

FunctionsGraph functionsGraphFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionsGraph(listFunctionGraphFromJson(json['Functions']),
      repereBoundsFromJson(json['Bounds']));
}

JSON functionsGraphToJson(FunctionsGraph item) {
  return {
    "Functions": listFunctionGraphToJson(item.functions),
    "Bounds": repereBoundsToJson(item.bounds)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FunctionGraphBlock
class FunctionGraphBlock implements Block {
  final FunctionsGraph graph;

  const FunctionGraphBlock(this.graph);

  @override
  String toString() {
    return "FunctionGraphBlock($graph)";
  }
}

FunctionGraphBlock functionGraphBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionGraphBlock(functionsGraphFromJson(json['Graph']));
}

JSON functionGraphBlockToJson(FunctionGraphBlock item) {
  return {"Graph": functionsGraphToJson(item.graph)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.FunctionPointsFieldBlock
class FunctionPointsFieldBlock implements Block {
  final String label;
  final List<int> xs;
  final List<double> dfxs;
  final RepereBounds bounds;
  final int iD;

  const FunctionPointsFieldBlock(
      this.label, this.xs, this.dfxs, this.bounds, this.iD);

  @override
  String toString() {
    return "FunctionPointsFieldBlock($label, $xs, $dfxs, $bounds, $iD)";
  }
}

FunctionPointsFieldBlock functionPointsFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionPointsFieldBlock(
      stringFromJson(json['Label']),
      listIntFromJson(json['Xs']),
      listDoubleFromJson(json['Dfxs']),
      repereBoundsFromJson(json['Bounds']),
      intFromJson(json['ID']));
}

JSON functionPointsFieldBlockToJson(FunctionPointsFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Xs": listIntToJson(item.xs),
    "Dfxs": listDoubleToJson(item.dfxs),
    "Bounds": repereBoundsToJson(item.bounds),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.NumberFieldBlock
class NumberFieldBlock implements Block {
  final int iD;

  const NumberFieldBlock(this.iD);

  @override
  String toString() {
    return "NumberFieldBlock($iD)";
  }
}

NumberFieldBlock numberFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return NumberFieldBlock(intFromJson(json['ID']));
}

JSON numberFieldBlockToJson(NumberFieldBlock item) {
  return {"ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.OrderedListFieldBlock
class OrderedListFieldBlock implements Block {
  final String label;
  final List<TextLine> proposals;
  final int answerLength;
  final int iD;

  const OrderedListFieldBlock(
      this.label, this.proposals, this.answerLength, this.iD);

  @override
  String toString() {
    return "OrderedListFieldBlock($label, $proposals, $answerLength, $iD)";
  }
}

OrderedListFieldBlock orderedListFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return OrderedListFieldBlock(
      stringFromJson(json['Label']),
      listListTextOrMathFromJson(json['Proposals']),
      intFromJson(json['AnswerLength']),
      intFromJson(json['ID']));
}

JSON orderedListFieldBlockToJson(OrderedListFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Proposals": listListTextOrMathToJson(item.proposals),
    "AnswerLength": intToJson(item.answerLength),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.RadioFieldBlock
class RadioFieldBlock implements Block {
  final List<TextLine> proposals;
  final int iD;

  const RadioFieldBlock(this.proposals, this.iD);

  @override
  String toString() {
    return "RadioFieldBlock($proposals, $iD)";
  }
}

RadioFieldBlock radioFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return RadioFieldBlock(
      listListTextOrMathFromJson(json['Proposals']), intFromJson(json['ID']));
}

JSON radioFieldBlockToJson(RadioFieldBlock item) {
  return {
    "Proposals": listListTextOrMathToJson(item.proposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.SignColumn
class SignColumn {
  final String x;
  final bool isYForbiddenValue;
  final bool isSign;
  final bool isPositive;

  const SignColumn(
      this.x, this.isYForbiddenValue, this.isSign, this.isPositive);

  @override
  String toString() {
    return "SignColumn($x, $isYForbiddenValue, $isSign, $isPositive)";
  }
}

SignColumn signColumnFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return SignColumn(
      stringFromJson(json['X']),
      boolFromJson(json['IsYForbiddenValue']),
      boolFromJson(json['IsSign']),
      boolFromJson(json['IsPositive']));
}

JSON signColumnToJson(SignColumn item) {
  return {
    "X": stringToJson(item.x),
    "IsYForbiddenValue": boolToJson(item.isYForbiddenValue),
    "IsSign": boolToJson(item.isSign),
    "IsPositive": boolToJson(item.isPositive)
  };
}

List<SignColumn> listSignColumnFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(signColumnFromJson).toList();
}

List<dynamic> listSignColumnToJson(List<SignColumn> item) {
  return item.map(signColumnToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.SignTableBlock
class SignTableBlock implements Block {
  final String label;
  final List<SignColumn> columns;

  const SignTableBlock(this.label, this.columns);

  @override
  String toString() {
    return "SignTableBlock($label, $columns)";
  }
}

SignTableBlock signTableBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return SignTableBlock(
      stringFromJson(json['Label']), listSignColumnFromJson(json['Columns']));
}

JSON signTableBlockToJson(SignTableBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Columns": listSignColumnToJson(item.columns)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TableBlock
class TableBlock implements Block {
  final List<TextOrMath> horizontalHeaders;
  final List<TextOrMath> verticalHeaders;
  final List<List<TextOrMath>> values;

  const TableBlock(this.horizontalHeaders, this.verticalHeaders, this.values);

  @override
  String toString() {
    return "TableBlock($horizontalHeaders, $verticalHeaders, $values)";
  }
}

TableBlock tableBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TableBlock(
      listTextOrMathFromJson(json['HorizontalHeaders']),
      listTextOrMathFromJson(json['VerticalHeaders']),
      listListTextOrMathFromJson(json['Values']));
}

JSON tableBlockToJson(TableBlock item) {
  return {
    "HorizontalHeaders": listTextOrMathToJson(item.horizontalHeaders),
    "VerticalHeaders": listTextOrMathToJson(item.verticalHeaders),
    "Values": listListTextOrMathToJson(item.values)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TableFieldBlock
class TableFieldBlock implements Block {
  final List<TextOrMath> horizontalHeaders;
  final List<TextOrMath> verticalHeaders;
  final int iD;

  const TableFieldBlock(this.horizontalHeaders, this.verticalHeaders, this.iD);

  @override
  String toString() {
    return "TableFieldBlock($horizontalHeaders, $verticalHeaders, $iD)";
  }
}

TableFieldBlock tableFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TableFieldBlock(listTextOrMathFromJson(json['HorizontalHeaders']),
      listTextOrMathFromJson(json['VerticalHeaders']), intFromJson(json['ID']));
}

JSON tableFieldBlockToJson(TableFieldBlock item) {
  return {
    "HorizontalHeaders": listTextOrMathToJson(item.horizontalHeaders),
    "VerticalHeaders": listTextOrMathToJson(item.verticalHeaders),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TextBlock
class TextBlock implements Block {
  final List<TextOrMath> parts;
  final bool bold;
  final bool italic;
  final bool smaller;

  const TextBlock(this.parts, this.bold, this.italic, this.smaller);

  @override
  String toString() {
    return "TextBlock($parts, $bold, $italic, $smaller)";
  }
}

TextBlock textBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TextBlock(
      listTextOrMathFromJson(json['Parts']),
      boolFromJson(json['Bold']),
      boolFromJson(json['Italic']),
      boolFromJson(json['Smaller']));
}

JSON textBlockToJson(TextBlock item) {
  return {
    "Parts": listTextOrMathToJson(item.parts),
    "Bold": boolToJson(item.bold),
    "Italic": boolToJson(item.italic),
    "Smaller": boolToJson(item.smaller)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TreeShape
typedef TreeShape = List<int>;

List<TreeShape> listListIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listIntFromJson).toList();
}

List<dynamic> listListIntToJson(List<TreeShape> item) {
  return item.map(listIntToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.TreeFieldBlock
class TreeFieldBlock implements Block {
  final List<TreeShape> shapeProposals;
  final List<TextOrMath> eventsProposals;
  final int iD;

  const TreeFieldBlock(this.shapeProposals, this.eventsProposals, this.iD);

  @override
  String toString() {
    return "TreeFieldBlock($shapeProposals, $eventsProposals, $iD)";
  }
}

TreeFieldBlock treeFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TreeFieldBlock(listListIntFromJson(json['ShapeProposals']),
      listTextOrMathFromJson(json['EventsProposals']), intFromJson(json['ID']));
}

JSON treeFieldBlockToJson(TreeFieldBlock item) {
  return {
    "ShapeProposals": listListIntToJson(item.shapeProposals),
    "EventsProposals": listTextOrMathToJson(item.eventsProposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.VariationColumnNumber
class VariationColumnNumber {
  final String x;
  final String y;
  final bool isUp;

  const VariationColumnNumber(this.x, this.y, this.isUp);

  @override
  String toString() {
    return "VariationColumnNumber($x, $y, $isUp)";
  }
}

VariationColumnNumber variationColumnNumberFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VariationColumnNumber(stringFromJson(json['X']),
      stringFromJson(json['Y']), boolFromJson(json['IsUp']));
}

JSON variationColumnNumberToJson(VariationColumnNumber item) {
  return {
    "X": stringToJson(item.x),
    "Y": stringToJson(item.y),
    "IsUp": boolToJson(item.isUp)
  };
}

List<VariationColumnNumber> listVariationColumnNumberFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(variationColumnNumberFromJson).toList();
}

List<dynamic> listVariationColumnNumberToJson(
    List<VariationColumnNumber> item) {
  return item.map(variationColumnNumberToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.VariationTableBlock
class VariationTableBlock implements Block {
  final String label;
  final List<VariationColumnNumber> columns;
  final List<bool> arrows;

  const VariationTableBlock(this.label, this.columns, this.arrows);

  @override
  String toString() {
    return "VariationTableBlock($label, $columns, $arrows)";
  }
}

VariationTableBlock variationTableBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VariationTableBlock(
      stringFromJson(json['Label']),
      listVariationColumnNumberFromJson(json['Columns']),
      listBoolFromJson(json['Arrows']));
}

JSON variationTableBlockToJson(VariationTableBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Columns": listVariationColumnNumberToJson(item.columns),
    "Arrows": listBoolToJson(item.arrows)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice/client.VariationTableFieldBlock
class VariationTableFieldBlock implements Block {
  final String label;
  final List<int> lengthProposals;
  final int iD;

  const VariationTableFieldBlock(this.label, this.lengthProposals, this.iD);

  @override
  String toString() {
    return "VariationTableFieldBlock($label, $lengthProposals, $iD)";
  }
}

VariationTableFieldBlock variationTableFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VariationTableFieldBlock(stringFromJson(json['Label']),
      listIntFromJson(json['LengthProposals']), intFromJson(json['ID']));
}

JSON variationTableFieldBlockToJson(VariationTableFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "LengthProposals": listIntToJson(item.lengthProposals),
    "ID": intToJson(item.iD)
  };
}

abstract class Block {}

Block blockFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return dropDownFieldBlockFromJson(data);
    case 1:
      return expressionFieldBlockFromJson(data);
    case 2:
      return figureBlockFromJson(data);
    case 3:
      return figurePointFieldBlockFromJson(data);
    case 4:
      return figureVectorFieldBlockFromJson(data);
    case 5:
      return figureVectorPairFieldBlockFromJson(data);
    case 6:
      return formulaBlockFromJson(data);
    case 7:
      return functionGraphBlockFromJson(data);
    case 8:
      return functionPointsFieldBlockFromJson(data);
    case 9:
      return numberFieldBlockFromJson(data);
    case 10:
      return orderedListFieldBlockFromJson(data);
    case 11:
      return radioFieldBlockFromJson(data);
    case 12:
      return signTableBlockFromJson(data);
    case 13:
      return tableBlockFromJson(data);
    case 14:
      return tableFieldBlockFromJson(data);
    case 15:
      return textBlockFromJson(data);
    case 16:
      return treeFieldBlockFromJson(data);
    case 17:
      return variationTableBlockFromJson(data);
    case 18:
      return variationTableFieldBlockFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON blockToJson(Block item) {
  if (item is DropDownFieldBlock) {
    return {'Kind': 0, 'Data': dropDownFieldBlockToJson(item)};
  } else if (item is ExpressionFieldBlock) {
    return {'Kind': 1, 'Data': expressionFieldBlockToJson(item)};
  } else if (item is FigureBlock) {
    return {'Kind': 2, 'Data': figureBlockToJson(item)};
  } else if (item is FigurePointFieldBlock) {
    return {'Kind': 3, 'Data': figurePointFieldBlockToJson(item)};
  } else if (item is FigureVectorFieldBlock) {
    return {'Kind': 4, 'Data': figureVectorFieldBlockToJson(item)};
  } else if (item is FigureVectorPairFieldBlock) {
    return {'Kind': 5, 'Data': figureVectorPairFieldBlockToJson(item)};
  } else if (item is FormulaBlock) {
    return {'Kind': 6, 'Data': formulaBlockToJson(item)};
  } else if (item is FunctionGraphBlock) {
    return {'Kind': 7, 'Data': functionGraphBlockToJson(item)};
  } else if (item is FunctionPointsFieldBlock) {
    return {'Kind': 8, 'Data': functionPointsFieldBlockToJson(item)};
  } else if (item is NumberFieldBlock) {
    return {'Kind': 9, 'Data': numberFieldBlockToJson(item)};
  } else if (item is OrderedListFieldBlock) {
    return {'Kind': 10, 'Data': orderedListFieldBlockToJson(item)};
  } else if (item is RadioFieldBlock) {
    return {'Kind': 11, 'Data': radioFieldBlockToJson(item)};
  } else if (item is SignTableBlock) {
    return {'Kind': 12, 'Data': signTableBlockToJson(item)};
  } else if (item is TableBlock) {
    return {'Kind': 13, 'Data': tableBlockToJson(item)};
  } else if (item is TableFieldBlock) {
    return {'Kind': 14, 'Data': tableFieldBlockToJson(item)};
  } else if (item is TextBlock) {
    return {'Kind': 15, 'Data': textBlockToJson(item)};
  } else if (item is TreeFieldBlock) {
    return {'Kind': 16, 'Data': treeFieldBlockToJson(item)};
  } else if (item is VariationTableBlock) {
    return {'Kind': 17, 'Data': variationTableBlockToJson(item)};
  } else if (item is VariationTableFieldBlock) {
    return {'Kind': 18, 'Data': variationTableFieldBlockToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

List<Block> listBlockFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(blockFromJson).toList();
}

List<dynamic> listBlockToJson(List<Block> item) {
  return item.map(blockToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice/client.Enonce
typedef Enonce = List<Block>;

// github.com/benoitkugler/maths-online/maths/exercice/client.Question
class Question {
  final String title;
  final Enonce enonce;

  const Question(this.title, this.enonce);

  @override
  String toString() {
    return "Question($title, $enonce)";
  }
}

Question questionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Question(
      stringFromJson(json['Title']), listBlockFromJson(json['Enonce']));
}

JSON questionToJson(Question item) {
  return {
    "Title": stringToJson(item.title),
    "Enonce": listBlockToJson(item.enonce)
  };
}

Map<int, Answer> dictIntAnswerFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), answerFromJson(v)));
}

Map<String, dynamic> dictIntAnswerToJson(Map<int, Answer> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), answerToJson(v)));
}

// github.com/benoitkugler/maths-online/maths/exercice/client.QuestionAnswersIn
class QuestionAnswersIn {
  final Map<int, Answer> data;

  const QuestionAnswersIn(this.data);

  @override
  String toString() {
    return "QuestionAnswersIn($data)";
  }
}

QuestionAnswersIn questionAnswersInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionAnswersIn(dictIntAnswerFromJson(json['Data']));
}

JSON questionAnswersInToJson(QuestionAnswersIn item) {
  return {"Data": dictIntAnswerToJson(item.data)};
}

Map<int, bool> dictIntBoolFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON).map((k, v) => MapEntry(int.parse(k), boolFromJson(v)));
}

Map<String, dynamic> dictIntBoolToJson(Map<int, bool> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), boolToJson(v)));
}

// github.com/benoitkugler/maths-online/maths/exercice/client.QuestionAnswersOut
class QuestionAnswersOut {
  final Map<int, bool> data;

  const QuestionAnswersOut(this.data);

  @override
  String toString() {
    return "QuestionAnswersOut($data)";
  }
}

QuestionAnswersOut questionAnswersOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionAnswersOut(dictIntBoolFromJson(json['Data']));
}

JSON questionAnswersOutToJson(QuestionAnswersOut item) {
  return {"Data": dictIntBoolToJson(item.data)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.QuestionSyntaxCheckIn
class QuestionSyntaxCheckIn {
  final Answer answer;
  final int iD;

  const QuestionSyntaxCheckIn(this.answer, this.iD);

  @override
  String toString() {
    return "QuestionSyntaxCheckIn($answer, $iD)";
  }
}

QuestionSyntaxCheckIn questionSyntaxCheckInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionSyntaxCheckIn(
      answerFromJson(json['Answer']), intFromJson(json['ID']));
}

JSON questionSyntaxCheckInToJson(QuestionSyntaxCheckIn item) {
  return {"Answer": answerToJson(item.answer), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/exercice/client.QuestionSyntaxCheckOut
class QuestionSyntaxCheckOut {
  final String reason;
  final int iD;
  final bool isValid;

  const QuestionSyntaxCheckOut(this.reason, this.iD, this.isValid);

  @override
  String toString() {
    return "QuestionSyntaxCheckOut($reason, $iD, $isValid)";
  }
}

QuestionSyntaxCheckOut questionSyntaxCheckOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionSyntaxCheckOut(stringFromJson(json['Reason']),
      intFromJson(json['ID']), boolFromJson(json['IsValid']));
}

JSON questionSyntaxCheckOutToJson(QuestionSyntaxCheckOut item) {
  return {
    "Reason": stringToJson(item.reason),
    "ID": intToJson(item.iD),
    "IsValid": boolToJson(item.isValid)
  };
}
