// Code generated by structgen. DO NOT EDIT

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors

String stringFromJson(dynamic json) => json as String;

dynamic stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/maths/exercice.clientFormulaFieldBlock
class ClientFormulaFieldBlock implements ClientBlock {
  final String expression;

  const ClientFormulaFieldBlock(this.expression);
}

ClientFormulaFieldBlock clientFormulaFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ClientFormulaFieldBlock(stringFromJson(json['Expression']));
}

JSON clientFormulaFieldBlockToJson(ClientFormulaFieldBlock item) {
  return {"Expression": stringToJson(item.expression)};
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

dynamic listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice.clientListFieldBlock
class ClientListFieldBlock implements ClientBlock {
  final List<String> choices;

  const ClientListFieldBlock(this.choices);
}

ClientListFieldBlock clientListFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ClientListFieldBlock(listStringFromJson(json['Choices']));
}

JSON clientListFieldBlockToJson(ClientListFieldBlock item) {
  return {"Choices": listStringToJson(item.choices)};
}

// github.com/benoitkugler/maths-online/maths/exercice.laTeXBlock
class LaTeXBlock implements ClientBlock {
  final String content;

  const LaTeXBlock(this.content);
}

LaTeXBlock laTeXBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return LaTeXBlock(stringFromJson(json['Content']));
}

JSON laTeXBlockToJson(LaTeXBlock item) {
  return {"Content": stringToJson(item.content)};
}

abstract class ClientBlock {}

ClientBlock clientBlockFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return clientFormulaFieldBlockFromJson(data);
    case 1:
      return clientListFieldBlockFromJson(data);
    case 2:
      return laTeXBlockFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON clientBlockToJson(ClientBlock item) {
  if (item is ClientFormulaFieldBlock) {
    return {'Kind': 0, 'Data': clientFormulaFieldBlockToJson(item)};
  } else if (item is ClientListFieldBlock) {
    return {'Kind': 1, 'Data': clientListFieldBlockToJson(item)};
  } else if (item is LaTeXBlock) {
    return {'Kind': 2, 'Data': laTeXBlockToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

List<ClientBlock> listClientBlockFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(clientBlockFromJson).toList();
}

dynamic listClientBlockToJson(List<ClientBlock> item) {
  return item.map(clientBlockToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice.ClientContent
typedef ClientContent = List<ClientBlock>;

// github.com/benoitkugler/maths-online/maths/exercice.ClientQuestion
class ClientQuestion {
  final String title;
  final ClientContent content;

  const ClientQuestion(this.title, this.content);
}

ClientQuestion clientQuestionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ClientQuestion(
      stringFromJson(json['Title']), listClientBlockFromJson(json['Content']));
}

JSON clientQuestionToJson(ClientQuestion item) {
  return {
    "Title": stringToJson(item.title),
    "Content": listClientBlockToJson(item.content)
  };
}
