// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'predefined.dart';

// github.com/benoitkugler/maths-online/server/src/maths/expression/sets.ListNode
class ListNode {
  final List<ListNode> args;
  final SetOp op;
  final Set leaf;

  const ListNode(this.args, this.op, this.leaf);

  @override
  String toString() {
    return "ListNode($args, $op, $leaf)";
  }
}

ListNode listNodeFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return ListNode(listListNodeFromJson(json['Args']), setOpFromJson(json['Op']),
      intFromJson(json['Leaf']));
}

Map<String, dynamic> listNodeToJson(ListNode item) {
  return {
    "Args": listListNodeToJson(item.args),
    "Op": setOpToJson(item.op),
    "Leaf": intToJson(item.leaf)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/expression/sets.Set
typedef Set = int;

// github.com/benoitkugler/maths-online/server/src/maths/expression/sets.SetOp
enum SetOp { sLeaf, sUnion, sInter, sComplement }

extension _SetOpExt on SetOp {
  static SetOp fromValue(int i) {
    return SetOp.values[i];
  }

  int toValue() {
    return index;
  }
}

String setOpLabel(SetOp v) {
  switch (v) {
    case SetOp.sLeaf:
      return "";
    case SetOp.sUnion:
      return "";
    case SetOp.sInter:
      return "";
    case SetOp.sComplement:
      return "";
  }
}

SetOp setOpFromJson(dynamic json) => _SetOpExt.fromValue(json as int);

dynamic setOpToJson(SetOp item) => item.toValue();

List<ListNode> listListNodeFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listNodeFromJson).toList();
}

List<dynamic> listListNodeToJson(List<ListNode> item) {
  return item.map(listNodeToJson).toList();
}
