// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'predefined.dart';

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Advance
typedef Advance = List<Rank>;

Advance advanceFromJson(dynamic json) {
  return listRankFromJson(json);
}

dynamic advanceToJson(Advance item) {
  return listRankToJson(item);
}

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Domain
enum Domain {
  calculMental,
  puissances,
  fractions,
  reduction,
  factorisation,
  developpement,
  isolerVariable,
  equations,
  inequations,
  derivation,
  matrices
}

extension _DomainExt on Domain {
  static Domain fromValue(int i) {
    return Domain.values[i];
  }

  int toValue() {
    return index;
  }
}

Domain domainFromJson(dynamic json) => _DomainExt.fromValue(json as int);

dynamic domainToJson(Domain item) => item.toValue();

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.IdBeltquestion
typedef IdBeltquestion = int;

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Level
enum Level { seconde, premiere, terminale, postBac }

extension _LevelExt on Level {
  static Level fromValue(int i) {
    return Level.values[i];
  }

  int toValue() {
    return index;
  }
}

Level levelFromJson(dynamic json) => _LevelExt.fromValue(json as int);

dynamic levelToJson(Level item) => item.toValue();

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Rank
enum Rank {
  startRank,
  blanche,
  jaune,
  orange,
  verte,
  bleue,
  rouge,
  marron,
  noire
}

extension _RankExt on Rank {
  static Rank fromValue(int i) {
    return Rank.values[i];
  }

  int toValue() {
    return index;
  }
}

Rank rankFromJson(dynamic json) => _RankExt.fromValue(json as int);

dynamic rankToJson(Rank item) => item.toValue();

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Stat
class Stat {
  final int success;
  final int failure;

  const Stat(this.success, this.failure);

  @override
  String toString() {
    return "Stat($success, $failure)";
  }
}

Stat statFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Stat(intFromJson(json['Success']), intFromJson(json['Failure']));
}

Map<String, dynamic> statToJson(Stat item) {
  return {
    "Success": intToJson(item.success),
    "Failure": intToJson(item.failure)
  };
}

// github.com/benoitkugler/maths-online/server/src/sql/ceintures.Stats
typedef Stats = List<List<Stat>>;

Stats statsFromJson(dynamic json) {
  return listListStatFromJson(json);
}

dynamic statsToJson(Stats item) {
  return listListStatToJson(item);
}

List<List<Stat>> listListStatFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listStatFromJson).toList();
}

List<dynamic> listListStatToJson(List<List<Stat>> item) {
  return item.map(listStatToJson).toList();
}

List<Rank> listRankFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(rankFromJson).toList();
}

List<dynamic> listRankToJson(List<Rank> item) {
  return item.map(rankToJson).toList();
}

List<Stat> listStatFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(statFromJson).toList();
}

List<dynamic> listStatToJson(List<Stat> item) {
  return item.map(statToJson).toList();
}
