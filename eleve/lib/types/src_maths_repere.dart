// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'predefined.dart';

// github.com/benoitkugler/maths-online/server/src/maths/repere.Area
class Area {
  final Color color;
  final List<String> points;

  const Area(this.color, this.points);

  @override
  String toString() {
    return "Area($color, $points)";
  }
}

Area areaFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Area(
      stringFromJson(json['Color']), listStringFromJson(json['Points']));
}

Map<String, dynamic> areaToJson(Area item) {
  return {
    "Color": stringToJson(item.color),
    "Points": listStringToJson(item.points)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.Circle
class Circle {
  final Coord center;
  final double radius;
  final Color lineColor;
  final Color fillColor;
  final String legend;

  const Circle(
      this.center, this.radius, this.lineColor, this.fillColor, this.legend);

  @override
  String toString() {
    return "Circle($center, $radius, $lineColor, $fillColor, $legend)";
  }
}

Circle circleFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Circle(
      coordFromJson(json['Center']),
      doubleFromJson(json['Radius']),
      stringFromJson(json['LineColor']),
      stringFromJson(json['FillColor']),
      stringFromJson(json['Legend']));
}

Map<String, dynamic> circleToJson(Circle item) {
  return {
    "Center": coordToJson(item.center),
    "Radius": doubleToJson(item.radius),
    "LineColor": stringToJson(item.lineColor),
    "FillColor": stringToJson(item.fillColor),
    "Legend": stringToJson(item.legend)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.Color
typedef Color = String;

// github.com/benoitkugler/maths-online/server/src/maths/repere.Coord
class Coord {
  final double x;
  final double y;

  const Coord(this.x, this.y);

  @override
  String toString() {
    return "Coord($x, $y)";
  }
}

Coord coordFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Coord(doubleFromJson(json['X']), doubleFromJson(json['Y']));
}

Map<String, dynamic> coordToJson(Coord item) {
  return {"X": doubleToJson(item.x), "Y": doubleToJson(item.y)};
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.Drawings
class Drawings {
  final Map<String, LabeledPoint> points;
  final List<Segment> segments;
  final List<Line> lines;
  final List<Circle> circles;
  final List<Area> areas;

  const Drawings(
      this.points, this.segments, this.lines, this.circles, this.areas);

  @override
  String toString() {
    return "Drawings($points, $segments, $lines, $circles, $areas)";
  }
}

Drawings drawingsFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Drawings(
      dictStringToLabeledPointFromJson(json['Points']),
      listSegmentFromJson(json['Segments']),
      listLineFromJson(json['Lines']),
      listCircleFromJson(json['Circles']),
      listAreaFromJson(json['Areas']));
}

Map<String, dynamic> drawingsToJson(Drawings item) {
  return {
    "Points": dictStringToLabeledPointToJson(item.points),
    "Segments": listSegmentToJson(item.segments),
    "Lines": listLineToJson(item.lines),
    "Circles": listCircleToJson(item.circles),
    "Areas": listAreaToJson(item.areas)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.Figure
class Figure {
  final Drawings drawings;
  final RepereBounds bounds;
  final bool showGrid;
  final bool showOrigin;

  const Figure(this.drawings, this.bounds, this.showGrid, this.showOrigin);

  @override
  String toString() {
    return "Figure($drawings, $bounds, $showGrid, $showOrigin)";
  }
}

Figure figureFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Figure(
      drawingsFromJson(json['Drawings']),
      repereBoundsFromJson(json['Bounds']),
      boolFromJson(json['ShowGrid']),
      boolFromJson(json['ShowOrigin']));
}

Map<String, dynamic> figureToJson(Figure item) {
  return {
    "Drawings": drawingsToJson(item.drawings),
    "Bounds": repereBoundsToJson(item.bounds),
    "ShowGrid": boolToJson(item.showGrid),
    "ShowOrigin": boolToJson(item.showOrigin)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.IntCoord
class IntCoord {
  final int x;
  final int y;

  const IntCoord(this.x, this.y);

  @override
  String toString() {
    return "IntCoord($x, $y)";
  }
}

IntCoord intCoordFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return IntCoord(intFromJson(json['X']), intFromJson(json['Y']));
}

Map<String, dynamic> intCoordToJson(IntCoord item) {
  return {"X": intToJson(item.x), "Y": intToJson(item.y)};
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.LabelPos
enum LabelPos {
  top,
  bottom,
  left,
  right,
  topLeft,
  topRight,
  bottomRight,
  bottomLeft,
  hide
}

extension _LabelPosExt on LabelPos {
  static LabelPos fromValue(int i) {
    return LabelPos.values[i];
  }

  int toValue() {
    return index;
  }
}

LabelPos labelPosFromJson(dynamic json) => _LabelPosExt.fromValue(json as int);

dynamic labelPosToJson(LabelPos item) => item.toValue();

// github.com/benoitkugler/maths-online/server/src/maths/repere.LabeledPoint
class LabeledPoint {
  final Color color;
  final PosPoint point;

  const LabeledPoint(this.color, this.point);

  @override
  String toString() {
    return "LabeledPoint($color, $point)";
  }
}

LabeledPoint labeledPointFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LabeledPoint(
      stringFromJson(json['Color']), posPointFromJson(json['Point']));
}

Map<String, dynamic> labeledPointToJson(LabeledPoint item) {
  return {
    "Color": stringToJson(item.color),
    "Point": posPointToJson(item.point)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.Line
class Line {
  final String label;
  final Color color;
  final double a;
  final double b;

  const Line(this.label, this.color, this.a, this.b);

  @override
  String toString() {
    return "Line($label, $color, $a, $b)";
  }
}

Line lineFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Line(stringFromJson(json['Label']), stringFromJson(json['Color']),
      doubleFromJson(json['A']), doubleFromJson(json['B']));
}

Map<String, dynamic> lineToJson(Line item) {
  return {
    "Label": stringToJson(item.label),
    "Color": stringToJson(item.color),
    "A": doubleToJson(item.a),
    "B": doubleToJson(item.b)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.PosPoint
class PosPoint {
  final Coord point;
  final LabelPos pos;

  const PosPoint(this.point, this.pos);

  @override
  String toString() {
    return "PosPoint($point, $pos)";
  }
}

PosPoint posPointFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PosPoint(coordFromJson(json['Point']), labelPosFromJson(json['Pos']));
}

Map<String, dynamic> posPointToJson(PosPoint item) {
  return {"Point": coordToJson(item.point), "Pos": labelPosToJson(item.pos)};
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.RepereBounds
class RepereBounds {
  final int width;
  final int height;
  final Coord origin;

  const RepereBounds(this.width, this.height, this.origin);

  @override
  String toString() {
    return "RepereBounds($width, $height, $origin)";
  }
}

RepereBounds repereBoundsFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return RepereBounds(intFromJson(json['Width']), intFromJson(json['Height']),
      coordFromJson(json['Origin']));
}

Map<String, dynamic> repereBoundsToJson(RepereBounds item) {
  return {
    "Width": intToJson(item.width),
    "Height": intToJson(item.height),
    "Origin": coordToJson(item.origin)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.Segment
class Segment {
  final String labelName;
  final String from;
  final String to;
  final Color color;
  final LabelPos labelPos;
  final SegmentKind kind;

  const Segment(
      this.labelName, this.from, this.to, this.color, this.labelPos, this.kind);

  @override
  String toString() {
    return "Segment($labelName, $from, $to, $color, $labelPos, $kind)";
  }
}

Segment segmentFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Segment(
      stringFromJson(json['LabelName']),
      stringFromJson(json['From']),
      stringFromJson(json['To']),
      stringFromJson(json['Color']),
      labelPosFromJson(json['LabelPos']),
      segmentKindFromJson(json['Kind']));
}

Map<String, dynamic> segmentToJson(Segment item) {
  return {
    "LabelName": stringToJson(item.labelName),
    "From": stringToJson(item.from),
    "To": stringToJson(item.to),
    "Color": stringToJson(item.color),
    "LabelPos": labelPosToJson(item.labelPos),
    "Kind": segmentKindToJson(item.kind)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/repere.SegmentKind
enum SegmentKind { sKSegment, sKVector, sKLine }

extension _SegmentKindExt on SegmentKind {
  static SegmentKind fromValue(int i) {
    return SegmentKind.values[i];
  }

  int toValue() {
    return index;
  }
}

SegmentKind segmentKindFromJson(dynamic json) =>
    _SegmentKindExt.fromValue(json as int);

dynamic segmentKindToJson(SegmentKind item) => item.toValue();

Map<String, LabeledPoint> dictStringToLabeledPointFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as Map<String, dynamic>)
      .map((k, v) => MapEntry(k as String, labeledPointFromJson(v)));
}

Map<String, dynamic> dictStringToLabeledPointToJson(
    Map<String, LabeledPoint> item) {
  return item.map(
      (k, v) => MapEntry(stringToJson(k).toString(), labeledPointToJson(v)));
}

List<Area> listAreaFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(areaFromJson).toList();
}

List<dynamic> listAreaToJson(List<Area> item) {
  return item.map(areaToJson).toList();
}

List<Circle> listCircleFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(circleFromJson).toList();
}

List<dynamic> listCircleToJson(List<Circle> item) {
  return item.map(circleToJson).toList();
}

List<Line> listLineFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(lineFromJson).toList();
}

List<dynamic> listLineToJson(List<Line> item) {
  return item.map(lineToJson).toList();
}

List<Segment> listSegmentFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(segmentFromJson).toList();
}

List<dynamic> listSegmentToJson(List<Segment> item) {
  return item.map(segmentToJson).toList();
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}
