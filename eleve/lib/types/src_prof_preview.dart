// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'predefined.dart';
import 'src_maths_questions.dart';
import 'src_maths_questions_client.dart';
import 'src_sql_ceintures.dart';
import 'src_tasks.dart';

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopackEvaluateQuestionIn
class LoopackEvaluateQuestionIn {
  final QuestionPage question;
  final AnswerP answer;

  const LoopackEvaluateQuestionIn(this.question, this.answer);

  @override
  String toString() {
    return "LoopackEvaluateQuestionIn($question, $answer)";
  }
}

LoopackEvaluateQuestionIn loopackEvaluateQuestionInFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopackEvaluateQuestionIn(
      questionPageFromJson(json['Question']), answerPFromJson(json['Answer']));
}

Map<String, dynamic> loopackEvaluateQuestionInToJson(
    LoopackEvaluateQuestionIn item) {
  return {
    "Question": questionPageToJson(item.question),
    "Answer": answerPToJson(item.answer)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackEvaluateCeintureIn
class LoopbackEvaluateCeintureIn {
  final List<IdBeltquestion> questions;
  final List<AnswerP> answers;

  const LoopbackEvaluateCeintureIn(this.questions, this.answers);

  @override
  String toString() {
    return "LoopbackEvaluateCeintureIn($questions, $answers)";
  }
}

LoopbackEvaluateCeintureIn loopbackEvaluateCeintureInFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackEvaluateCeintureIn(
      listIntFromJson(json['Questions']), listAnswerPFromJson(json['Answers']));
}

Map<String, dynamic> loopbackEvaluateCeintureInToJson(
    LoopbackEvaluateCeintureIn item) {
  return {
    "Questions": listIntToJson(item.questions),
    "Answers": listAnswerPToJson(item.answers)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackEvaluateCeintureOut
class LoopbackEvaluateCeintureOut {
  final List<QuestionAnswersOut> answers;

  const LoopbackEvaluateCeintureOut(this.answers);

  @override
  String toString() {
    return "LoopbackEvaluateCeintureOut($answers)";
  }
}

LoopbackEvaluateCeintureOut loopbackEvaluateCeintureOutFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackEvaluateCeintureOut(
      listQuestionAnswersOutFromJson(json['Answers']));
}

Map<String, dynamic> loopbackEvaluateCeintureOutToJson(
    LoopbackEvaluateCeintureOut item) {
  return {"Answers": listQuestionAnswersOutToJson(item.answers)};
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackEvaluateQuestionOut
class LoopbackEvaluateQuestionOut {
  final QuestionAnswersOut answers;

  const LoopbackEvaluateQuestionOut(this.answers);

  @override
  String toString() {
    return "LoopbackEvaluateQuestionOut($answers)";
  }
}

LoopbackEvaluateQuestionOut loopbackEvaluateQuestionOutFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackEvaluateQuestionOut(
      questionAnswersOutFromJson(json['Answers']));
}

Map<String, dynamic> loopbackEvaluateQuestionOutToJson(
    LoopbackEvaluateQuestionOut item) {
  return {"Answers": questionAnswersOutToJson(item.answers)};
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackPaused
class LoopbackPaused implements LoopbackServerEvent {
  const LoopbackPaused();

  @override
  String toString() {
    return "LoopbackPaused()";
  }
}

LoopbackPaused loopbackPausedFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackPaused();
}

Map<String, dynamic> loopbackPausedToJson(LoopbackPaused item) {
  return {};
}

/// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackServerEvent
abstract class LoopbackServerEvent {}

LoopbackServerEvent loopbackServerEventFromJson(dynamic json_) {
  final json = json_ as Map<String, dynamic>;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "LoopbackPaused":
      return loopbackPausedFromJson(data);
    case "LoopbackShowCeinture":
      return loopbackShowCeintureFromJson(data);
    case "LoopbackShowExercice":
      return loopbackShowExerciceFromJson(data);
    case "LoopbackShowQuestion":
      return loopbackShowQuestionFromJson(data);
    default:
      throw ("unexpected type");
  }
}

Map<String, dynamic> loopbackServerEventToJson(LoopbackServerEvent item) {
  if (item is LoopbackPaused) {
    return {'Kind': "LoopbackPaused", 'Data': loopbackPausedToJson(item)};
  } else if (item is LoopbackShowCeinture) {
    return {
      'Kind': "LoopbackShowCeinture",
      'Data': loopbackShowCeintureToJson(item)
    };
  } else if (item is LoopbackShowExercice) {
    return {
      'Kind': "LoopbackShowExercice",
      'Data': loopbackShowExerciceToJson(item)
    };
  } else if (item is LoopbackShowQuestion) {
    return {
      'Kind': "LoopbackShowQuestion",
      'Data': loopbackShowQuestionToJson(item)
    };
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowCeinture
class LoopbackShowCeinture implements LoopbackServerEvent {
  final List<InstantiatedBeltQuestion> questions;
  final int questionIndex;
  final List<QuestionPage> origin;
  final bool showCorrection;

  const LoopbackShowCeinture(
      this.questions, this.questionIndex, this.origin, this.showCorrection);

  @override
  String toString() {
    return "LoopbackShowCeinture($questions, $questionIndex, $origin, $showCorrection)";
  }
}

LoopbackShowCeinture loopbackShowCeintureFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackShowCeinture(
      listInstantiatedBeltQuestionFromJson(json['Questions']),
      intFromJson(json['QuestionIndex']),
      listQuestionPageFromJson(json['Origin']),
      boolFromJson(json['ShowCorrection']));
}

Map<String, dynamic> loopbackShowCeintureToJson(LoopbackShowCeinture item) {
  return {
    "Questions": listInstantiatedBeltQuestionToJson(item.questions),
    "QuestionIndex": intToJson(item.questionIndex),
    "Origin": listQuestionPageToJson(item.origin),
    "ShowCorrection": boolToJson(item.showCorrection)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowExercice
class LoopbackShowExercice implements LoopbackServerEvent {
  final InstantiatedWork exercice;
  final ProgressionExt progression;
  final bool showCorrection;
  final List<QuestionPage> origin;

  const LoopbackShowExercice(
      this.exercice, this.progression, this.showCorrection, this.origin);

  @override
  String toString() {
    return "LoopbackShowExercice($exercice, $progression, $showCorrection, $origin)";
  }
}

LoopbackShowExercice loopbackShowExerciceFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackShowExercice(
      instantiatedWorkFromJson(json['Exercice']),
      progressionExtFromJson(json['Progression']),
      boolFromJson(json['ShowCorrection']),
      listQuestionPageFromJson(json['Origin']));
}

Map<String, dynamic> loopbackShowExerciceToJson(LoopbackShowExercice item) {
  return {
    "Exercice": instantiatedWorkToJson(item.exercice),
    "Progression": progressionExtToJson(item.progression),
    "ShowCorrection": boolToJson(item.showCorrection),
    "Origin": listQuestionPageToJson(item.origin)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowQuestion
class LoopbackShowQuestion implements LoopbackServerEvent {
  final Question question;
  final Params params;
  final bool showCorrection;
  final QuestionPage origin;

  const LoopbackShowQuestion(
      this.question, this.params, this.showCorrection, this.origin);

  @override
  String toString() {
    return "LoopbackShowQuestion($question, $params, $showCorrection, $origin)";
  }
}

LoopbackShowQuestion loopbackShowQuestionFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackShowQuestion(
      questionFromJson(json['Question']),
      paramsFromJson(json['Params']),
      boolFromJson(json['ShowCorrection']),
      questionPageFromJson(json['Origin']));
}

Map<String, dynamic> loopbackShowQuestionToJson(LoopbackShowQuestion item) {
  return {
    "Question": questionToJson(item.question),
    "Params": paramsToJson(item.params),
    "ShowCorrection": boolToJson(item.showCorrection),
    "Origin": questionPageToJson(item.origin)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowQuestionAnswerIn
class LoopbackShowQuestionAnswerIn {
  final QuestionPage question;
  final Params params;

  const LoopbackShowQuestionAnswerIn(this.question, this.params);

  @override
  String toString() {
    return "LoopbackShowQuestionAnswerIn($question, $params)";
  }
}

LoopbackShowQuestionAnswerIn loopbackShowQuestionAnswerInFromJson(
    dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackShowQuestionAnswerIn(
      questionPageFromJson(json['Question']), paramsFromJson(json['Params']));
}

Map<String, dynamic> loopbackShowQuestionAnswerInToJson(
    LoopbackShowQuestionAnswerIn item) {
  return {
    "Question": questionPageToJson(item.question),
    "Params": paramsToJson(item.params)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/preview.LoopbackShowQuestionAnswerOut
class LoopbackShowQuestionAnswerOut {
  final QuestionAnswersIn answers;

  const LoopbackShowQuestionAnswerOut(this.answers);

  @override
  String toString() {
    return "LoopbackShowQuestionAnswerOut($answers)";
  }
}

LoopbackShowQuestionAnswerOut loopbackShowQuestionAnswerOutFromJson(
    dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LoopbackShowQuestionAnswerOut(
      questionAnswersInFromJson(json['Answers']));
}

Map<String, dynamic> loopbackShowQuestionAnswerOutToJson(
    LoopbackShowQuestionAnswerOut item) {
  return {"Answers": questionAnswersInToJson(item.answers)};
}

List<AnswerP> listAnswerPFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(answerPFromJson).toList();
}

List<dynamic> listAnswerPToJson(List<AnswerP> item) {
  return item.map(answerPToJson).toList();
}

List<InstantiatedBeltQuestion> listInstantiatedBeltQuestionFromJson(
    dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(instantiatedBeltQuestionFromJson).toList();
}

List<dynamic> listInstantiatedBeltQuestionToJson(
    List<InstantiatedBeltQuestion> item) {
  return item.map(instantiatedBeltQuestionToJson).toList();
}

List<IdBeltquestion> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<IdBeltquestion> item) {
  return item.map(intToJson).toList();
}

List<QuestionAnswersOut> listQuestionAnswersOutFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(questionAnswersOutFromJson).toList();
}

List<dynamic> listQuestionAnswersOutToJson(List<QuestionAnswersOut> item) {
  return item.map(questionAnswersOutToJson).toList();
}

List<QuestionPage> listQuestionPageFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(questionPageFromJson).toList();
}

List<dynamic> listQuestionPageToJson(List<QuestionPage> item) {
  return item.map(questionPageToJson).toList();
}
