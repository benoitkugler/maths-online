// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'predefined.dart';
import 'src_maths_questions_client.dart';
import 'src_pass.dart';
import 'src_sql_ceintures.dart';
import 'src_tasks.dart';

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.CreateEvolutionIn
class CreateEvolutionIn {
  final EncryptedID clientID;
  final Level level;

  const CreateEvolutionIn(this.clientID, this.level);

  @override
  String toString() {
    return "CreateEvolutionIn($clientID, $level)";
  }
}

CreateEvolutionIn createEvolutionInFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return CreateEvolutionIn(
      stringFromJson(json['ClientID']), levelFromJson(json['Level']));
}

Map<String, dynamic> createEvolutionInToJson(CreateEvolutionIn item) {
  return {
    "ClientID": stringToJson(item.clientID),
    "Level": levelToJson(item.level)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.CreateEvolutionOut
class CreateEvolutionOut {
  final String anonymousID;
  final StudentEvolution evolution;

  const CreateEvolutionOut(this.anonymousID, this.evolution);

  @override
  String toString() {
    return "CreateEvolutionOut($anonymousID, $evolution)";
  }
}

CreateEvolutionOut createEvolutionOutFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return CreateEvolutionOut(stringFromJson(json['AnonymousID']),
      studentEvolutionFromJson(json['Evolution']));
}

Map<String, dynamic> createEvolutionOutToJson(CreateEvolutionOut item) {
  return {
    "AnonymousID": stringToJson(item.anonymousID),
    "Evolution": studentEvolutionToJson(item.evolution)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.EvaluateAnswersIn
class EvaluateAnswersIn {
  final StudentTokens tokens;
  final Stage stage;
  final List<IdBeltquestion> questions;
  final List<AnswerP> answers;

  const EvaluateAnswersIn(
      this.tokens, this.stage, this.questions, this.answers);

  @override
  String toString() {
    return "EvaluateAnswersIn($tokens, $stage, $questions, $answers)";
  }
}

EvaluateAnswersIn evaluateAnswersInFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return EvaluateAnswersIn(
      studentTokensFromJson(json['Tokens']),
      stageFromJson(json['Stage']),
      listIntFromJson(json['Questions']),
      listAnswerPFromJson(json['Answers']));
}

Map<String, dynamic> evaluateAnswersInToJson(EvaluateAnswersIn item) {
  return {
    "Tokens": studentTokensToJson(item.tokens),
    "Stage": stageToJson(item.stage),
    "Questions": listIntToJson(item.questions),
    "Answers": listAnswerPToJson(item.answers)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.EvaluateAnswersOut
class EvaluateAnswersOut {
  final List<QuestionAnswersOut> answers;
  final StudentEvolution evolution;

  const EvaluateAnswersOut(this.answers, this.evolution);

  @override
  String toString() {
    return "EvaluateAnswersOut($answers, $evolution)";
  }
}

EvaluateAnswersOut evaluateAnswersOutFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return EvaluateAnswersOut(listQuestionAnswersOutFromJson(json['Answers']),
      studentEvolutionFromJson(json['Evolution']));
}

Map<String, dynamic> evaluateAnswersOutToJson(EvaluateAnswersOut item) {
  return {
    "Answers": listQuestionAnswersOutToJson(item.answers),
    "Evolution": studentEvolutionToJson(item.evolution)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.GetEvolutionOut
class GetEvolutionOut {
  final bool has;
  final StudentEvolution evolution;

  const GetEvolutionOut(this.has, this.evolution);

  @override
  String toString() {
    return "GetEvolutionOut($has, $evolution)";
  }
}

GetEvolutionOut getEvolutionOutFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return GetEvolutionOut(
      boolFromJson(json['Has']), studentEvolutionFromJson(json['Evolution']));
}

Map<String, dynamic> getEvolutionOutToJson(GetEvolutionOut item) {
  return {
    "Has": boolToJson(item.has),
    "Evolution": studentEvolutionToJson(item.evolution)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.InstantiatedBeltQuestion
class InstantiatedBeltQuestion {
  final IdBeltquestion id;
  final Question question;
  final Params params;

  const InstantiatedBeltQuestion(this.id, this.question, this.params);

  @override
  String toString() {
    return "InstantiatedBeltQuestion($id, $question, $params)";
  }
}

InstantiatedBeltQuestion instantiatedBeltQuestionFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return InstantiatedBeltQuestion(intFromJson(json['Id']),
      questionFromJson(json['Question']), paramsFromJson(json['Params']));
}

Map<String, dynamic> instantiatedBeltQuestionToJson(
    InstantiatedBeltQuestion item) {
  return {
    "Id": intToJson(item.id),
    "Question": questionToJson(item.question),
    "Params": paramsToJson(item.params)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.Prerequisite
class Prerequisite {
  final Stage need;
  final Stage pending;

  const Prerequisite(this.need, this.pending);

  @override
  String toString() {
    return "Prerequisite($need, $pending)";
  }
}

Prerequisite prerequisiteFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Prerequisite(
      stageFromJson(json['Need']), stageFromJson(json['Pending']));
}

Map<String, dynamic> prerequisiteToJson(Prerequisite item) {
  return {"Need": stageToJson(item.need), "Pending": stageToJson(item.pending)};
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.Scheme
class Scheme {
  final List<Prerequisite> ps;
  final List<Level> levels;

  const Scheme(this.ps, this.levels);

  @override
  String toString() {
    return "Scheme($ps, $levels)";
  }
}

Scheme schemeFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Scheme(
      listPrerequisiteFromJson(json['Ps']), listLevelFromJson(json['Levels']));
}

Map<String, dynamic> schemeToJson(Scheme item) {
  return {
    "Ps": listPrerequisiteToJson(item.ps),
    "Levels": listLevelToJson(item.levels)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.SelectQuestionsIn
class SelectQuestionsIn {
  final StudentTokens tokens;
  final Stage stage;

  const SelectQuestionsIn(this.tokens, this.stage);

  @override
  String toString() {
    return "SelectQuestionsIn($tokens, $stage)";
  }
}

SelectQuestionsIn selectQuestionsInFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return SelectQuestionsIn(
      studentTokensFromJson(json['Tokens']), stageFromJson(json['Stage']));
}

Map<String, dynamic> selectQuestionsInToJson(SelectQuestionsIn item) {
  return {
    "Tokens": studentTokensToJson(item.tokens),
    "Stage": stageToJson(item.stage)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.SelectQuestionsOut
class SelectQuestionsOut {
  final List<InstantiatedBeltQuestion> questions;

  const SelectQuestionsOut(this.questions);

  @override
  String toString() {
    return "SelectQuestionsOut($questions)";
  }
}

SelectQuestionsOut selectQuestionsOutFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return SelectQuestionsOut(
      listInstantiatedBeltQuestionFromJson(json['Questions']));
}

Map<String, dynamic> selectQuestionsOutToJson(SelectQuestionsOut item) {
  return {"Questions": listInstantiatedBeltQuestionToJson(item.questions)};
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.Stage
class Stage {
  final Domain domain;
  final Rank rank;

  const Stage(this.domain, this.rank);

  @override
  String toString() {
    return "Stage($domain, $rank)";
  }
}

Stage stageFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Stage(domainFromJson(json['Domain']), rankFromJson(json['Rank']));
}

Map<String, dynamic> stageToJson(Stage item) {
  return {"Domain": domainToJson(item.domain), "Rank": rankToJson(item.rank)};
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.StudentEvolution
class StudentEvolution {
  final Scheme scheme;
  final Level level;
  final Advance advance;
  final Stats stats;
  final List<Stage> pending;
  final int suggestionIndex;

  const StudentEvolution(this.scheme, this.level, this.advance, this.stats,
      this.pending, this.suggestionIndex);

  @override
  String toString() {
    return "StudentEvolution($scheme, $level, $advance, $stats, $pending, $suggestionIndex)";
  }
}

StudentEvolution studentEvolutionFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return StudentEvolution(
      schemeFromJson(json['Scheme']),
      levelFromJson(json['Level']),
      advanceFromJson(json['Advance']),
      statsFromJson(json['Stats']),
      listStageFromJson(json['Pending']),
      intFromJson(json['SuggestionIndex']));
}

Map<String, dynamic> studentEvolutionToJson(StudentEvolution item) {
  return {
    "Scheme": schemeToJson(item.scheme),
    "Level": levelToJson(item.level),
    "Advance": advanceToJson(item.advance),
    "Stats": statsToJson(item.stats),
    "Pending": listStageToJson(item.pending),
    "SuggestionIndex": intToJson(item.suggestionIndex)
  };
}

// github.com/benoitkugler/maths-online/server/src/prof/ceintures.StudentTokens
class StudentTokens {
  final String anonymousID;
  final EncryptedID clientID;

  const StudentTokens(this.anonymousID, this.clientID);

  @override
  String toString() {
    return "StudentTokens($anonymousID, $clientID)";
  }
}

StudentTokens studentTokensFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return StudentTokens(
      stringFromJson(json['AnonymousID']), stringFromJson(json['ClientID']));
}

Map<String, dynamic> studentTokensToJson(StudentTokens item) {
  return {
    "AnonymousID": stringToJson(item.anonymousID),
    "ClientID": stringToJson(item.clientID)
  };
}

List<AnswerP> listAnswerPFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(answerPFromJson).toList();
}

List<dynamic> listAnswerPToJson(List<AnswerP> item) {
  return item.map(answerPToJson).toList();
}

List<InstantiatedBeltQuestion> listInstantiatedBeltQuestionFromJson(
    dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(instantiatedBeltQuestionFromJson).toList();
}

List<dynamic> listInstantiatedBeltQuestionToJson(
    List<InstantiatedBeltQuestion> item) {
  return item.map(instantiatedBeltQuestionToJson).toList();
}

List<IdBeltquestion> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<IdBeltquestion> item) {
  return item.map(intToJson).toList();
}

List<Level> listLevelFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(levelFromJson).toList();
}

List<dynamic> listLevelToJson(List<Level> item) {
  return item.map(levelToJson).toList();
}

List<Prerequisite> listPrerequisiteFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(prerequisiteFromJson).toList();
}

List<dynamic> listPrerequisiteToJson(List<Prerequisite> item) {
  return item.map(prerequisiteToJson).toList();
}

List<QuestionAnswersOut> listQuestionAnswersOutFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(questionAnswersOutFromJson).toList();
}

List<dynamic> listQuestionAnswersOutToJson(List<QuestionAnswersOut> item) {
  return item.map(questionAnswersOutToJson).toList();
}

List<Stage> listStageFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stageFromJson).toList();
}

List<dynamic> listStageToJson(List<Stage> item) {
  return item.map(stageToJson).toList();
}
