// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'predefined.dart';
import 'src_maths_functiongrapher.dart';
import 'src_maths_repere.dart';

/// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Answer
abstract class Answer {}

Answer answerFromJson(dynamic json_) {
  final json = json_ as Map<String, dynamic>;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "DoublePointAnswer":
      return doublePointAnswerFromJson(data);
    case "DoublePointPairAnswer":
      return doublePointPairAnswerFromJson(data);
    case "ExpressionAnswer":
      return expressionAnswerFromJson(data);
    case "FunctionPointsAnswer":
      return functionPointsAnswerFromJson(data);
    case "NumberAnswer":
      return numberAnswerFromJson(data);
    case "OrderedListAnswer":
      return orderedListAnswerFromJson(data);
    case "PointAnswer":
      return pointAnswerFromJson(data);
    case "ProofAnswer":
      return proofAnswerFromJson(data);
    case "RadioAnswer":
      return radioAnswerFromJson(data);
    case "SignTableAnswer":
      return signTableAnswerFromJson(data);
    case "TableAnswer":
      return tableAnswerFromJson(data);
    case "TreeAnswer":
      return treeAnswerFromJson(data);
    case "VariationTableAnswer":
      return variationTableAnswerFromJson(data);
    case "VectorNumberAnswer":
      return vectorNumberAnswerFromJson(data);
    default:
      throw ("unexpected type");
  }
}

Map<String, dynamic> answerToJson(Answer item) {
  if (item is DoublePointAnswer) {
    return {'Kind': "DoublePointAnswer", 'Data': doublePointAnswerToJson(item)};
  } else if (item is DoublePointPairAnswer) {
    return {
      'Kind': "DoublePointPairAnswer",
      'Data': doublePointPairAnswerToJson(item)
    };
  } else if (item is ExpressionAnswer) {
    return {'Kind': "ExpressionAnswer", 'Data': expressionAnswerToJson(item)};
  } else if (item is FunctionPointsAnswer) {
    return {
      'Kind': "FunctionPointsAnswer",
      'Data': functionPointsAnswerToJson(item)
    };
  } else if (item is NumberAnswer) {
    return {'Kind': "NumberAnswer", 'Data': numberAnswerToJson(item)};
  } else if (item is OrderedListAnswer) {
    return {'Kind': "OrderedListAnswer", 'Data': orderedListAnswerToJson(item)};
  } else if (item is PointAnswer) {
    return {'Kind': "PointAnswer", 'Data': pointAnswerToJson(item)};
  } else if (item is ProofAnswer) {
    return {'Kind': "ProofAnswer", 'Data': proofAnswerToJson(item)};
  } else if (item is RadioAnswer) {
    return {'Kind': "RadioAnswer", 'Data': radioAnswerToJson(item)};
  } else if (item is SignTableAnswer) {
    return {'Kind': "SignTableAnswer", 'Data': signTableAnswerToJson(item)};
  } else if (item is TableAnswer) {
    return {'Kind': "TableAnswer", 'Data': tableAnswerToJson(item)};
  } else if (item is TreeAnswer) {
    return {'Kind': "TreeAnswer", 'Data': treeAnswerToJson(item)};
  } else if (item is VariationTableAnswer) {
    return {
      'Kind': "VariationTableAnswer",
      'Data': variationTableAnswerToJson(item)
    };
  } else if (item is VectorNumberAnswer) {
    return {
      'Kind': "VectorNumberAnswer",
      'Data': vectorNumberAnswerToJson(item)
    };
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Answers
typedef Answers = Map<int, Answer>;

Answers answersFromJson(dynamic json) {
  return dictIntToAnswerFromJson(json);
}

dynamic answersToJson(Answers item) {
  return dictIntToAnswerToJson(item);
}

/// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Assertion
abstract class Assertion {}

Assertion assertionFromJson(dynamic json_) {
  final json = json_ as Map<String, dynamic>;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "Equality":
      return equalityFromJson(data);
    case "Node":
      return nodeFromJson(data);
    case "Sequence":
      return sequenceFromJson(data);
    case "Statement":
      return statementFromJson(data);
    default:
      throw ("unexpected type");
  }
}

Map<String, dynamic> assertionToJson(Assertion item) {
  if (item is Equality) {
    return {'Kind': "Equality", 'Data': equalityToJson(item)};
  } else if (item is Node) {
    return {'Kind': "Node", 'Data': nodeToJson(item)};
  } else if (item is Sequence) {
    return {'Kind': "Sequence", 'Data': sequenceToJson(item)};
  } else if (item is Statement) {
    return {'Kind': "Statement", 'Data': statementToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Assertions
typedef Assertions = List<Assertion>;

Assertions assertionsFromJson(dynamic json) {
  return listAssertionFromJson(json);
}

dynamic assertionsToJson(Assertions item) {
  return listAssertionToJson(item);
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Binary
enum Binary { invalid, and, or }

extension _BinaryExt on Binary {
  static Binary fromValue(int i) {
    return Binary.values[i];
  }

  int toValue() {
    return index;
  }
}

Binary binaryFromJson(dynamic json) => _BinaryExt.fromValue(json as int);

dynamic binaryToJson(Binary item) => item.toValue();

/// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Block
abstract class Block {}

Block blockFromJson(dynamic json_) {
  final json = json_ as Map<String, dynamic>;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "DropDownFieldBlock":
      return dropDownFieldBlockFromJson(data);
    case "ExpressionFieldBlock":
      return expressionFieldBlockFromJson(data);
    case "FigureBlock":
      return figureBlockFromJson(data);
    case "FigurePointFieldBlock":
      return figurePointFieldBlockFromJson(data);
    case "FigureVectorFieldBlock":
      return figureVectorFieldBlockFromJson(data);
    case "FigureVectorPairFieldBlock":
      return figureVectorPairFieldBlockFromJson(data);
    case "FormulaBlock":
      return formulaBlockFromJson(data);
    case "FunctionPointsFieldBlock":
      return functionPointsFieldBlockFromJson(data);
    case "FunctionsGraphBlock":
      return functionsGraphBlockFromJson(data);
    case "NumberFieldBlock":
      return numberFieldBlockFromJson(data);
    case "OrderedListFieldBlock":
      return orderedListFieldBlockFromJson(data);
    case "ProofFieldBlock":
      return proofFieldBlockFromJson(data);
    case "RadioFieldBlock":
      return radioFieldBlockFromJson(data);
    case "SignTableBlock":
      return signTableBlockFromJson(data);
    case "SignTableFieldBlock":
      return signTableFieldBlockFromJson(data);
    case "TableBlock":
      return tableBlockFromJson(data);
    case "TableFieldBlock":
      return tableFieldBlockFromJson(data);
    case "TextBlock":
      return textBlockFromJson(data);
    case "TreeFieldBlock":
      return treeFieldBlockFromJson(data);
    case "VariationTableBlock":
      return variationTableBlockFromJson(data);
    case "VariationTableFieldBlock":
      return variationTableFieldBlockFromJson(data);
    case "VectorFieldBlock":
      return vectorFieldBlockFromJson(data);
    default:
      throw ("unexpected type");
  }
}

Map<String, dynamic> blockToJson(Block item) {
  if (item is DropDownFieldBlock) {
    return {
      'Kind': "DropDownFieldBlock",
      'Data': dropDownFieldBlockToJson(item)
    };
  } else if (item is ExpressionFieldBlock) {
    return {
      'Kind': "ExpressionFieldBlock",
      'Data': expressionFieldBlockToJson(item)
    };
  } else if (item is FigureBlock) {
    return {'Kind': "FigureBlock", 'Data': figureBlockToJson(item)};
  } else if (item is FigurePointFieldBlock) {
    return {
      'Kind': "FigurePointFieldBlock",
      'Data': figurePointFieldBlockToJson(item)
    };
  } else if (item is FigureVectorFieldBlock) {
    return {
      'Kind': "FigureVectorFieldBlock",
      'Data': figureVectorFieldBlockToJson(item)
    };
  } else if (item is FigureVectorPairFieldBlock) {
    return {
      'Kind': "FigureVectorPairFieldBlock",
      'Data': figureVectorPairFieldBlockToJson(item)
    };
  } else if (item is FormulaBlock) {
    return {'Kind': "FormulaBlock", 'Data': formulaBlockToJson(item)};
  } else if (item is FunctionPointsFieldBlock) {
    return {
      'Kind': "FunctionPointsFieldBlock",
      'Data': functionPointsFieldBlockToJson(item)
    };
  } else if (item is FunctionsGraphBlock) {
    return {
      'Kind': "FunctionsGraphBlock",
      'Data': functionsGraphBlockToJson(item)
    };
  } else if (item is NumberFieldBlock) {
    return {'Kind': "NumberFieldBlock", 'Data': numberFieldBlockToJson(item)};
  } else if (item is OrderedListFieldBlock) {
    return {
      'Kind': "OrderedListFieldBlock",
      'Data': orderedListFieldBlockToJson(item)
    };
  } else if (item is ProofFieldBlock) {
    return {'Kind': "ProofFieldBlock", 'Data': proofFieldBlockToJson(item)};
  } else if (item is RadioFieldBlock) {
    return {'Kind': "RadioFieldBlock", 'Data': radioFieldBlockToJson(item)};
  } else if (item is SignTableBlock) {
    return {'Kind': "SignTableBlock", 'Data': signTableBlockToJson(item)};
  } else if (item is SignTableFieldBlock) {
    return {
      'Kind': "SignTableFieldBlock",
      'Data': signTableFieldBlockToJson(item)
    };
  } else if (item is TableBlock) {
    return {'Kind': "TableBlock", 'Data': tableBlockToJson(item)};
  } else if (item is TableFieldBlock) {
    return {'Kind': "TableFieldBlock", 'Data': tableFieldBlockToJson(item)};
  } else if (item is TextBlock) {
    return {'Kind': "TextBlock", 'Data': textBlockToJson(item)};
  } else if (item is TreeFieldBlock) {
    return {'Kind': "TreeFieldBlock", 'Data': treeFieldBlockToJson(item)};
  } else if (item is VariationTableBlock) {
    return {
      'Kind': "VariationTableBlock",
      'Data': variationTableBlockToJson(item)
    };
  } else if (item is VariationTableFieldBlock) {
    return {
      'Kind': "VariationTableFieldBlock",
      'Data': variationTableFieldBlockToJson(item)
    };
  } else if (item is VectorFieldBlock) {
    return {'Kind': "VectorFieldBlock", 'Data': vectorFieldBlockToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.DoublePointAnswer
class DoublePointAnswer implements Answer {
  final IntCoord from;
  final IntCoord to;

  const DoublePointAnswer(this.from, this.to);

  @override
  String toString() {
    return "DoublePointAnswer($from, $to)";
  }
}

DoublePointAnswer doublePointAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return DoublePointAnswer(
      intCoordFromJson(json['From']), intCoordFromJson(json['To']));
}

Map<String, dynamic> doublePointAnswerToJson(DoublePointAnswer item) {
  return {"From": intCoordToJson(item.from), "To": intCoordToJson(item.to)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.DoublePointPairAnswer
class DoublePointPairAnswer implements Answer {
  final IntCoord from1;
  final IntCoord to1;
  final IntCoord from2;
  final IntCoord to2;

  const DoublePointPairAnswer(this.from1, this.to1, this.from2, this.to2);

  @override
  String toString() {
    return "DoublePointPairAnswer($from1, $to1, $from2, $to2)";
  }
}

DoublePointPairAnswer doublePointPairAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return DoublePointPairAnswer(
      intCoordFromJson(json['From1']),
      intCoordFromJson(json['To1']),
      intCoordFromJson(json['From2']),
      intCoordFromJson(json['To2']));
}

Map<String, dynamic> doublePointPairAnswerToJson(DoublePointPairAnswer item) {
  return {
    "From1": intCoordToJson(item.from1),
    "To1": intCoordToJson(item.to1),
    "From2": intCoordToJson(item.from2),
    "To2": intCoordToJson(item.to2)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.DropDownFieldBlock
class DropDownFieldBlock implements Block {
  final List<TextLine> proposals;
  final int iD;

  const DropDownFieldBlock(this.proposals, this.iD);

  @override
  String toString() {
    return "DropDownFieldBlock($proposals, $iD)";
  }
}

DropDownFieldBlock dropDownFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return DropDownFieldBlock(
      listTextLineFromJson(json['Proposals']), intFromJson(json['ID']));
}

Map<String, dynamic> dropDownFieldBlockToJson(DropDownFieldBlock item) {
  return {
    "Proposals": listTextLineToJson(item.proposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Enonce
typedef Enonce = List<Block>;

Enonce enonceFromJson(dynamic json) {
  return listBlockFromJson(json);
}

dynamic enonceToJson(Enonce item) {
  return listBlockToJson(item);
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Equality
class Equality implements Assertion {
  final List<TextLine> terms;
  final TextLine def;
  final bool withDef;

  const Equality(this.terms, this.def, this.withDef);

  @override
  String toString() {
    return "Equality($terms, $def, $withDef)";
  }
}

Equality equalityFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Equality(listTextLineFromJson(json['Terms']),
      textLineFromJson(json['Def']), boolFromJson(json['WithDef']));
}

Map<String, dynamic> equalityToJson(Equality item) {
  return {
    "Terms": listTextLineToJson(item.terms),
    "Def": textLineToJson(item.def),
    "WithDef": boolToJson(item.withDef)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.ExpressionAnswer
class ExpressionAnswer implements Answer {
  final String expression;

  const ExpressionAnswer(this.expression);

  @override
  String toString() {
    return "ExpressionAnswer($expression)";
  }
}

ExpressionAnswer expressionAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return ExpressionAnswer(stringFromJson(json['Expression']));
}

Map<String, dynamic> expressionAnswerToJson(ExpressionAnswer item) {
  return {"Expression": stringToJson(item.expression)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.ExpressionFieldBlock
class ExpressionFieldBlock implements Block {
  final String label;
  final String suffix;
  final int sizeHint;
  final bool showFractionHelp;
  final int iD;

  const ExpressionFieldBlock(
      this.label, this.suffix, this.sizeHint, this.showFractionHelp, this.iD);

  @override
  String toString() {
    return "ExpressionFieldBlock($label, $suffix, $sizeHint, $showFractionHelp, $iD)";
  }
}

ExpressionFieldBlock expressionFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return ExpressionFieldBlock(
      stringFromJson(json['Label']),
      stringFromJson(json['Suffix']),
      intFromJson(json['SizeHint']),
      boolFromJson(json['ShowFractionHelp']),
      intFromJson(json['ID']));
}

Map<String, dynamic> expressionFieldBlockToJson(ExpressionFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Suffix": stringToJson(item.suffix),
    "SizeHint": intToJson(item.sizeHint),
    "ShowFractionHelp": boolToJson(item.showFractionHelp),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FigureBlock
class FigureBlock implements Block {
  final Figure figure;

  const FigureBlock(this.figure);

  @override
  String toString() {
    return "FigureBlock($figure)";
  }
}

FigureBlock figureBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FigureBlock(figureFromJson(json['Figure']));
}

Map<String, dynamic> figureBlockToJson(FigureBlock item) {
  return {"Figure": figureToJson(item.figure)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FigurePointFieldBlock
class FigurePointFieldBlock implements Block {
  final Figure figure;
  final int iD;

  const FigurePointFieldBlock(this.figure, this.iD);

  @override
  String toString() {
    return "FigurePointFieldBlock($figure, $iD)";
  }
}

FigurePointFieldBlock figurePointFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FigurePointFieldBlock(
      figureFromJson(json['Figure']), intFromJson(json['ID']));
}

Map<String, dynamic> figurePointFieldBlockToJson(FigurePointFieldBlock item) {
  return {"Figure": figureToJson(item.figure), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FigureVectorFieldBlock
class FigureVectorFieldBlock implements Block {
  final String lineLabel;
  final Figure figure;
  final int iD;
  final bool asLine;

  const FigureVectorFieldBlock(
      this.lineLabel, this.figure, this.iD, this.asLine);

  @override
  String toString() {
    return "FigureVectorFieldBlock($lineLabel, $figure, $iD, $asLine)";
  }
}

FigureVectorFieldBlock figureVectorFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FigureVectorFieldBlock(
      stringFromJson(json['LineLabel']),
      figureFromJson(json['Figure']),
      intFromJson(json['ID']),
      boolFromJson(json['AsLine']));
}

Map<String, dynamic> figureVectorFieldBlockToJson(FigureVectorFieldBlock item) {
  return {
    "LineLabel": stringToJson(item.lineLabel),
    "Figure": figureToJson(item.figure),
    "ID": intToJson(item.iD),
    "AsLine": boolToJson(item.asLine)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FigureVectorPairFieldBlock
class FigureVectorPairFieldBlock implements Block {
  final Figure figure;
  final int iD;

  const FigureVectorPairFieldBlock(this.figure, this.iD);

  @override
  String toString() {
    return "FigureVectorPairFieldBlock($figure, $iD)";
  }
}

FigureVectorPairFieldBlock figureVectorPairFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FigureVectorPairFieldBlock(
      figureFromJson(json['Figure']), intFromJson(json['ID']));
}

Map<String, dynamic> figureVectorPairFieldBlockToJson(
    FigureVectorPairFieldBlock item) {
  return {"Figure": figureToJson(item.figure), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FormulaBlock
class FormulaBlock implements Block {
  final String formula;

  const FormulaBlock(this.formula);

  @override
  String toString() {
    return "FormulaBlock($formula)";
  }
}

FormulaBlock formulaBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FormulaBlock(stringFromJson(json['Formula']));
}

Map<String, dynamic> formulaBlockToJson(FormulaBlock item) {
  return {"Formula": stringToJson(item.formula)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FunctionArea
class FunctionArea {
  final ColorHex color;
  final List<BezierCurve> path;

  const FunctionArea(this.color, this.path);

  @override
  String toString() {
    return "FunctionArea($color, $path)";
  }
}

FunctionArea functionAreaFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FunctionArea(
      stringFromJson(json['Color']), listBezierCurveFromJson(json['Path']));
}

Map<String, dynamic> functionAreaToJson(FunctionArea item) {
  return {
    "Color": stringToJson(item.color),
    "Path": listBezierCurveToJson(item.path)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FunctionPoint
class FunctionPoint {
  final ColorHex color;
  final String legend;
  final Coord coord;

  const FunctionPoint(this.color, this.legend, this.coord);

  @override
  String toString() {
    return "FunctionPoint($color, $legend, $coord)";
  }
}

FunctionPoint functionPointFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FunctionPoint(stringFromJson(json['Color']),
      stringFromJson(json['Legend']), coordFromJson(json['Coord']));
}

Map<String, dynamic> functionPointToJson(FunctionPoint item) {
  return {
    "Color": stringToJson(item.color),
    "Legend": stringToJson(item.legend),
    "Coord": coordToJson(item.coord)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FunctionPointsAnswer
class FunctionPointsAnswer implements Answer {
  final List<int> fxs;

  const FunctionPointsAnswer(this.fxs);

  @override
  String toString() {
    return "FunctionPointsAnswer($fxs)";
  }
}

FunctionPointsAnswer functionPointsAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FunctionPointsAnswer(listIntFromJson(json['Fxs']));
}

Map<String, dynamic> functionPointsAnswerToJson(FunctionPointsAnswer item) {
  return {"Fxs": listIntToJson(item.fxs)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FunctionPointsFieldBlock
class FunctionPointsFieldBlock implements Block {
  final String label;
  final List<int> xs;
  final List<double> dfxs;
  final RepereBounds bounds;
  final int iD;

  const FunctionPointsFieldBlock(
      this.label, this.xs, this.dfxs, this.bounds, this.iD);

  @override
  String toString() {
    return "FunctionPointsFieldBlock($label, $xs, $dfxs, $bounds, $iD)";
  }
}

FunctionPointsFieldBlock functionPointsFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FunctionPointsFieldBlock(
      stringFromJson(json['Label']),
      listIntFromJson(json['Xs']),
      listDoubleFromJson(json['Dfxs']),
      repereBoundsFromJson(json['Bounds']),
      intFromJson(json['ID']));
}

Map<String, dynamic> functionPointsFieldBlockToJson(
    FunctionPointsFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Xs": listIntToJson(item.xs),
    "Dfxs": listDoubleToJson(item.dfxs),
    "Bounds": repereBoundsToJson(item.bounds),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.FunctionsGraphBlock
class FunctionsGraphBlock implements Block {
  final List<FunctionGraph> functions;
  final List<FunctionArea> areas;
  final List<FunctionPoint> points;
  final RepereBounds bounds;

  const FunctionsGraphBlock(
      this.functions, this.areas, this.points, this.bounds);

  @override
  String toString() {
    return "FunctionsGraphBlock($functions, $areas, $points, $bounds)";
  }
}

FunctionsGraphBlock functionsGraphBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return FunctionsGraphBlock(
      listFunctionGraphFromJson(json['Functions']),
      listFunctionAreaFromJson(json['Areas']),
      listFunctionPointFromJson(json['Points']),
      repereBoundsFromJson(json['Bounds']));
}

Map<String, dynamic> functionsGraphBlockToJson(FunctionsGraphBlock item) {
  return {
    "Functions": listFunctionGraphToJson(item.functions),
    "Areas": listFunctionAreaToJson(item.areas),
    "Points": listFunctionPointToJson(item.points),
    "Bounds": repereBoundsToJson(item.bounds)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Node
class Node implements Assertion {
  final Assertion left;
  final Assertion right;
  final Binary op;

  const Node(this.left, this.right, this.op);

  @override
  String toString() {
    return "Node($left, $right, $op)";
  }
}

Node nodeFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Node(assertionFromJson(json['Left']), assertionFromJson(json['Right']),
      binaryFromJson(json['Op']));
}

Map<String, dynamic> nodeToJson(Node item) {
  return {
    "Left": assertionToJson(item.left),
    "Right": assertionToJson(item.right),
    "Op": binaryToJson(item.op)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.NumberAnswer
class NumberAnswer implements Answer {
  final double value;

  const NumberAnswer(this.value);

  @override
  String toString() {
    return "NumberAnswer($value)";
  }
}

NumberAnswer numberAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return NumberAnswer(doubleFromJson(json['Value']));
}

Map<String, dynamic> numberAnswerToJson(NumberAnswer item) {
  return {"Value": doubleToJson(item.value)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.NumberFieldBlock
class NumberFieldBlock implements Block {
  final int iD;
  final int sizeHint;

  const NumberFieldBlock(this.iD, this.sizeHint);

  @override
  String toString() {
    return "NumberFieldBlock($iD, $sizeHint)";
  }
}

NumberFieldBlock numberFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return NumberFieldBlock(
      intFromJson(json['ID']), intFromJson(json['SizeHint']));
}

Map<String, dynamic> numberFieldBlockToJson(NumberFieldBlock item) {
  return {"ID": intToJson(item.iD), "SizeHint": intToJson(item.sizeHint)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.OrderedListAnswer
class OrderedListAnswer implements Answer {
  final List<int> indices;

  const OrderedListAnswer(this.indices);

  @override
  String toString() {
    return "OrderedListAnswer($indices)";
  }
}

OrderedListAnswer orderedListAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return OrderedListAnswer(listIntFromJson(json['Indices']));
}

Map<String, dynamic> orderedListAnswerToJson(OrderedListAnswer item) {
  return {"Indices": listIntToJson(item.indices)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.OrderedListFieldBlock
class OrderedListFieldBlock implements Block {
  final String label;
  final List<TextLine> proposals;
  final int answerLength;
  final int iD;

  const OrderedListFieldBlock(
      this.label, this.proposals, this.answerLength, this.iD);

  @override
  String toString() {
    return "OrderedListFieldBlock($label, $proposals, $answerLength, $iD)";
  }
}

OrderedListFieldBlock orderedListFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return OrderedListFieldBlock(
      stringFromJson(json['Label']),
      listTextLineFromJson(json['Proposals']),
      intFromJson(json['AnswerLength']),
      intFromJson(json['ID']));
}

Map<String, dynamic> orderedListFieldBlockToJson(OrderedListFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Proposals": listTextLineToJson(item.proposals),
    "AnswerLength": intToJson(item.answerLength),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.PointAnswer
class PointAnswer implements Answer {
  final IntCoord point;

  const PointAnswer(this.point);

  @override
  String toString() {
    return "PointAnswer($point)";
  }
}

PointAnswer pointAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PointAnswer(intCoordFromJson(json['Point']));
}

Map<String, dynamic> pointAnswerToJson(PointAnswer item) {
  return {"Point": intCoordToJson(item.point)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Proof
class Proof {
  final Sequence root;

  const Proof(this.root);

  @override
  String toString() {
    return "Proof($root)";
  }
}

Proof proofFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Proof(sequenceFromJson(json['Root']));
}

Map<String, dynamic> proofToJson(Proof item) {
  return {"Root": sequenceToJson(item.root)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.ProofAnswer
class ProofAnswer implements Answer {
  final Proof proof;

  const ProofAnswer(this.proof);

  @override
  String toString() {
    return "ProofAnswer($proof)";
  }
}

ProofAnswer proofAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return ProofAnswer(proofFromJson(json['Proof']));
}

Map<String, dynamic> proofAnswerToJson(ProofAnswer item) {
  return {"Proof": proofToJson(item.proof)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.ProofFieldBlock
class ProofFieldBlock implements Block {
  final Proof shape;
  final List<TextLine> termProposals;
  final int iD;

  const ProofFieldBlock(this.shape, this.termProposals, this.iD);

  @override
  String toString() {
    return "ProofFieldBlock($shape, $termProposals, $iD)";
  }
}

ProofFieldBlock proofFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return ProofFieldBlock(proofFromJson(json['Shape']),
      listTextLineFromJson(json['TermProposals']), intFromJson(json['ID']));
}

Map<String, dynamic> proofFieldBlockToJson(ProofFieldBlock item) {
  return {
    "Shape": proofToJson(item.shape),
    "TermProposals": listTextLineToJson(item.termProposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Question
class Question {
  final Enonce enonce;

  const Question(this.enonce);

  @override
  String toString() {
    return "Question($enonce)";
  }
}

Question questionFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Question(enonceFromJson(json['Enonce']));
}

Map<String, dynamic> questionToJson(Question item) {
  return {"Enonce": enonceToJson(item.enonce)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.QuestionAnswersIn
class QuestionAnswersIn {
  final Answers data;

  const QuestionAnswersIn(this.data);

  @override
  String toString() {
    return "QuestionAnswersIn($data)";
  }
}

QuestionAnswersIn questionAnswersInFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return QuestionAnswersIn(answersFromJson(json['Data']));
}

Map<String, dynamic> questionAnswersInToJson(QuestionAnswersIn item) {
  return {"Data": answersToJson(item.data)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.QuestionAnswersOut
class QuestionAnswersOut {
  final Map<int, bool> results;
  final Answers expectedAnswers;

  const QuestionAnswersOut(this.results, this.expectedAnswers);

  @override
  String toString() {
    return "QuestionAnswersOut($results, $expectedAnswers)";
  }
}

QuestionAnswersOut questionAnswersOutFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return QuestionAnswersOut(dictIntToBoolFromJson(json['Results']),
      answersFromJson(json['ExpectedAnswers']));
}

Map<String, dynamic> questionAnswersOutToJson(QuestionAnswersOut item) {
  return {
    "Results": dictIntToBoolToJson(item.results),
    "ExpectedAnswers": answersToJson(item.expectedAnswers)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.QuestionSyntaxCheckIn
class QuestionSyntaxCheckIn {
  final Answer answer;
  final int iD;

  const QuestionSyntaxCheckIn(this.answer, this.iD);

  @override
  String toString() {
    return "QuestionSyntaxCheckIn($answer, $iD)";
  }
}

QuestionSyntaxCheckIn questionSyntaxCheckInFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return QuestionSyntaxCheckIn(
      answerFromJson(json['Answer']), intFromJson(json['ID']));
}

Map<String, dynamic> questionSyntaxCheckInToJson(QuestionSyntaxCheckIn item) {
  return {"Answer": answerToJson(item.answer), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.QuestionSyntaxCheckOut
class QuestionSyntaxCheckOut {
  final String reason;
  final int iD;
  final bool isValid;

  const QuestionSyntaxCheckOut(this.reason, this.iD, this.isValid);

  @override
  String toString() {
    return "QuestionSyntaxCheckOut($reason, $iD, $isValid)";
  }
}

QuestionSyntaxCheckOut questionSyntaxCheckOutFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return QuestionSyntaxCheckOut(stringFromJson(json['Reason']),
      intFromJson(json['ID']), boolFromJson(json['IsValid']));
}

Map<String, dynamic> questionSyntaxCheckOutToJson(QuestionSyntaxCheckOut item) {
  return {
    "Reason": stringToJson(item.reason),
    "ID": intToJson(item.iD),
    "IsValid": boolToJson(item.isValid)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.RadioAnswer
class RadioAnswer implements Answer {
  final int index;

  const RadioAnswer(this.index);

  @override
  String toString() {
    return "RadioAnswer($index)";
  }
}

RadioAnswer radioAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return RadioAnswer(intFromJson(json['Index']));
}

Map<String, dynamic> radioAnswerToJson(RadioAnswer item) {
  return {"Index": intToJson(item.index)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.RadioFieldBlock
class RadioFieldBlock implements Block {
  final List<TextLine> proposals;
  final int iD;

  const RadioFieldBlock(this.proposals, this.iD);

  @override
  String toString() {
    return "RadioFieldBlock($proposals, $iD)";
  }
}

RadioFieldBlock radioFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return RadioFieldBlock(
      listTextLineFromJson(json['Proposals']), intFromJson(json['ID']));
}

Map<String, dynamic> radioFieldBlockToJson(RadioFieldBlock item) {
  return {
    "Proposals": listTextLineToJson(item.proposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Sequence
class Sequence implements Assertion {
  final Assertions parts;

  const Sequence(this.parts);

  @override
  String toString() {
    return "Sequence($parts)";
  }
}

Sequence sequenceFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Sequence(assertionsFromJson(json['Parts']));
}

Map<String, dynamic> sequenceToJson(Sequence item) {
  return {"Parts": assertionsToJson(item.parts)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.SignColumn
class SignColumn {
  final String x;
  final bool isYForbiddenValue;
  final bool isSign;
  final bool isPositive;

  const SignColumn(
      this.x, this.isYForbiddenValue, this.isSign, this.isPositive);

  @override
  String toString() {
    return "SignColumn($x, $isYForbiddenValue, $isSign, $isPositive)";
  }
}

SignColumn signColumnFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return SignColumn(
      stringFromJson(json['X']),
      boolFromJson(json['IsYForbiddenValue']),
      boolFromJson(json['IsSign']),
      boolFromJson(json['IsPositive']));
}

Map<String, dynamic> signColumnToJson(SignColumn item) {
  return {
    "X": stringToJson(item.x),
    "IsYForbiddenValue": boolToJson(item.isYForbiddenValue),
    "IsSign": boolToJson(item.isSign),
    "IsPositive": boolToJson(item.isPositive)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.SignSymbol
enum SignSymbol { nothing, zero, forbiddenValue }

extension _SignSymbolExt on SignSymbol {
  static SignSymbol fromValue(int i) {
    return SignSymbol.values[i];
  }

  int toValue() {
    return index;
  }
}

SignSymbol signSymbolFromJson(dynamic json) =>
    _SignSymbolExt.fromValue(json as int);

dynamic signSymbolToJson(SignSymbol item) => item.toValue();

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.SignTableAnswer
class SignTableAnswer implements Answer {
  final List<String> xs;
  final List<SignSymbol> fxSymbols;
  final List<bool> signs;

  const SignTableAnswer(this.xs, this.fxSymbols, this.signs);

  @override
  String toString() {
    return "SignTableAnswer($xs, $fxSymbols, $signs)";
  }
}

SignTableAnswer signTableAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return SignTableAnswer(
      listStringFromJson(json['Xs']),
      listSignSymbolFromJson(json['FxSymbols']),
      listBoolFromJson(json['Signs']));
}

Map<String, dynamic> signTableAnswerToJson(SignTableAnswer item) {
  return {
    "Xs": listStringToJson(item.xs),
    "FxSymbols": listSignSymbolToJson(item.fxSymbols),
    "Signs": listBoolToJson(item.signs)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.SignTableBlock
class SignTableBlock implements Block {
  final String label;
  final List<SignColumn> columns;

  const SignTableBlock(this.label, this.columns);

  @override
  String toString() {
    return "SignTableBlock($label, $columns)";
  }
}

SignTableBlock signTableBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return SignTableBlock(
      stringFromJson(json['Label']), listSignColumnFromJson(json['Columns']));
}

Map<String, dynamic> signTableBlockToJson(SignTableBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Columns": listSignColumnToJson(item.columns)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.SignTableFieldBlock
class SignTableFieldBlock implements Block {
  final String label;
  final List<int> lengthProposals;
  final int iD;

  const SignTableFieldBlock(this.label, this.lengthProposals, this.iD);

  @override
  String toString() {
    return "SignTableFieldBlock($label, $lengthProposals, $iD)";
  }
}

SignTableFieldBlock signTableFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return SignTableFieldBlock(stringFromJson(json['Label']),
      listIntFromJson(json['LengthProposals']), intFromJson(json['ID']));
}

Map<String, dynamic> signTableFieldBlockToJson(SignTableFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "LengthProposals": listIntToJson(item.lengthProposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.Statement
class Statement implements Assertion {
  final TextLine content;

  const Statement(this.content);

  @override
  String toString() {
    return "Statement($content)";
  }
}

Statement statementFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Statement(textLineFromJson(json['Content']));
}

Map<String, dynamic> statementToJson(Statement item) {
  return {"Content": textLineToJson(item.content)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TableAnswer
class TableAnswer implements Answer {
  final List<List<double>> rows;

  const TableAnswer(this.rows);

  @override
  String toString() {
    return "TableAnswer($rows)";
  }
}

TableAnswer tableAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return TableAnswer(listListDoubleFromJson(json['Rows']));
}

Map<String, dynamic> tableAnswerToJson(TableAnswer item) {
  return {"Rows": listListDoubleToJson(item.rows)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TableBlock
class TableBlock implements Block {
  final List<TextOrMath> horizontalHeaders;
  final List<TextOrMath> verticalHeaders;
  final List<List<TextOrMath>> values;

  const TableBlock(this.horizontalHeaders, this.verticalHeaders, this.values);

  @override
  String toString() {
    return "TableBlock($horizontalHeaders, $verticalHeaders, $values)";
  }
}

TableBlock tableBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return TableBlock(
      listTextOrMathFromJson(json['HorizontalHeaders']),
      listTextOrMathFromJson(json['VerticalHeaders']),
      listListTextOrMathFromJson(json['Values']));
}

Map<String, dynamic> tableBlockToJson(TableBlock item) {
  return {
    "HorizontalHeaders": listTextOrMathToJson(item.horizontalHeaders),
    "VerticalHeaders": listTextOrMathToJson(item.verticalHeaders),
    "Values": listListTextOrMathToJson(item.values)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TableFieldBlock
class TableFieldBlock implements Block {
  final List<TextOrMath> horizontalHeaders;
  final List<TextOrMath> verticalHeaders;
  final int iD;

  const TableFieldBlock(this.horizontalHeaders, this.verticalHeaders, this.iD);

  @override
  String toString() {
    return "TableFieldBlock($horizontalHeaders, $verticalHeaders, $iD)";
  }
}

TableFieldBlock tableFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return TableFieldBlock(listTextOrMathFromJson(json['HorizontalHeaders']),
      listTextOrMathFromJson(json['VerticalHeaders']), intFromJson(json['ID']));
}

Map<String, dynamic> tableFieldBlockToJson(TableFieldBlock item) {
  return {
    "HorizontalHeaders": listTextOrMathToJson(item.horizontalHeaders),
    "VerticalHeaders": listTextOrMathToJson(item.verticalHeaders),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TextBlock
class TextBlock implements Block {
  final TextLine parts;
  final bool bold;
  final bool italic;
  final bool smaller;

  const TextBlock(this.parts, this.bold, this.italic, this.smaller);

  @override
  String toString() {
    return "TextBlock($parts, $bold, $italic, $smaller)";
  }
}

TextBlock textBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return TextBlock(textLineFromJson(json['Parts']), boolFromJson(json['Bold']),
      boolFromJson(json['Italic']), boolFromJson(json['Smaller']));
}

Map<String, dynamic> textBlockToJson(TextBlock item) {
  return {
    "Parts": textLineToJson(item.parts),
    "Bold": boolToJson(item.bold),
    "Italic": boolToJson(item.italic),
    "Smaller": boolToJson(item.smaller)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TextLine
typedef TextLine = List<TextOrMath>;

TextLine textLineFromJson(dynamic json) {
  return listTextOrMathFromJson(json);
}

dynamic textLineToJson(TextLine item) {
  return listTextOrMathToJson(item);
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TextOrMath
class TextOrMath {
  final String text;
  final bool isMath;

  const TextOrMath(this.text, this.isMath);

  @override
  String toString() {
    return "TextOrMath($text, $isMath)";
  }
}

TextOrMath textOrMathFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return TextOrMath(stringFromJson(json['Text']), boolFromJson(json['IsMath']));
}

Map<String, dynamic> textOrMathToJson(TextOrMath item) {
  return {"Text": stringToJson(item.text), "IsMath": boolToJson(item.isMath)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TreeAnswer
class TreeAnswer implements Answer {
  final TreeNodeAnswer root;

  const TreeAnswer(this.root);

  @override
  String toString() {
    return "TreeAnswer($root)";
  }
}

TreeAnswer treeAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return TreeAnswer(treeNodeAnswerFromJson(json['Root']));
}

Map<String, dynamic> treeAnswerToJson(TreeAnswer item) {
  return {"Root": treeNodeAnswerToJson(item.root)};
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TreeFieldBlock
class TreeFieldBlock implements Block {
  final List<TreeShape> shapeProposals;
  final List<TextOrMath> eventsProposals;
  final int iD;

  const TreeFieldBlock(this.shapeProposals, this.eventsProposals, this.iD);

  @override
  String toString() {
    return "TreeFieldBlock($shapeProposals, $eventsProposals, $iD)";
  }
}

TreeFieldBlock treeFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return TreeFieldBlock(listTreeShapeFromJson(json['ShapeProposals']),
      listTextOrMathFromJson(json['EventsProposals']), intFromJson(json['ID']));
}

Map<String, dynamic> treeFieldBlockToJson(TreeFieldBlock item) {
  return {
    "ShapeProposals": listTreeShapeToJson(item.shapeProposals),
    "EventsProposals": listTextOrMathToJson(item.eventsProposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TreeNodeAnswer
class TreeNodeAnswer {
  final List<TreeNodeAnswer> children;
  final List<double> probabilities;
  final int value;

  const TreeNodeAnswer(this.children, this.probabilities, this.value);

  @override
  String toString() {
    return "TreeNodeAnswer($children, $probabilities, $value)";
  }
}

TreeNodeAnswer treeNodeAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return TreeNodeAnswer(listTreeNodeAnswerFromJson(json['Children']),
      listDoubleFromJson(json['Probabilities']), intFromJson(json['Value']));
}

Map<String, dynamic> treeNodeAnswerToJson(TreeNodeAnswer item) {
  return {
    "Children": listTreeNodeAnswerToJson(item.children),
    "Probabilities": listDoubleToJson(item.probabilities),
    "Value": intToJson(item.value)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.TreeShape
typedef TreeShape = List<int>;

TreeShape treeShapeFromJson(dynamic json) {
  return listIntFromJson(json);
}

dynamic treeShapeToJson(TreeShape item) {
  return listIntToJson(item);
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.VariationColumnNumber
class VariationColumnNumber {
  final String x;
  final String y;
  final bool isUp;

  const VariationColumnNumber(this.x, this.y, this.isUp);

  @override
  String toString() {
    return "VariationColumnNumber($x, $y, $isUp)";
  }
}

VariationColumnNumber variationColumnNumberFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return VariationColumnNumber(stringFromJson(json['X']),
      stringFromJson(json['Y']), boolFromJson(json['IsUp']));
}

Map<String, dynamic> variationColumnNumberToJson(VariationColumnNumber item) {
  return {
    "X": stringToJson(item.x),
    "Y": stringToJson(item.y),
    "IsUp": boolToJson(item.isUp)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.VariationTableAnswer
class VariationTableAnswer implements Answer {
  final List<String> xs;
  final List<String> fxs;
  final List<bool> arrows;

  const VariationTableAnswer(this.xs, this.fxs, this.arrows);

  @override
  String toString() {
    return "VariationTableAnswer($xs, $fxs, $arrows)";
  }
}

VariationTableAnswer variationTableAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return VariationTableAnswer(listStringFromJson(json['Xs']),
      listStringFromJson(json['Fxs']), listBoolFromJson(json['Arrows']));
}

Map<String, dynamic> variationTableAnswerToJson(VariationTableAnswer item) {
  return {
    "Xs": listStringToJson(item.xs),
    "Fxs": listStringToJson(item.fxs),
    "Arrows": listBoolToJson(item.arrows)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.VariationTableBlock
class VariationTableBlock implements Block {
  final String label;
  final List<VariationColumnNumber> columns;
  final List<bool> arrows;

  const VariationTableBlock(this.label, this.columns, this.arrows);

  @override
  String toString() {
    return "VariationTableBlock($label, $columns, $arrows)";
  }
}

VariationTableBlock variationTableBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return VariationTableBlock(
      stringFromJson(json['Label']),
      listVariationColumnNumberFromJson(json['Columns']),
      listBoolFromJson(json['Arrows']));
}

Map<String, dynamic> variationTableBlockToJson(VariationTableBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Columns": listVariationColumnNumberToJson(item.columns),
    "Arrows": listBoolToJson(item.arrows)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.VariationTableFieldBlock
class VariationTableFieldBlock implements Block {
  final String label;
  final List<int> lengthProposals;
  final int iD;

  const VariationTableFieldBlock(this.label, this.lengthProposals, this.iD);

  @override
  String toString() {
    return "VariationTableFieldBlock($label, $lengthProposals, $iD)";
  }
}

VariationTableFieldBlock variationTableFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return VariationTableFieldBlock(stringFromJson(json['Label']),
      listIntFromJson(json['LengthProposals']), intFromJson(json['ID']));
}

Map<String, dynamic> variationTableFieldBlockToJson(
    VariationTableFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "LengthProposals": listIntToJson(item.lengthProposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.VectorFieldBlock
class VectorFieldBlock implements Block {
  final int iD;
  final bool displayColumn;
  final int sizeHintX;
  final int sizeHintY;

  const VectorFieldBlock(
      this.iD, this.displayColumn, this.sizeHintX, this.sizeHintY);

  @override
  String toString() {
    return "VectorFieldBlock($iD, $displayColumn, $sizeHintX, $sizeHintY)";
  }
}

VectorFieldBlock vectorFieldBlockFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return VectorFieldBlock(
      intFromJson(json['ID']),
      boolFromJson(json['DisplayColumn']),
      intFromJson(json['SizeHintX']),
      intFromJson(json['SizeHintY']));
}

Map<String, dynamic> vectorFieldBlockToJson(VectorFieldBlock item) {
  return {
    "ID": intToJson(item.iD),
    "DisplayColumn": boolToJson(item.displayColumn),
    "SizeHintX": intToJson(item.sizeHintX),
    "SizeHintY": intToJson(item.sizeHintY)
  };
}

// github.com/benoitkugler/maths-online/server/src/maths/questions/client.VectorNumberAnswer
class VectorNumberAnswer implements Answer {
  final double x;
  final double y;

  const VectorNumberAnswer(this.x, this.y);

  @override
  String toString() {
    return "VectorNumberAnswer($x, $y)";
  }
}

VectorNumberAnswer vectorNumberAnswerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return VectorNumberAnswer(
      doubleFromJson(json['X']), doubleFromJson(json['Y']));
}

Map<String, dynamic> vectorNumberAnswerToJson(VectorNumberAnswer item) {
  return {"X": doubleToJson(item.x), "Y": doubleToJson(item.y)};
}

Map<int, Answer> dictIntToAnswerFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as Map<String, dynamic>)
      .map((k, v) => MapEntry(int.parse(k), answerFromJson(v)));
}

Map<String, dynamic> dictIntToAnswerToJson(Map<int, Answer> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), answerToJson(v)));
}

Map<int, bool> dictIntToBoolFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as Map<String, dynamic>)
      .map((k, v) => MapEntry(int.parse(k), boolFromJson(v)));
}

Map<String, dynamic> dictIntToBoolToJson(Map<int, bool> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), boolToJson(v)));
}

List<Assertion> listAssertionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(assertionFromJson).toList();
}

List<dynamic> listAssertionToJson(List<Assertion> item) {
  return item.map(assertionToJson).toList();
}

List<BezierCurve> listBezierCurveFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(bezierCurveFromJson).toList();
}

List<dynamic> listBezierCurveToJson(List<BezierCurve> item) {
  return item.map(bezierCurveToJson).toList();
}

List<Block> listBlockFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(blockFromJson).toList();
}

List<dynamic> listBlockToJson(List<Block> item) {
  return item.map(blockToJson).toList();
}

List<bool> listBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(boolFromJson).toList();
}

List<dynamic> listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

List<double> listDoubleFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(doubleFromJson).toList();
}

List<dynamic> listDoubleToJson(List<double> item) {
  return item.map(doubleToJson).toList();
}

List<FunctionArea> listFunctionAreaFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(functionAreaFromJson).toList();
}

List<dynamic> listFunctionAreaToJson(List<FunctionArea> item) {
  return item.map(functionAreaToJson).toList();
}

List<FunctionGraph> listFunctionGraphFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(functionGraphFromJson).toList();
}

List<dynamic> listFunctionGraphToJson(List<FunctionGraph> item) {
  return item.map(functionGraphToJson).toList();
}

List<FunctionPoint> listFunctionPointFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(functionPointFromJson).toList();
}

List<dynamic> listFunctionPointToJson(List<FunctionPoint> item) {
  return item.map(functionPointToJson).toList();
}

List<int> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<int> item) {
  return item.map(intToJson).toList();
}

List<List<double>> listListDoubleFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listDoubleFromJson).toList();
}

List<dynamic> listListDoubleToJson(List<List<double>> item) {
  return item.map(listDoubleToJson).toList();
}

List<List<TextOrMath>> listListTextOrMathFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listTextOrMathFromJson).toList();
}

List<dynamic> listListTextOrMathToJson(List<List<TextOrMath>> item) {
  return item.map(listTextOrMathToJson).toList();
}

List<SignColumn> listSignColumnFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(signColumnFromJson).toList();
}

List<dynamic> listSignColumnToJson(List<SignColumn> item) {
  return item.map(signColumnToJson).toList();
}

List<SignSymbol> listSignSymbolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(signSymbolFromJson).toList();
}

List<dynamic> listSignSymbolToJson(List<SignSymbol> item) {
  return item.map(signSymbolToJson).toList();
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}

List<TextLine> listTextLineFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(textLineFromJson).toList();
}

List<dynamic> listTextLineToJson(List<TextLine> item) {
  return item.map(textLineToJson).toList();
}

List<TextOrMath> listTextOrMathFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(textOrMathFromJson).toList();
}

List<dynamic> listTextOrMathToJson(List<TextOrMath> item) {
  return item.map(textOrMathToJson).toList();
}

List<TreeNodeAnswer> listTreeNodeAnswerFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(treeNodeAnswerFromJson).toList();
}

List<dynamic> listTreeNodeAnswerToJson(List<TreeNodeAnswer> item) {
  return item.map(treeNodeAnswerToJson).toList();
}

List<TreeShape> listTreeShapeFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(treeShapeFromJson).toList();
}

List<dynamic> listTreeShapeToJson(List<TreeShape> item) {
  return item.map(treeShapeToJson).toList();
}

List<VariationColumnNumber> listVariationColumnNumberFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(variationColumnNumberFromJson).toList();
}

List<dynamic> listVariationColumnNumberToJson(
    List<VariationColumnNumber> item) {
  return item.map(variationColumnNumberToJson).toList();
}
