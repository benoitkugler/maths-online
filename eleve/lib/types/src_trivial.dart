// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'predefined.dart';
import 'src_maths_questions_client.dart';
import 'src_sql_editor.dart';
import 'src_sql_events.dart';

// github.com/benoitkugler/maths-online/server/src/trivial.Answer
class Answer implements ClientEventITF {
  final QuestionAnswersIn answer;

  const Answer(this.answer);

  @override
  String toString() {
    return "Answer($answer)";
  }
}

Answer answerFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Answer(questionAnswersInFromJson(json['Answer']));
}

Map<String, dynamic> answerToJson(Answer item) {
  return {"Answer": questionAnswersInToJson(item.answer)};
}

// github.com/benoitkugler/maths-online/server/src/trivial.Categorie
enum Categorie { purple, green, orange, yellow, blue }

extension _CategorieExt on Categorie {
  static Categorie fromValue(int i) {
    return Categorie.values[i];
  }

  int toValue() {
    return index;
  }
}

String categorieLabel(Categorie v) {
  switch (v) {
    case Categorie.purple:
      return "purple";
    case Categorie.green:
      return "green";
    case Categorie.orange:
      return "orange";
    case Categorie.yellow:
      return "yellow";
    case Categorie.blue:
      return "blue";
  }
}

Categorie categorieFromJson(dynamic json) =>
    _CategorieExt.fromValue(json as int);

dynamic categorieToJson(Categorie item) => item.toValue();

/// github.com/benoitkugler/maths-online/server/src/trivial.ClientEventITF
abstract class ClientEventITF {}

ClientEventITF clientEventITFFromJson(dynamic json_) {
  final json = json_ as Map<String, dynamic>;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "Answer":
      return answerFromJson(data);
    case "ClientMove":
      return clientMoveFromJson(data);
    case "DiceClicked":
      return diceClickedFromJson(data);
    case "Ping":
      return pingFromJson(data);
    case "WantNextTurn":
      return wantNextTurnFromJson(data);
    default:
      throw ("unexpected type");
  }
}

Map<String, dynamic> clientEventITFToJson(ClientEventITF item) {
  if (item is Answer) {
    return {'Kind': "Answer", 'Data': answerToJson(item)};
  } else if (item is ClientMove) {
    return {'Kind': "ClientMove", 'Data': clientMoveToJson(item)};
  } else if (item is DiceClicked) {
    return {'Kind': "DiceClicked", 'Data': diceClickedToJson(item)};
  } else if (item is Ping) {
    return {'Kind': "Ping", 'Data': pingToJson(item)};
  } else if (item is WantNextTurn) {
    return {'Kind': "WantNextTurn", 'Data': wantNextTurnToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/server/src/trivial.ClientMove
class ClientMove implements ClientEventITF {
  final List<int> path;
  final int tile;

  const ClientMove(this.path, this.tile);

  @override
  String toString() {
    return "ClientMove($path, $tile)";
  }
}

ClientMove clientMoveFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return ClientMove(listIntFromJson(json['Path']), intFromJson(json['Tile']));
}

Map<String, dynamic> clientMoveToJson(ClientMove item) {
  return {"Path": listIntToJson(item.path), "Tile": intToJson(item.tile)};
}

// github.com/benoitkugler/maths-online/server/src/trivial.DiceClicked
class DiceClicked implements ClientEventITF {
  const DiceClicked();

  @override
  String toString() {
    return "DiceClicked()";
  }
}

DiceClicked diceClickedFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return DiceClicked();
}

Map<String, dynamic> diceClickedToJson(DiceClicked item) {
  return {};
}

// github.com/benoitkugler/maths-online/server/src/trivial.DiceThrow
class DiceThrow implements ServerEvent {
  final int face;

  const DiceThrow(this.face);

  @override
  String toString() {
    return "DiceThrow($face)";
  }
}

DiceThrow diceThrowFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return DiceThrow(intFromJson(json['Face']));
}

Map<String, dynamic> diceThrowToJson(DiceThrow item) {
  return {"Face": intToJson(item.face)};
}

// github.com/benoitkugler/maths-online/server/src/trivial.Events
typedef Events = List<ServerEvent>;

Events eventsFromJson(dynamic json) {
  return listServerEventFromJson(json);
}

dynamic eventsToJson(Events item) {
  return listServerEventToJson(item);
}

// github.com/benoitkugler/maths-online/server/src/trivial.GameEnd
class GameEnd implements ServerEvent {
  final Map<PlayerID, List<IdQuestion>> questionDecrassageIds;
  final List<PlayerID> winners;
  final List<String> winnerNames;
  final Map<PlayerID, EventNotification> advances;

  const GameEnd(this.questionDecrassageIds, this.winners, this.winnerNames,
      this.advances);

  @override
  String toString() {
    return "GameEnd($questionDecrassageIds, $winners, $winnerNames, $advances)";
  }
}

GameEnd gameEndFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return GameEnd(
      dictStringToListIntFromJson(json['QuestionDecrassageIds']),
      listStringFromJson(json['Winners']),
      listStringFromJson(json['WinnerNames']),
      dictStringToEventNotificationFromJson(json['Advances']));
}

Map<String, dynamic> gameEndToJson(GameEnd item) {
  return {
    "QuestionDecrassageIds":
        dictStringToListIntToJson(item.questionDecrassageIds),
    "Winners": listStringToJson(item.winners),
    "WinnerNames": listStringToJson(item.winnerNames),
    "Advances": dictStringToEventNotificationToJson(item.advances)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.GameStart
class GameStart implements ServerEvent {
  const GameStart();

  @override
  String toString() {
    return "GameStart()";
  }
}

GameStart gameStartFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return GameStart();
}

Map<String, dynamic> gameStartToJson(GameStart item) {
  return {};
}

// github.com/benoitkugler/maths-online/server/src/trivial.GameState
class GameState {
  final Map<PlayerID, PlayerStatus> players;
  final int pawnTile;
  final PlayerID playerTurn;

  const GameState(this.players, this.pawnTile, this.playerTurn);

  @override
  String toString() {
    return "GameState($players, $pawnTile, $playerTurn)";
  }
}

GameState gameStateFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return GameState(dictStringToPlayerStatusFromJson(json['Players']),
      intFromJson(json['PawnTile']), stringFromJson(json['PlayerTurn']));
}

Map<String, dynamic> gameStateToJson(GameState item) {
  return {
    "Players": dictStringToPlayerStatusToJson(item.players),
    "PawnTile": intToJson(item.pawnTile),
    "PlayerTurn": stringToJson(item.playerTurn)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.GameTerminated
class GameTerminated implements ServerEvent {
  const GameTerminated();

  @override
  String toString() {
    return "GameTerminated()";
  }
}

GameTerminated gameTerminatedFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return GameTerminated();
}

Map<String, dynamic> gameTerminatedToJson(GameTerminated item) {
  return {};
}

// github.com/benoitkugler/maths-online/server/src/trivial.LobbyUpdate
class LobbyUpdate implements ServerEvent {
  final Map<PlayerID, String> playerPseudos;
  final String pseudo;
  final PlayerID iD;
  final bool isJoining;

  const LobbyUpdate(this.playerPseudos, this.pseudo, this.iD, this.isJoining);

  @override
  String toString() {
    return "LobbyUpdate($playerPseudos, $pseudo, $iD, $isJoining)";
  }
}

LobbyUpdate lobbyUpdateFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return LobbyUpdate(
      dictStringToStringFromJson(json['PlayerPseudos']),
      stringFromJson(json['Pseudo']),
      stringFromJson(json['ID']),
      boolFromJson(json['IsJoining']));
}

Map<String, dynamic> lobbyUpdateToJson(LobbyUpdate item) {
  return {
    "PlayerPseudos": dictStringToStringToJson(item.playerPseudos),
    "Pseudo": stringToJson(item.pseudo),
    "ID": stringToJson(item.iD),
    "IsJoining": boolToJson(item.isJoining)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.Move
class Move implements ServerEvent {
  final List<int> path;
  final int tile;

  const Move(this.path, this.tile);

  @override
  String toString() {
    return "Move($path, $tile)";
  }
}

Move moveFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Move(listIntFromJson(json['Path']), intFromJson(json['Tile']));
}

Map<String, dynamic> moveToJson(Move item) {
  return {"Path": listIntToJson(item.path), "Tile": intToJson(item.tile)};
}

// github.com/benoitkugler/maths-online/server/src/trivial.Ping
class Ping implements ClientEventITF {
  final String info;

  const Ping(this.info);

  @override
  String toString() {
    return "Ping($info)";
  }
}

Ping pingFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return Ping(stringFromJson(json['Info']));
}

Map<String, dynamic> pingToJson(Ping item) {
  return {"Info": stringToJson(item.info)};
}

// github.com/benoitkugler/maths-online/server/src/trivial.playerAnswerResult
class PlayerAnswerResult {
  final bool success;
  final bool askForMask;

  const PlayerAnswerResult(this.success, this.askForMask);

  @override
  String toString() {
    return "PlayerAnswerResult($success, $askForMask)";
  }
}

PlayerAnswerResult playerAnswerResultFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PlayerAnswerResult(
      boolFromJson(json['Success']), boolFromJson(json['AskForMask']));
}

Map<String, dynamic> playerAnswerResultToJson(PlayerAnswerResult item) {
  return {
    "Success": boolToJson(item.success),
    "AskForMask": boolToJson(item.askForMask)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.PlayerAnswerResults
class PlayerAnswerResults implements ServerEvent {
  final Categorie categorie;
  final Map<PlayerID, PlayerAnswerResult> results;
  final Map<PlayerID, EventNotification> advances;

  const PlayerAnswerResults(this.categorie, this.results, this.advances);

  @override
  String toString() {
    return "PlayerAnswerResults($categorie, $results, $advances)";
  }
}

PlayerAnswerResults playerAnswerResultsFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PlayerAnswerResults(
      categorieFromJson(json['Categorie']),
      dictStringToPlayerAnswerResultFromJson(json['Results']),
      dictStringToEventNotificationFromJson(json['Advances']));
}

Map<String, dynamic> playerAnswerResultsToJson(PlayerAnswerResults item) {
  return {
    "Categorie": categorieToJson(item.categorie),
    "Results": dictStringToPlayerAnswerResultToJson(item.results),
    "Advances": dictStringToEventNotificationToJson(item.advances)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.PlayerID
typedef PlayerID = String;

// github.com/benoitkugler/maths-online/server/src/trivial.PlayerJoin
class PlayerJoin implements ServerEvent {
  final PlayerID player;

  const PlayerJoin(this.player);

  @override
  String toString() {
    return "PlayerJoin($player)";
  }
}

PlayerJoin playerJoinFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PlayerJoin(stringFromJson(json['Player']));
}

Map<String, dynamic> playerJoinToJson(PlayerJoin item) {
  return {"Player": stringToJson(item.player)};
}

// github.com/benoitkugler/maths-online/server/src/trivial.PlayerLeft
class PlayerLeft implements ServerEvent {
  final PlayerID player;

  const PlayerLeft(this.player);

  @override
  String toString() {
    return "PlayerLeft($player)";
  }
}

PlayerLeft playerLeftFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PlayerLeft(stringFromJson(json['Player']));
}

Map<String, dynamic> playerLeftToJson(PlayerLeft item) {
  return {"Player": stringToJson(item.player)};
}

// github.com/benoitkugler/maths-online/server/src/trivial.PlayerReconnected
class PlayerReconnected implements ServerEvent {
  final PlayerID iD;
  final String pseudo;

  const PlayerReconnected(this.iD, this.pseudo);

  @override
  String toString() {
    return "PlayerReconnected($iD, $pseudo)";
  }
}

PlayerReconnected playerReconnectedFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PlayerReconnected(
      stringFromJson(json['ID']), stringFromJson(json['Pseudo']));
}

Map<String, dynamic> playerReconnectedToJson(PlayerReconnected item) {
  return {"ID": stringToJson(item.iD), "Pseudo": stringToJson(item.pseudo)};
}

// github.com/benoitkugler/maths-online/server/src/trivial.PlayerStatus
class PlayerStatus {
  final String name;
  final QuestionReview review;
  final Success success;
  final bool isInactive;

  const PlayerStatus(this.name, this.review, this.success, this.isInactive);

  @override
  String toString() {
    return "PlayerStatus($name, $review, $success, $isInactive)";
  }
}

PlayerStatus playerStatusFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PlayerStatus(
      stringFromJson(json['Name']),
      questionReviewFromJson(json['Review']),
      successFromJson(json['Success']),
      boolFromJson(json['IsInactive']));
}

Map<String, dynamic> playerStatusToJson(PlayerStatus item) {
  return {
    "Name": stringToJson(item.name),
    "Review": questionReviewToJson(item.review),
    "Success": successToJson(item.success),
    "IsInactive": boolToJson(item.isInactive)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.PlayerTurn
class PlayerTurn implements ServerEvent {
  final String playerName;
  final PlayerID player;

  const PlayerTurn(this.playerName, this.player);

  @override
  String toString() {
    return "PlayerTurn($playerName, $player)";
  }
}

PlayerTurn playerTurnFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PlayerTurn(
      stringFromJson(json['PlayerName']), stringFromJson(json['Player']));
}

Map<String, dynamic> playerTurnToJson(PlayerTurn item) {
  return {
    "PlayerName": stringToJson(item.playerName),
    "Player": stringToJson(item.player)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.PlayersStillInQuestionResult
class PlayersStillInQuestionResult implements ServerEvent {
  final List<PlayerID> players;
  final List<String> playerNames;

  const PlayersStillInQuestionResult(this.players, this.playerNames);

  @override
  String toString() {
    return "PlayersStillInQuestionResult($players, $playerNames)";
  }
}

PlayersStillInQuestionResult playersStillInQuestionResultFromJson(
    dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PlayersStillInQuestionResult(listStringFromJson(json['Players']),
      listStringFromJson(json['PlayerNames']));
}

Map<String, dynamic> playersStillInQuestionResultToJson(
    PlayersStillInQuestionResult item) {
  return {
    "Players": listStringToJson(item.players),
    "PlayerNames": listStringToJson(item.playerNames)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.PossibleMoves
class PossibleMoves implements ServerEvent {
  final String playerName;
  final List<int> tiles;
  final PlayerID player;

  const PossibleMoves(this.playerName, this.tiles, this.player);

  @override
  String toString() {
    return "PossibleMoves($playerName, $tiles, $player)";
  }
}

PossibleMoves possibleMovesFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return PossibleMoves(stringFromJson(json['PlayerName']),
      listIntFromJson(json['Tiles']), stringFromJson(json['Player']));
}

Map<String, dynamic> possibleMovesToJson(PossibleMoves item) {
  return {
    "PlayerName": stringToJson(item.playerName),
    "Tiles": listIntToJson(item.tiles),
    "Player": stringToJson(item.player)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.QR
class QR {
  final IdQuestion idQuestion;
  final bool success;

  const QR(this.idQuestion, this.success);

  @override
  String toString() {
    return "QR($idQuestion, $success)";
  }
}

QR qRFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return QR(intFromJson(json['IdQuestion']), boolFromJson(json['Success']));
}

Map<String, dynamic> qRToJson(QR item) {
  return {
    "IdQuestion": intToJson(item.idQuestion),
    "Success": boolToJson(item.success)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.QuestionReview
class QuestionReview {
  final List<QR> questionHistory;
  final List<IdQuestion> markedQuestions;

  const QuestionReview(this.questionHistory, this.markedQuestions);

  @override
  String toString() {
    return "QuestionReview($questionHistory, $markedQuestions)";
  }
}

QuestionReview questionReviewFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return QuestionReview(listQRFromJson(json['QuestionHistory']),
      listIntFromJson(json['MarkedQuestions']));
}

Map<String, dynamic> questionReviewToJson(QuestionReview item) {
  return {
    "QuestionHistory": listQRToJson(item.questionHistory),
    "MarkedQuestions": listIntToJson(item.markedQuestions)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.RoomID
typedef RoomID = String;

/// github.com/benoitkugler/maths-online/server/src/trivial.ServerEvent
abstract class ServerEvent {}

ServerEvent serverEventFromJson(dynamic json_) {
  final json = json_ as Map<String, dynamic>;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "DiceThrow":
      return diceThrowFromJson(data);
    case "GameEnd":
      return gameEndFromJson(data);
    case "GameStart":
      return gameStartFromJson(data);
    case "GameTerminated":
      return gameTerminatedFromJson(data);
    case "LobbyUpdate":
      return lobbyUpdateFromJson(data);
    case "Move":
      return moveFromJson(data);
    case "PlayerAnswerResults":
      return playerAnswerResultsFromJson(data);
    case "PlayerJoin":
      return playerJoinFromJson(data);
    case "PlayerLeft":
      return playerLeftFromJson(data);
    case "PlayerReconnected":
      return playerReconnectedFromJson(data);
    case "PlayerTurn":
      return playerTurnFromJson(data);
    case "PlayersStillInQuestionResult":
      return playersStillInQuestionResultFromJson(data);
    case "PossibleMoves":
      return possibleMovesFromJson(data);
    case "ShowQuestion":
      return showQuestionFromJson(data);
    default:
      throw ("unexpected type");
  }
}

Map<String, dynamic> serverEventToJson(ServerEvent item) {
  if (item is DiceThrow) {
    return {'Kind': "DiceThrow", 'Data': diceThrowToJson(item)};
  } else if (item is GameEnd) {
    return {'Kind': "GameEnd", 'Data': gameEndToJson(item)};
  } else if (item is GameStart) {
    return {'Kind': "GameStart", 'Data': gameStartToJson(item)};
  } else if (item is GameTerminated) {
    return {'Kind': "GameTerminated", 'Data': gameTerminatedToJson(item)};
  } else if (item is LobbyUpdate) {
    return {'Kind': "LobbyUpdate", 'Data': lobbyUpdateToJson(item)};
  } else if (item is Move) {
    return {'Kind': "Move", 'Data': moveToJson(item)};
  } else if (item is PlayerAnswerResults) {
    return {
      'Kind': "PlayerAnswerResults",
      'Data': playerAnswerResultsToJson(item)
    };
  } else if (item is PlayerJoin) {
    return {'Kind': "PlayerJoin", 'Data': playerJoinToJson(item)};
  } else if (item is PlayerLeft) {
    return {'Kind': "PlayerLeft", 'Data': playerLeftToJson(item)};
  } else if (item is PlayerReconnected) {
    return {'Kind': "PlayerReconnected", 'Data': playerReconnectedToJson(item)};
  } else if (item is PlayerTurn) {
    return {'Kind': "PlayerTurn", 'Data': playerTurnToJson(item)};
  } else if (item is PlayersStillInQuestionResult) {
    return {
      'Kind': "PlayersStillInQuestionResult",
      'Data': playersStillInQuestionResultToJson(item)
    };
  } else if (item is PossibleMoves) {
    return {'Kind': "PossibleMoves", 'Data': possibleMovesToJson(item)};
  } else if (item is ShowQuestion) {
    return {'Kind': "ShowQuestion", 'Data': showQuestionToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/server/src/trivial.ShowQuestion
class ShowQuestion implements ServerEvent {
  final int timeoutSeconds;
  final Categorie categorie;
  final IdQuestion iD;
  final Question question;

  const ShowQuestion(
      this.timeoutSeconds, this.categorie, this.iD, this.question);

  @override
  String toString() {
    return "ShowQuestion($timeoutSeconds, $categorie, $iD, $question)";
  }
}

ShowQuestion showQuestionFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return ShowQuestion(
      intFromJson(json['TimeoutSeconds']),
      categorieFromJson(json['Categorie']),
      intFromJson(json['ID']),
      questionFromJson(json['Question']));
}

Map<String, dynamic> showQuestionToJson(ShowQuestion item) {
  return {
    "TimeoutSeconds": intToJson(item.timeoutSeconds),
    "Categorie": categorieToJson(item.categorie),
    "ID": intToJson(item.iD),
    "Question": questionToJson(item.question)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.StateUpdate
class StateUpdate {
  final Events events;
  final GameState state;

  const StateUpdate(this.events, this.state);

  @override
  String toString() {
    return "StateUpdate($events, $state)";
  }
}

StateUpdate stateUpdateFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return StateUpdate(
      eventsFromJson(json['Events']), gameStateFromJson(json['State']));
}

Map<String, dynamic> stateUpdateToJson(StateUpdate item) {
  return {
    "Events": eventsToJson(item.events),
    "State": gameStateToJson(item.state)
  };
}

// github.com/benoitkugler/maths-online/server/src/trivial.Success
typedef Success = List<bool>;

Success successFromJson(dynamic json) {
  return listBoolFromJson(json);
}

dynamic successToJson(Success item) {
  return listBoolToJson(item);
}

// github.com/benoitkugler/maths-online/server/src/trivial.WantNextTurn
class WantNextTurn implements ClientEventITF {
  final bool markQuestion;

  const WantNextTurn(this.markQuestion);

  @override
  String toString() {
    return "WantNextTurn($markQuestion)";
  }
}

WantNextTurn wantNextTurnFromJson(dynamic json_) {
  final json = (json_ as Map<String, dynamic>);
  return WantNextTurn(boolFromJson(json['MarkQuestion']));
}

Map<String, dynamic> wantNextTurnToJson(WantNextTurn item) {
  return {"MarkQuestion": boolToJson(item.markQuestion)};
}

Map<PlayerID, EventNotification> dictStringToEventNotificationFromJson(
    dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as Map<String, dynamic>)
      .map((k, v) => MapEntry(k as PlayerID, eventNotificationFromJson(v)));
}

Map<String, dynamic> dictStringToEventNotificationToJson(
    Map<PlayerID, EventNotification> item) {
  return item.map((k, v) =>
      MapEntry(stringToJson(k).toString(), eventNotificationToJson(v)));
}

Map<PlayerID, List<IdQuestion>> dictStringToListIntFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as Map<String, dynamic>)
      .map((k, v) => MapEntry(k as PlayerID, listIntFromJson(v)));
}

Map<String, dynamic> dictStringToListIntToJson(
    Map<PlayerID, List<IdQuestion>> item) {
  return item
      .map((k, v) => MapEntry(stringToJson(k).toString(), listIntToJson(v)));
}

Map<PlayerID, PlayerAnswerResult> dictStringToPlayerAnswerResultFromJson(
    dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as Map<String, dynamic>)
      .map((k, v) => MapEntry(k as PlayerID, playerAnswerResultFromJson(v)));
}

Map<String, dynamic> dictStringToPlayerAnswerResultToJson(
    Map<PlayerID, PlayerAnswerResult> item) {
  return item.map((k, v) =>
      MapEntry(stringToJson(k).toString(), playerAnswerResultToJson(v)));
}

Map<PlayerID, PlayerStatus> dictStringToPlayerStatusFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as Map<String, dynamic>)
      .map((k, v) => MapEntry(k as PlayerID, playerStatusFromJson(v)));
}

Map<String, dynamic> dictStringToPlayerStatusToJson(
    Map<PlayerID, PlayerStatus> item) {
  return item.map(
      (k, v) => MapEntry(stringToJson(k).toString(), playerStatusToJson(v)));
}

Map<PlayerID, String> dictStringToStringFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as Map<String, dynamic>)
      .map((k, v) => MapEntry(k as PlayerID, stringFromJson(v)));
}

Map<String, dynamic> dictStringToStringToJson(Map<PlayerID, String> item) {
  return item
      .map((k, v) => MapEntry(stringToJson(k).toString(), stringToJson(v)));
}

List<bool> listBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(boolFromJson).toList();
}

List<dynamic> listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

List<int> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<int> item) {
  return item.map(intToJson).toList();
}

List<QR> listQRFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(qRFromJson).toList();
}

List<dynamic> listQRToJson(List<QR> item) {
  return item.map(qRToJson).toList();
}

List<ServerEvent> listServerEventFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(serverEventFromJson).toList();
}

List<dynamic> listServerEventToJson(List<ServerEvent> item) {
  return item.map(serverEventToJson).toList();
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}
