// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'package:eleve/shared_gen.dart';

// github.com/benoitkugler/maths-online/pass.EncryptedID
typedef EncryptedID = String;

// github.com/benoitkugler/maths-online/sql/teacher.IdClassroom
typedef IdClassroom = int;

// github.com/benoitkugler/maths-online/sql/homework.IdSheet
typedef IdSheet = int;

// github.com/benoitkugler/maths-online/sql/tasks.IdTask
typedef IdTask = int;

// github.com/benoitkugler/maths-online/sql/homework.Notation
enum Notation { noNotation, successNotation }

extension _NotationExt on Notation {
  static Notation fromValue(int i) {
    return Notation.values[i];
  }

  int toValue() {
    return index;
  }
}

Notation notationFromJson(dynamic json) => _NotationExt.fromValue(json as int);

dynamic notationToJson(Notation item) => item.toValue();

// github.com/benoitkugler/maths-online/sql/homework.Sheet
class Sheet {
  final IdSheet id;
  final IdClassroom idClassroom;
  final String title;
  final Notation notation;
  final bool activated;
  final Time deadline;

  const Sheet(this.id, this.idClassroom, this.title, this.notation,
      this.activated, this.deadline);

  @override
  String toString() {
    return "Sheet($id, $idClassroom, $title, $notation, $activated, $deadline)";
  }
}

Sheet sheetFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Sheet(
      intFromJson(json['Id']),
      intFromJson(json['IdClassroom']),
      stringFromJson(json['Title']),
      notationFromJson(json['Notation']),
      boolFromJson(json['Activated']),
      dateTimeFromJson(json['Deadline']));
}

JSON sheetToJson(Sheet item) {
  return {
    "Id": intToJson(item.id),
    "IdClassroom": intToJson(item.idClassroom),
    "Title": stringToJson(item.title),
    "Notation": notationToJson(item.notation),
    "Activated": boolToJson(item.activated),
    "Deadline": dateTimeToJson(item.deadline)
  };
}

// github.com/benoitkugler/maths-online/prof/homework.SheetProgression
class SheetProgression {
  final Sheet sheet;
  final List<TaskProgressionHeader> tasks;

  const SheetProgression(this.sheet, this.tasks);

  @override
  String toString() {
    return "SheetProgression($sheet, $tasks)";
  }
}

SheetProgression sheetProgressionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return SheetProgression(sheetFromJson(json['Sheet']),
      listTaskProgressionHeaderFromJson(json['Tasks']));
}

JSON sheetProgressionToJson(SheetProgression item) {
  return {
    "Sheet": sheetToJson(item.sheet),
    "Tasks": listTaskProgressionHeaderToJson(item.tasks)
  };
}

String stringFromJson(dynamic json) => json == null ? "" : json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/prof/homework.StudentEvaluateTaskIn
class StudentEvaluateTaskIn {
  final EncryptedID studentID;
  final IdTask idTask;
  final EvaluateWorkIn ex;

  const StudentEvaluateTaskIn(this.studentID, this.idTask, this.ex);

  @override
  String toString() {
    return "StudentEvaluateTaskIn($studentID, $idTask, $ex)";
  }
}

StudentEvaluateTaskIn studentEvaluateTaskInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return StudentEvaluateTaskIn(stringFromJson(json['StudentID']),
      intFromJson(json['IdTask']), evaluateWorkInFromJson(json['Ex']));
}

JSON studentEvaluateTaskInToJson(StudentEvaluateTaskIn item) {
  return {
    "StudentID": stringToJson(item.studentID),
    "IdTask": intToJson(item.idTask),
    "Ex": evaluateWorkInToJson(item.ex)
  };
}

// github.com/benoitkugler/maths-online/prof/homework.StudentEvaluateTaskOut
class StudentEvaluateTaskOut {
  final EvaluateWorkOut ex;
  final int mark;

  const StudentEvaluateTaskOut(this.ex, this.mark);

  @override
  String toString() {
    return "StudentEvaluateTaskOut($ex, $mark)";
  }
}

StudentEvaluateTaskOut studentEvaluateTaskOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return StudentEvaluateTaskOut(
      evaluateWorkOutFromJson(json['Ex']), intFromJson(json['Mark']));
}

JSON studentEvaluateTaskOutToJson(StudentEvaluateTaskOut item) {
  return {"Ex": evaluateWorkOutToJson(item.ex), "Mark": intToJson(item.mark)};
}

// github.com/benoitkugler/maths-online/tasks.TaskProgressionHeader
class TaskProgressionHeader {
  final IdTask id;
  final String title;
  final bool hasProgression;
  final ProgressionExt progression;
  final int mark;
  final int bareme;

  const TaskProgressionHeader(this.id, this.title, this.hasProgression,
      this.progression, this.mark, this.bareme);

  @override
  String toString() {
    return "TaskProgressionHeader($id, $title, $hasProgression, $progression, $mark, $bareme)";
  }
}

TaskProgressionHeader taskProgressionHeaderFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TaskProgressionHeader(
      intFromJson(json['Id']),
      stringFromJson(json['Title']),
      boolFromJson(json['HasProgression']),
      progressionExtFromJson(json['Progression']),
      intFromJson(json['Mark']),
      intFromJson(json['Bareme']));
}

JSON taskProgressionHeaderToJson(TaskProgressionHeader item) {
  return {
    "Id": intToJson(item.id),
    "Title": stringToJson(item.title),
    "HasProgression": boolToJson(item.hasProgression),
    "Progression": progressionExtToJson(item.progression),
    "Mark": intToJson(item.mark),
    "Bareme": intToJson(item.bareme)
  };
}

// github.com/benoitkugler/maths-online/sql/homework.Time
typedef Time = DateTime;

DateTime dateTimeFromJson(dynamic json) => DateTime.parse(json as String);

dynamic dateTimeToJson(DateTime dt) => dt.toString();

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors
bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

List<SheetProgression> listSheetProgressionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(sheetProgressionFromJson).toList();
}

List<dynamic> listSheetProgressionToJson(List<SheetProgression> item) {
  return item.map(sheetProgressionToJson).toList();
}

List<TaskProgressionHeader> listTaskProgressionHeaderFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(taskProgressionHeaderFromJson).toList();
}

List<dynamic> listTaskProgressionHeaderToJson(
    List<TaskProgressionHeader> item) {
  return item.map(taskProgressionHeaderToJson).toList();
}
