// Code generated by gomacro/generator/dart. DO NOT EDIT

// github.com/benoitkugler/maths-online/prof/editor.Exercice
class Exercice {
  final IdExercice id;
  final String title;
  final String description;
  final Parameters parameters;
  final Flow flow;
  final IdTeacher idTeacher;
  final bool public;

  const Exercice(this.id, this.title, this.description, this.parameters,
      this.flow, this.idTeacher, this.public);

  @override
  String toString() {
    return "Exercice($id, $title, $description, $parameters, $flow, $idTeacher, $public)";
  }
}

Exercice exerciceFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Exercice(
      intFromJson(json['Id']),
      stringFromJson(json['Title']),
      stringFromJson(json['Description']),
      parametersFromJson(json['Parameters']),
      flowFromJson(json['Flow']),
      intFromJson(json['IdTeacher']),
      boolFromJson(json['Public']));
}

JSON exerciceToJson(Exercice item) {
  return {
    "Id": intToJson(item.id),
    "Title": stringToJson(item.title),
    "Description": stringToJson(item.description),
    "Parameters": parametersToJson(item.parameters),
    "Flow": flowToJson(item.flow),
    "IdTeacher": intToJson(item.idTeacher),
    "Public": boolToJson(item.public)
  };
}

// github.com/benoitkugler/maths-online/prof/homework.ExerciceProgressionHeader
class ExerciceProgressionHeader {
  final Exercice exercice;
  final bool hasProgression;
  final ProgressionExt progression;

  const ExerciceProgressionHeader(
      this.exercice, this.hasProgression, this.progression);

  @override
  String toString() {
    return "ExerciceProgressionHeader($exercice, $hasProgression, $progression)";
  }
}

ExerciceProgressionHeader exerciceProgressionHeaderFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ExerciceProgressionHeader(
      exerciceFromJson(json['Exercice']),
      boolFromJson(json['HasProgression']),
      progressionExtFromJson(json['Progression']));
}

JSON exerciceProgressionHeaderToJson(ExerciceProgressionHeader item) {
  return {
    "Exercice": exerciceToJson(item.exercice),
    "HasProgression": boolToJson(item.hasProgression),
    "Progression": progressionExtToJson(item.progression)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.Flow
enum Flow { parallel, sequencial }

extension _FlowExt on Flow {
  static Flow fromValue(int i) {
    return Flow.values[i];
  }

  int toValue() {
    return index;
  }
}

Flow flowFromJson(dynamic json) => _FlowExt.fromValue(json as int);

dynamic flowToJson(Flow item) => item.toValue();

// github.com/benoitkugler/maths-online/prof/teacher.IdClassroom
typedef IdClassroom = int;

// github.com/benoitkugler/maths-online/prof/editor.IdExercice
typedef IdExercice = int;

// github.com/benoitkugler/maths-online/prof/editor.IdProgression
typedef IdProgression = int;

// github.com/benoitkugler/maths-online/prof/homework.IdSheet
typedef IdSheet = int;

// github.com/benoitkugler/maths-online/prof/teacher.IdTeacher
typedef IdTeacher = int;

// github.com/benoitkugler/maths-online/prof/homework.Notation
enum Notation { noNotation, successNotation }

extension _NotationExt on Notation {
  static Notation fromValue(int i) {
    return Notation.values[i];
  }

  int toValue() {
    return index;
  }
}

Notation notationFromJson(dynamic json) => _NotationExt.fromValue(json as int);

dynamic notationToJson(Notation item) => item.toValue();

// github.com/benoitkugler/maths-online/maths/questions.Parameters
class Parameters {
  final RandomParameters variables;
  final List<String> intrinsics;

  const Parameters(this.variables, this.intrinsics);

  @override
  String toString() {
    return "Parameters($variables, $intrinsics)";
  }
}

Parameters parametersFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Parameters(listRandomParameterFromJson(json['Variables']),
      listStringFromJson(json['Intrinsics']));
}

JSON parametersToJson(Parameters item) {
  return {
    "Variables": listRandomParameterToJson(item.variables),
    "Intrinsics": listStringToJson(item.intrinsics)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.Progression
class Progression {
  final IdProgression id;
  final IdExercice idExercice;

  const Progression(this.id, this.idExercice);

  @override
  String toString() {
    return "Progression($id, $idExercice)";
  }
}

Progression progressionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Progression(intFromJson(json['Id']), intFromJson(json['IdExercice']));
}

JSON progressionToJson(Progression item) {
  return {"Id": intToJson(item.id), "IdExercice": intToJson(item.idExercice)};
}

// github.com/benoitkugler/maths-online/prof/editor.ProgressionExt
class ProgressionExt {
  final Progression progression;
  final List<QuestionHistory> questions;
  final int nextQuestion;

  const ProgressionExt(this.progression, this.questions, this.nextQuestion);

  @override
  String toString() {
    return "ProgressionExt($progression, $questions, $nextQuestion)";
  }
}

ProgressionExt progressionExtFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ProgressionExt(
      progressionFromJson(json['Progression']),
      listListBoolFromJson(json['Questions']),
      intFromJson(json['NextQuestion']));
}

JSON progressionExtToJson(ProgressionExt item) {
  return {
    "Progression": progressionToJson(item.progression),
    "Questions": listListBoolToJson(item.questions),
    "NextQuestion": intToJson(item.nextQuestion)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.QuestionHistory
typedef QuestionHistory = List<bool>;

// github.com/benoitkugler/maths-online/maths/questions.RandomParameter
class RandomParameter {
  final String expression;
  final Variable variable;

  const RandomParameter(this.expression, this.variable);

  @override
  String toString() {
    return "RandomParameter($expression, $variable)";
  }
}

RandomParameter randomParameterFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return RandomParameter(
      stringFromJson(json['expression']), variableFromJson(json['variable']));
}

JSON randomParameterToJson(RandomParameter item) {
  return {
    "expression": stringToJson(item.expression),
    "variable": variableToJson(item.variable)
  };
}

// github.com/benoitkugler/maths-online/maths/questions.RandomParameters
typedef RandomParameters = List<RandomParameter>;

// github.com/benoitkugler/maths-online/prof/homework.Sheet
class Sheet {
  final IdSheet id;
  final IdClassroom idClassroom;
  final String title;
  final Notation notation;
  final bool activated;
  final Time deadline;

  const Sheet(this.id, this.idClassroom, this.title, this.notation,
      this.activated, this.deadline);

  @override
  String toString() {
    return "Sheet($id, $idClassroom, $title, $notation, $activated, $deadline)";
  }
}

Sheet sheetFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Sheet(
      intFromJson(json['Id']),
      intFromJson(json['IdClassroom']),
      stringFromJson(json['Title']),
      notationFromJson(json['Notation']),
      boolFromJson(json['Activated']),
      dateTimeFromJson(json['Deadline']));
}

JSON sheetToJson(Sheet item) {
  return {
    "Id": intToJson(item.id),
    "IdClassroom": intToJson(item.idClassroom),
    "Title": stringToJson(item.title),
    "Notation": notationToJson(item.notation),
    "Activated": boolToJson(item.activated),
    "Deadline": dateTimeToJson(item.deadline)
  };
}

// github.com/benoitkugler/maths-online/prof/homework.SheetProgression
class SheetProgression {
  final Sheet sheet;
  final List<ExerciceProgressionHeader> exercices;

  const SheetProgression(this.sheet, this.exercices);

  @override
  String toString() {
    return "SheetProgression($sheet, $exercices)";
  }
}

SheetProgression sheetProgressionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return SheetProgression(sheetFromJson(json['Sheet']),
      listExerciceProgressionHeaderFromJson(json['Exercices']));
}

JSON sheetProgressionToJson(SheetProgression item) {
  return {
    "Sheet": sheetToJson(item.sheet),
    "Exercices": listExerciceProgressionHeaderToJson(item.exercices)
  };
}

String stringFromJson(dynamic json) => json == null ? "" : json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/prof/homework.Time
typedef Time = DateTime;

// github.com/benoitkugler/maths-online/maths/expression.Variable
class Variable {
  final String indice;
  final int name;

  const Variable(this.indice, this.name);

  @override
  String toString() {
    return "Variable($indice, $name)";
  }
}

Variable variableFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Variable(stringFromJson(json['Indice']), intFromJson(json['Name']));
}

JSON variableToJson(Variable item) {
  return {"Indice": stringToJson(item.indice), "Name": intToJson(item.name)};
}

DateTime dateTimeFromJson(dynamic json) => DateTime.parse(json as String);

dynamic dateTimeToJson(DateTime dt) => dt.toString();

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors
bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

List<bool> listBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(boolFromJson).toList();
}

List<dynamic> listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

List<ExerciceProgressionHeader> listExerciceProgressionHeaderFromJson(
    dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>)
      .map(exerciceProgressionHeaderFromJson)
      .toList();
}

List<dynamic> listExerciceProgressionHeaderToJson(
    List<ExerciceProgressionHeader> item) {
  return item.map(exerciceProgressionHeaderToJson).toList();
}

List<QuestionHistory> listListBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listBoolFromJson).toList();
}

List<dynamic> listListBoolToJson(List<QuestionHistory> item) {
  return item.map(listBoolToJson).toList();
}

List<RandomParameter> listRandomParameterFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(randomParameterFromJson).toList();
}

List<dynamic> listRandomParameterToJson(List<RandomParameter> item) {
  return item.map(randomParameterToJson).toList();
}

List<SheetProgression> listSheetProgressionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(sheetProgressionFromJson).toList();
}

List<dynamic> listSheetProgressionToJson(List<SheetProgression> item) {
  return item.map(sheetProgressionToJson).toList();
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}
