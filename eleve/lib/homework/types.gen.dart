// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'questions/types.gen.dart';

// github.com/benoitkugler/maths-online/tasks.Answer
class Answer {
  final List<VarEntry> params;
  final QuestionAnswersIn answer;

  const Answer(this.params, this.answer);

  @override
  String toString() {
    return "Answer($params, $answer)";
  }
}

Answer answerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Answer(listVarEntryFromJson(json['Params']),
      questionAnswersInFromJson(json['Answer']));
}

JSON answerToJson(Answer item) {
  return {
    "Params": listVarEntryToJson(item.params),
    "Answer": questionAnswersInToJson(item.answer)
  };
}

// github.com/benoitkugler/maths-online/pass.EncryptedID
typedef EncryptedID = String;

// github.com/benoitkugler/maths-online/tasks.EvaluateWorkIn
class EvaluateWorkIn {
  final WorkID iD;
  final Map<int, Answer> answers;
  final ProgressionExt progression;

  const EvaluateWorkIn(this.iD, this.answers, this.progression);

  @override
  String toString() {
    return "EvaluateWorkIn($iD, $answers, $progression)";
  }
}

EvaluateWorkIn evaluateWorkInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return EvaluateWorkIn(
      workIDFromJson(json['ID']),
      dictIntToAnswerFromJson(json['Answers']),
      progressionExtFromJson(json['Progression']));
}

JSON evaluateWorkInToJson(EvaluateWorkIn item) {
  return {
    "ID": workIDToJson(item.iD),
    "Answers": dictIntToAnswerToJson(item.answers),
    "Progression": progressionExtToJson(item.progression)
  };
}

// github.com/benoitkugler/maths-online/tasks.EvaluateWorkOut
class EvaluateWorkOut {
  final Map<int, QuestionAnswersOut> results;
  final ProgressionExt progression;
  final List<InstantiatedQuestion> newQuestions;

  const EvaluateWorkOut(this.results, this.progression, this.newQuestions);

  @override
  String toString() {
    return "EvaluateWorkOut($results, $progression, $newQuestions)";
  }
}

EvaluateWorkOut evaluateWorkOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return EvaluateWorkOut(
      dictIntToQuestionAnswersOutFromJson(json['Results']),
      progressionExtFromJson(json['Progression']),
      listInstantiatedQuestionFromJson(json['NewQuestions']));
}

JSON evaluateWorkOutToJson(EvaluateWorkOut item) {
  return {
    "Results": dictIntToQuestionAnswersOutToJson(item.results),
    "Progression": progressionExtToJson(item.progression),
    "NewQuestions": listInstantiatedQuestionToJson(item.newQuestions)
  };
}

// github.com/benoitkugler/maths-online/sql/teacher.IdClassroom
typedef IdClassroom = int;

// github.com/benoitkugler/maths-online/sql/editor.IdQuestion
typedef IdQuestion = int;

// github.com/benoitkugler/maths-online/sql/homework.IdSheet
typedef IdSheet = int;

// github.com/benoitkugler/maths-online/sql/tasks.IdTask
typedef IdTask = int;

// github.com/benoitkugler/maths-online/tasks.InstantiatedQuestion
class InstantiatedQuestion {
  final IdQuestion id;
  final Question question;
  final List<VarEntry> params;

  const InstantiatedQuestion(this.id, this.question, this.params);

  @override
  String toString() {
    return "InstantiatedQuestion($id, $question, $params)";
  }
}

InstantiatedQuestion instantiatedQuestionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return InstantiatedQuestion(intFromJson(json['Id']),
      questionFromJson(json['Question']), listVarEntryFromJson(json['Params']));
}

JSON instantiatedQuestionToJson(InstantiatedQuestion item) {
  return {
    "Id": intToJson(item.id),
    "Question": questionToJson(item.question),
    "Params": listVarEntryToJson(item.params)
  };
}

// github.com/benoitkugler/maths-online/sql/homework.Notation
enum Notation { noNotation, successNotation }

extension _NotationExt on Notation {
  static Notation fromValue(int i) {
    return Notation.values[i];
  }

  int toValue() {
    return index;
  }
}

Notation notationFromJson(dynamic json) => _NotationExt.fromValue(json as int);

dynamic notationToJson(Notation item) => item.toValue();

// github.com/benoitkugler/maths-online/tasks.ProgressionExt
class ProgressionExt {
  final List<QuestionHistory> questions;
  final int nextQuestion;

  const ProgressionExt(this.questions, this.nextQuestion);

  @override
  String toString() {
    return "ProgressionExt($questions, $nextQuestion)";
  }
}

ProgressionExt progressionExtFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ProgressionExt(listListBoolFromJson(json['Questions']),
      intFromJson(json['NextQuestion']));
}

JSON progressionExtToJson(ProgressionExt item) {
  return {
    "Questions": listListBoolToJson(item.questions),
    "NextQuestion": intToJson(item.nextQuestion)
  };
}

// github.com/benoitkugler/maths-online/sql/tasks.QuestionHistory
typedef QuestionHistory = List<bool>;

// github.com/benoitkugler/maths-online/sql/homework.Sheet
class Sheet {
  final IdSheet id;
  final IdClassroom idClassroom;
  final String title;
  final Notation notation;
  final bool activated;
  final Time deadline;

  const Sheet(this.id, this.idClassroom, this.title, this.notation,
      this.activated, this.deadline);

  @override
  String toString() {
    return "Sheet($id, $idClassroom, $title, $notation, $activated, $deadline)";
  }
}

Sheet sheetFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Sheet(
      intFromJson(json['Id']),
      intFromJson(json['IdClassroom']),
      stringFromJson(json['Title']),
      notationFromJson(json['Notation']),
      boolFromJson(json['Activated']),
      dateTimeFromJson(json['Deadline']));
}

JSON sheetToJson(Sheet item) {
  return {
    "Id": intToJson(item.id),
    "IdClassroom": intToJson(item.idClassroom),
    "Title": stringToJson(item.title),
    "Notation": notationToJson(item.notation),
    "Activated": boolToJson(item.activated),
    "Deadline": dateTimeToJson(item.deadline)
  };
}

// github.com/benoitkugler/maths-online/prof/homework.SheetProgression
class SheetProgression {
  final Sheet sheet;
  final List<TaskProgressionHeader> tasks;

  const SheetProgression(this.sheet, this.tasks);

  @override
  String toString() {
    return "SheetProgression($sheet, $tasks)";
  }
}

SheetProgression sheetProgressionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return SheetProgression(sheetFromJson(json['Sheet']),
      listTaskProgressionHeaderFromJson(json['Tasks']));
}

JSON sheetProgressionToJson(SheetProgression item) {
  return {
    "Sheet": sheetToJson(item.sheet),
    "Tasks": listTaskProgressionHeaderToJson(item.tasks)
  };
}

String stringFromJson(dynamic json) => json == null ? "" : json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/prof/homework.StudentEvaluateExerciceIn
class StudentEvaluateExerciceIn {
  final EncryptedID studentID;
  final IdTask idTask;
  final EvaluateWorkIn ex;

  const StudentEvaluateExerciceIn(this.studentID, this.idTask, this.ex);

  @override
  String toString() {
    return "StudentEvaluateExerciceIn($studentID, $idTask, $ex)";
  }
}

StudentEvaluateExerciceIn studentEvaluateExerciceInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return StudentEvaluateExerciceIn(stringFromJson(json['StudentID']),
      intFromJson(json['IdTask']), evaluateWorkInFromJson(json['Ex']));
}

JSON studentEvaluateExerciceInToJson(StudentEvaluateExerciceIn item) {
  return {
    "StudentID": stringToJson(item.studentID),
    "IdTask": intToJson(item.idTask),
    "Ex": evaluateWorkInToJson(item.ex)
  };
}

// github.com/benoitkugler/maths-online/prof/homework.StudentEvaluateExerciceOut
class StudentEvaluateExerciceOut {
  final EvaluateWorkOut ex;
  final int mark;

  const StudentEvaluateExerciceOut(this.ex, this.mark);

  @override
  String toString() {
    return "StudentEvaluateExerciceOut($ex, $mark)";
  }
}

StudentEvaluateExerciceOut studentEvaluateExerciceOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return StudentEvaluateExerciceOut(
      evaluateWorkOutFromJson(json['Ex']), intFromJson(json['Mark']));
}

JSON studentEvaluateExerciceOutToJson(StudentEvaluateExerciceOut item) {
  return {"Ex": evaluateWorkOutToJson(item.ex), "Mark": intToJson(item.mark)};
}

// github.com/benoitkugler/maths-online/tasks.TaskProgressionHeader
class TaskProgressionHeader {
  final IdTask id;
  final String title;
  final bool hasProgression;
  final ProgressionExt progression;
  final int mark;
  final int bareme;

  const TaskProgressionHeader(this.id, this.title, this.hasProgression,
      this.progression, this.mark, this.bareme);

  @override
  String toString() {
    return "TaskProgressionHeader($id, $title, $hasProgression, $progression, $mark, $bareme)";
  }
}

TaskProgressionHeader taskProgressionHeaderFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TaskProgressionHeader(
      intFromJson(json['Id']),
      stringFromJson(json['Title']),
      boolFromJson(json['HasProgression']),
      progressionExtFromJson(json['Progression']),
      intFromJson(json['Mark']),
      intFromJson(json['Bareme']));
}

JSON taskProgressionHeaderToJson(TaskProgressionHeader item) {
  return {
    "Id": intToJson(item.id),
    "Title": stringToJson(item.title),
    "HasProgression": boolToJson(item.hasProgression),
    "Progression": progressionExtToJson(item.progression),
    "Mark": intToJson(item.mark),
    "Bareme": intToJson(item.bareme)
  };
}

// github.com/benoitkugler/maths-online/sql/homework.Time
typedef Time = DateTime;

// github.com/benoitkugler/maths-online/tasks.VarEntry
class VarEntry {
  final Variable variable;
  final String resolved;

  const VarEntry(this.variable, this.resolved);

  @override
  String toString() {
    return "VarEntry($variable, $resolved)";
  }
}

VarEntry varEntryFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VarEntry(
      variableFromJson(json['Variable']), stringFromJson(json['Resolved']));
}

JSON varEntryToJson(VarEntry item) {
  return {
    "Variable": variableToJson(item.variable),
    "Resolved": stringToJson(item.resolved)
  };
}

// github.com/benoitkugler/maths-online/maths/expression.Variable
class Variable {
  final String indice;
  final int name;

  const Variable(this.indice, this.name);

  @override
  String toString() {
    return "Variable($indice, $name)";
  }
}

Variable variableFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Variable(stringFromJson(json['Indice']), intFromJson(json['Name']));
}

JSON variableToJson(Variable item) {
  return {"Indice": stringToJson(item.indice), "Name": intToJson(item.name)};
}

// github.com/benoitkugler/maths-online/tasks.WorkID
class WorkID {
  final int iD;
  final bool isExercice;

  const WorkID(this.iD, this.isExercice);

  @override
  String toString() {
    return "WorkID($iD, $isExercice)";
  }
}

WorkID workIDFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return WorkID(intFromJson(json['ID']), boolFromJson(json['IsExercice']));
}

JSON workIDToJson(WorkID item) {
  return {"ID": intToJson(item.iD), "IsExercice": boolToJson(item.isExercice)};
}

DateTime dateTimeFromJson(dynamic json) => DateTime.parse(json as String);

dynamic dateTimeToJson(DateTime dt) => dt.toString();

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors
bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

Map<int, Answer> dictIntToAnswerFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), answerFromJson(v)));
}

Map<String, dynamic> dictIntToAnswerToJson(Map<int, Answer> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), answerToJson(v)));
}

Map<int, QuestionAnswersOut> dictIntToQuestionAnswersOutFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), questionAnswersOutFromJson(v)));
}

Map<String, dynamic> dictIntToQuestionAnswersOutToJson(
    Map<int, QuestionAnswersOut> item) {
  return item.map(
      (k, v) => MapEntry(intToJson(k).toString(), questionAnswersOutToJson(v)));
}

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

List<bool> listBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(boolFromJson).toList();
}

List<dynamic> listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

List<InstantiatedQuestion> listInstantiatedQuestionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(instantiatedQuestionFromJson).toList();
}

List<dynamic> listInstantiatedQuestionToJson(List<InstantiatedQuestion> item) {
  return item.map(instantiatedQuestionToJson).toList();
}

List<QuestionHistory> listListBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listBoolFromJson).toList();
}

List<dynamic> listListBoolToJson(List<QuestionHistory> item) {
  return item.map(listBoolToJson).toList();
}

List<SheetProgression> listSheetProgressionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(sheetProgressionFromJson).toList();
}

List<dynamic> listSheetProgressionToJson(List<SheetProgression> item) {
  return item.map(sheetProgressionToJson).toList();
}

List<TaskProgressionHeader> listTaskProgressionHeaderFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(taskProgressionHeaderFromJson).toList();
}

List<dynamic> listTaskProgressionHeaderToJson(
    List<TaskProgressionHeader> item) {
  return item.map(taskProgressionHeaderToJson).toList();
}

List<VarEntry> listVarEntryFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(varEntryFromJson).toList();
}

List<dynamic> listVarEntryToJson(List<VarEntry> item) {
  return item.map(varEntryToJson).toList();
}
