// Code generated by gomacro/generator/dart. DO NOT EDIT

// github.com/benoitkugler/maths-online/prof/editor.Answer
class Answer {
  final List<VarEntry> params;
  final QuestionAnswersIn answer;

  const Answer(this.params, this.answer);

  @override
  String toString() {
    return "Answer($params, $answer)";
  }
}

Answer answerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Answer(listVarEntryFromJson(json['Params']),
      questionAnswersInFromJson(json['Answer']));
}

JSON answerToJson(Answer item) {
  return {
    "Params": listVarEntryToJson(item.params),
    "Answer": questionAnswersInToJson(item.answer)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.Answers
typedef Answers = Map<int, Answer>;

// github.com/benoitkugler/maths-online/maths/repere.Area
class Area {
  final String color;
  final List<String> points;

  const Area(this.color, this.points);

  @override
  String toString() {
    return "Area($color, $points)";
  }
}

Area areaFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Area(
      stringFromJson(json['Color']), listStringFromJson(json['Points']));
}

JSON areaToJson(Area item) {
  return {
    "Color": stringToJson(item.color),
    "Points": listStringToJson(item.points)
  };
}

/// github.com/benoitkugler/maths-online/maths/questions/client.Assertion
abstract class Assertion {}

Assertion assertionFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "Equality":
      return equalityFromJson(data);
    case "Node":
      return nodeFromJson(data);
    case "Sequence":
      return sequenceFromJson(data);
    case "Statement":
      return statementFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON assertionToJson(Assertion item) {
  if (item is Equality) {
    return {'Kind': "Equality", 'Data': equalityToJson(item)};
  } else if (item is Node) {
    return {'Kind': "Node", 'Data': nodeToJson(item)};
  } else if (item is Sequence) {
    return {'Kind': "Sequence", 'Data': sequenceToJson(item)};
  } else if (item is Statement) {
    return {'Kind': "Statement", 'Data': statementToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/maths/questions/client.Assertions
typedef Assertions = List<Assertion>;

// github.com/benoitkugler/maths-online/maths/functiongrapher.BezierCurve
class BezierCurve {
  final Coord p0;
  final Coord p1;
  final Coord p2;

  const BezierCurve(this.p0, this.p1, this.p2);

  @override
  String toString() {
    return "BezierCurve($p0, $p1, $p2)";
  }
}

BezierCurve bezierCurveFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return BezierCurve(coordFromJson(json['P0']), coordFromJson(json['P1']),
      coordFromJson(json['P2']));
}

JSON bezierCurveToJson(BezierCurve item) {
  return {
    "P0": coordToJson(item.p0),
    "P1": coordToJson(item.p1),
    "P2": coordToJson(item.p2)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.Binary
enum Binary { invalid, and, or }

extension _BinaryExt on Binary {
  static Binary fromValue(int i) {
    return Binary.values[i];
  }

  int toValue() {
    return index;
  }
}

Binary binaryFromJson(dynamic json) => _BinaryExt.fromValue(json as int);

dynamic binaryToJson(Binary item) => item.toValue();

/// github.com/benoitkugler/maths-online/maths/questions/client.Block
abstract class Block {}

Block blockFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "DropDownFieldBlock":
      return dropDownFieldBlockFromJson(data);
    case "ExpressionFieldBlock":
      return expressionFieldBlockFromJson(data);
    case "FigureBlock":
      return figureBlockFromJson(data);
    case "FigurePointFieldBlock":
      return figurePointFieldBlockFromJson(data);
    case "FigureVectorFieldBlock":
      return figureVectorFieldBlockFromJson(data);
    case "FigureVectorPairFieldBlock":
      return figureVectorPairFieldBlockFromJson(data);
    case "FormulaBlock":
      return formulaBlockFromJson(data);
    case "FunctionPointsFieldBlock":
      return functionPointsFieldBlockFromJson(data);
    case "FunctionsGraphBlock":
      return functionsGraphBlockFromJson(data);
    case "NumberFieldBlock":
      return numberFieldBlockFromJson(data);
    case "OrderedListFieldBlock":
      return orderedListFieldBlockFromJson(data);
    case "ProofFieldBlock":
      return proofFieldBlockFromJson(data);
    case "RadioFieldBlock":
      return radioFieldBlockFromJson(data);
    case "SignTableBlock":
      return signTableBlockFromJson(data);
    case "TableBlock":
      return tableBlockFromJson(data);
    case "TableFieldBlock":
      return tableFieldBlockFromJson(data);
    case "TextBlock":
      return textBlockFromJson(data);
    case "TreeFieldBlock":
      return treeFieldBlockFromJson(data);
    case "VariationTableBlock":
      return variationTableBlockFromJson(data);
    case "VariationTableFieldBlock":
      return variationTableFieldBlockFromJson(data);
    case "VectorFieldBlock":
      return vectorFieldBlockFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON blockToJson(Block item) {
  if (item is DropDownFieldBlock) {
    return {
      'Kind': "DropDownFieldBlock",
      'Data': dropDownFieldBlockToJson(item)
    };
  } else if (item is ExpressionFieldBlock) {
    return {
      'Kind': "ExpressionFieldBlock",
      'Data': expressionFieldBlockToJson(item)
    };
  } else if (item is FigureBlock) {
    return {'Kind': "FigureBlock", 'Data': figureBlockToJson(item)};
  } else if (item is FigurePointFieldBlock) {
    return {
      'Kind': "FigurePointFieldBlock",
      'Data': figurePointFieldBlockToJson(item)
    };
  } else if (item is FigureVectorFieldBlock) {
    return {
      'Kind': "FigureVectorFieldBlock",
      'Data': figureVectorFieldBlockToJson(item)
    };
  } else if (item is FigureVectorPairFieldBlock) {
    return {
      'Kind': "FigureVectorPairFieldBlock",
      'Data': figureVectorPairFieldBlockToJson(item)
    };
  } else if (item is FormulaBlock) {
    return {'Kind': "FormulaBlock", 'Data': formulaBlockToJson(item)};
  } else if (item is FunctionPointsFieldBlock) {
    return {
      'Kind': "FunctionPointsFieldBlock",
      'Data': functionPointsFieldBlockToJson(item)
    };
  } else if (item is FunctionsGraphBlock) {
    return {
      'Kind': "FunctionsGraphBlock",
      'Data': functionsGraphBlockToJson(item)
    };
  } else if (item is NumberFieldBlock) {
    return {'Kind': "NumberFieldBlock", 'Data': numberFieldBlockToJson(item)};
  } else if (item is OrderedListFieldBlock) {
    return {
      'Kind': "OrderedListFieldBlock",
      'Data': orderedListFieldBlockToJson(item)
    };
  } else if (item is ProofFieldBlock) {
    return {'Kind': "ProofFieldBlock", 'Data': proofFieldBlockToJson(item)};
  } else if (item is RadioFieldBlock) {
    return {'Kind': "RadioFieldBlock", 'Data': radioFieldBlockToJson(item)};
  } else if (item is SignTableBlock) {
    return {'Kind': "SignTableBlock", 'Data': signTableBlockToJson(item)};
  } else if (item is TableBlock) {
    return {'Kind': "TableBlock", 'Data': tableBlockToJson(item)};
  } else if (item is TableFieldBlock) {
    return {'Kind': "TableFieldBlock", 'Data': tableFieldBlockToJson(item)};
  } else if (item is TextBlock) {
    return {'Kind': "TextBlock", 'Data': textBlockToJson(item)};
  } else if (item is TreeFieldBlock) {
    return {'Kind': "TreeFieldBlock", 'Data': treeFieldBlockToJson(item)};
  } else if (item is VariationTableBlock) {
    return {
      'Kind': "VariationTableBlock",
      'Data': variationTableBlockToJson(item)
    };
  } else if (item is VariationTableFieldBlock) {
    return {
      'Kind': "VariationTableFieldBlock",
      'Data': variationTableFieldBlockToJson(item)
    };
  } else if (item is VectorFieldBlock) {
    return {'Kind': "VectorFieldBlock", 'Data': vectorFieldBlockToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/maths/repere.Coord
class Coord {
  final double x;
  final double y;

  const Coord(this.x, this.y);

  @override
  String toString() {
    return "Coord($x, $y)";
  }
}

Coord coordFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Coord(doubleFromJson(json['X']), doubleFromJson(json['Y']));
}

JSON coordToJson(Coord item) {
  return {"X": doubleToJson(item.x), "Y": doubleToJson(item.y)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.DoublePointAnswer
class DoublePointAnswer implements Answer {
  final IntCoord from;
  final IntCoord to;

  const DoublePointAnswer(this.from, this.to);

  @override
  String toString() {
    return "DoublePointAnswer($from, $to)";
  }
}

DoublePointAnswer doublePointAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DoublePointAnswer(
      intCoordFromJson(json['From']), intCoordFromJson(json['To']));
}

JSON doublePointAnswerToJson(DoublePointAnswer item) {
  return {"From": intCoordToJson(item.from), "To": intCoordToJson(item.to)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.DoublePointPairAnswer
class DoublePointPairAnswer implements Answer {
  final IntCoord from1;
  final IntCoord to1;
  final IntCoord from2;
  final IntCoord to2;

  const DoublePointPairAnswer(this.from1, this.to1, this.from2, this.to2);

  @override
  String toString() {
    return "DoublePointPairAnswer($from1, $to1, $from2, $to2)";
  }
}

DoublePointPairAnswer doublePointPairAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DoublePointPairAnswer(
      intCoordFromJson(json['From1']),
      intCoordFromJson(json['To1']),
      intCoordFromJson(json['From2']),
      intCoordFromJson(json['To2']));
}

JSON doublePointPairAnswerToJson(DoublePointPairAnswer item) {
  return {
    "From1": intCoordToJson(item.from1),
    "To1": intCoordToJson(item.to1),
    "From2": intCoordToJson(item.from2),
    "To2": intCoordToJson(item.to2)
  };
}

// github.com/benoitkugler/maths-online/maths/repere.Drawings
class Drawings {
  final Map<String, LabeledPoint> points;
  final List<Segment> segments;
  final List<Line> lines;
  final List<Area> areas;

  const Drawings(this.points, this.segments, this.lines, this.areas);

  @override
  String toString() {
    return "Drawings($points, $segments, $lines, $areas)";
  }
}

Drawings drawingsFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Drawings(
      dictString_LabeledPointFromJson(json['Points']),
      listSegmentFromJson(json['Segments']),
      listLineFromJson(json['Lines']),
      listAreaFromJson(json['Areas']));
}

JSON drawingsToJson(Drawings item) {
  return {
    "Points": dictString_LabeledPointToJson(item.points),
    "Segments": listSegmentToJson(item.segments),
    "Lines": listLineToJson(item.lines),
    "Areas": listAreaToJson(item.areas)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.DropDownFieldBlock
class DropDownFieldBlock implements Block {
  final List<TextLine> proposals;
  final int iD;

  const DropDownFieldBlock(this.proposals, this.iD);

  @override
  String toString() {
    return "DropDownFieldBlock($proposals, $iD)";
  }
}

DropDownFieldBlock dropDownFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return DropDownFieldBlock(
      listListTextOrMathFromJson(json['Proposals']), intFromJson(json['ID']));
}

JSON dropDownFieldBlockToJson(DropDownFieldBlock item) {
  return {
    "Proposals": listListTextOrMathToJson(item.proposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.Enonce
typedef Enonce = List<Block>;

// github.com/benoitkugler/maths-online/maths/questions/client.Equality
class Equality implements Assertion {
  final List<TextLine> terms;
  final TextLine def;
  final bool withDef;

  const Equality(this.terms, this.def, this.withDef);

  @override
  String toString() {
    return "Equality($terms, $def, $withDef)";
  }
}

Equality equalityFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Equality(listListTextOrMathFromJson(json['Terms']),
      listTextOrMathFromJson(json['Def']), boolFromJson(json['WithDef']));
}

JSON equalityToJson(Equality item) {
  return {
    "Terms": listListTextOrMathToJson(item.terms),
    "Def": listTextOrMathToJson(item.def),
    "WithDef": boolToJson(item.withDef)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.EvaluateExerciceIn
class EvaluateExerciceIn {
  final IdExercice idExercice;
  final Map<int, Answer> answers;
  final ProgressionExt progression;

  const EvaluateExerciceIn(this.idExercice, this.answers, this.progression);

  @override
  String toString() {
    return "EvaluateExerciceIn($idExercice, $answers, $progression)";
  }
}

EvaluateExerciceIn evaluateExerciceInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return EvaluateExerciceIn(
      intFromJson(json['IdExercice']),
      dictInt_AnswerFromJson(json['Answers']),
      progressionExtFromJson(json['Progression']));
}

JSON evaluateExerciceInToJson(EvaluateExerciceIn item) {
  return {
    "IdExercice": intToJson(item.idExercice),
    "Answers": dictInt_AnswerToJson(item.answers),
    "Progression": progressionExtToJson(item.progression)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.ExpressionAnswer
class ExpressionAnswer implements Answer {
  final String expression;

  const ExpressionAnswer(this.expression);

  @override
  String toString() {
    return "ExpressionAnswer($expression)";
  }
}

ExpressionAnswer expressionAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ExpressionAnswer(stringFromJson(json['Expression']));
}

JSON expressionAnswerToJson(ExpressionAnswer item) {
  return {"Expression": stringToJson(item.expression)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.ExpressionFieldBlock
class ExpressionFieldBlock implements Block {
  final String label;
  final int sizeHint;
  final int iD;

  const ExpressionFieldBlock(this.label, this.sizeHint, this.iD);

  @override
  String toString() {
    return "ExpressionFieldBlock($label, $sizeHint, $iD)";
  }
}

ExpressionFieldBlock expressionFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ExpressionFieldBlock(stringFromJson(json['Label']),
      intFromJson(json['SizeHint']), intFromJson(json['ID']));
}

JSON expressionFieldBlockToJson(ExpressionFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "SizeHint": intToJson(item.sizeHint),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/repere.Figure
class Figure {
  final Drawings drawings;
  final RepereBounds bounds;
  final bool showGrid;
  final bool showOrigin;

  const Figure(this.drawings, this.bounds, this.showGrid, this.showOrigin);

  @override
  String toString() {
    return "Figure($drawings, $bounds, $showGrid, $showOrigin)";
  }
}

Figure figureFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Figure(
      drawingsFromJson(json['Drawings']),
      repereBoundsFromJson(json['Bounds']),
      boolFromJson(json['ShowGrid']),
      boolFromJson(json['ShowOrigin']));
}

JSON figureToJson(Figure item) {
  return {
    "Drawings": drawingsToJson(item.drawings),
    "Bounds": repereBoundsToJson(item.bounds),
    "ShowGrid": boolToJson(item.showGrid),
    "ShowOrigin": boolToJson(item.showOrigin)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.FigureBlock
class FigureBlock implements Block {
  final Figure figure;

  const FigureBlock(this.figure);

  @override
  String toString() {
    return "FigureBlock($figure)";
  }
}

FigureBlock figureBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FigureBlock(figureFromJson(json['Figure']));
}

JSON figureBlockToJson(FigureBlock item) {
  return {"Figure": figureToJson(item.figure)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.FigurePointFieldBlock
class FigurePointFieldBlock implements Block {
  final Figure figure;
  final int iD;

  const FigurePointFieldBlock(this.figure, this.iD);

  @override
  String toString() {
    return "FigurePointFieldBlock($figure, $iD)";
  }
}

FigurePointFieldBlock figurePointFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FigurePointFieldBlock(
      figureFromJson(json['Figure']), intFromJson(json['ID']));
}

JSON figurePointFieldBlockToJson(FigurePointFieldBlock item) {
  return {"Figure": figureToJson(item.figure), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.FigureVectorFieldBlock
class FigureVectorFieldBlock implements Block {
  final String lineLabel;
  final Figure figure;
  final int iD;
  final bool asLine;

  const FigureVectorFieldBlock(
      this.lineLabel, this.figure, this.iD, this.asLine);

  @override
  String toString() {
    return "FigureVectorFieldBlock($lineLabel, $figure, $iD, $asLine)";
  }
}

FigureVectorFieldBlock figureVectorFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FigureVectorFieldBlock(
      stringFromJson(json['LineLabel']),
      figureFromJson(json['Figure']),
      intFromJson(json['ID']),
      boolFromJson(json['AsLine']));
}

JSON figureVectorFieldBlockToJson(FigureVectorFieldBlock item) {
  return {
    "LineLabel": stringToJson(item.lineLabel),
    "Figure": figureToJson(item.figure),
    "ID": intToJson(item.iD),
    "AsLine": boolToJson(item.asLine)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.FigureVectorPairFieldBlock
class FigureVectorPairFieldBlock implements Block {
  final Figure figure;
  final int iD;

  const FigureVectorPairFieldBlock(this.figure, this.iD);

  @override
  String toString() {
    return "FigureVectorPairFieldBlock($figure, $iD)";
  }
}

FigureVectorPairFieldBlock figureVectorPairFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FigureVectorPairFieldBlock(
      figureFromJson(json['Figure']), intFromJson(json['ID']));
}

JSON figureVectorPairFieldBlockToJson(FigureVectorPairFieldBlock item) {
  return {"Figure": figureToJson(item.figure), "ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/prof/editor.Flow
enum Flow { parallel, sequencial }

extension _FlowExt on Flow {
  static Flow fromValue(int i) {
    return Flow.values[i];
  }

  int toValue() {
    return index;
  }
}

Flow flowFromJson(dynamic json) => _FlowExt.fromValue(json as int);

dynamic flowToJson(Flow item) => item.toValue();

// github.com/benoitkugler/maths-online/maths/questions/client.FormulaBlock
class FormulaBlock implements Block {
  final String formula;

  const FormulaBlock(this.formula);

  @override
  String toString() {
    return "FormulaBlock($formula)";
  }
}

FormulaBlock formulaBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FormulaBlock(stringFromJson(json['Formula']));
}

JSON formulaBlockToJson(FormulaBlock item) {
  return {"Formula": stringToJson(item.formula)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.FunctionArea
class FunctionArea {
  final String color;
  final List<BezierCurve> path;

  const FunctionArea(this.color, this.path);

  @override
  String toString() {
    return "FunctionArea($color, $path)";
  }
}

FunctionArea functionAreaFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionArea(
      stringFromJson(json['Color']), listBezierCurveFromJson(json['Path']));
}

JSON functionAreaToJson(FunctionArea item) {
  return {
    "Color": stringToJson(item.color),
    "Path": listBezierCurveToJson(item.path)
  };
}

// github.com/benoitkugler/maths-online/maths/functiongrapher.FunctionDecoration
class FunctionDecoration {
  final String label;
  final String color;

  const FunctionDecoration(this.label, this.color);

  @override
  String toString() {
    return "FunctionDecoration($label, $color)";
  }
}

FunctionDecoration functionDecorationFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionDecoration(
      stringFromJson(json['Label']), stringFromJson(json['Color']));
}

JSON functionDecorationToJson(FunctionDecoration item) {
  return {"Label": stringToJson(item.label), "Color": stringToJson(item.color)};
}

// github.com/benoitkugler/maths-online/maths/functiongrapher.FunctionGraph
class FunctionGraph {
  final FunctionDecoration decoration;
  final List<BezierCurve> segments;

  const FunctionGraph(this.decoration, this.segments);

  @override
  String toString() {
    return "FunctionGraph($decoration, $segments)";
  }
}

FunctionGraph functionGraphFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionGraph(functionDecorationFromJson(json['Decoration']),
      listBezierCurveFromJson(json['Segments']));
}

JSON functionGraphToJson(FunctionGraph item) {
  return {
    "Decoration": functionDecorationToJson(item.decoration),
    "Segments": listBezierCurveToJson(item.segments)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.FunctionPointsAnswer
class FunctionPointsAnswer implements Answer {
  final List<int> fxs;

  const FunctionPointsAnswer(this.fxs);

  @override
  String toString() {
    return "FunctionPointsAnswer($fxs)";
  }
}

FunctionPointsAnswer functionPointsAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionPointsAnswer(listIntFromJson(json['Fxs']));
}

JSON functionPointsAnswerToJson(FunctionPointsAnswer item) {
  return {"Fxs": listIntToJson(item.fxs)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.FunctionPointsFieldBlock
class FunctionPointsFieldBlock implements Block {
  final String label;
  final List<int> xs;
  final List<double> dfxs;
  final RepereBounds bounds;
  final int iD;

  const FunctionPointsFieldBlock(
      this.label, this.xs, this.dfxs, this.bounds, this.iD);

  @override
  String toString() {
    return "FunctionPointsFieldBlock($label, $xs, $dfxs, $bounds, $iD)";
  }
}

FunctionPointsFieldBlock functionPointsFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionPointsFieldBlock(
      stringFromJson(json['Label']),
      listIntFromJson(json['Xs']),
      listDoubleFromJson(json['Dfxs']),
      repereBoundsFromJson(json['Bounds']),
      intFromJson(json['ID']));
}

JSON functionPointsFieldBlockToJson(FunctionPointsFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Xs": listIntToJson(item.xs),
    "Dfxs": listDoubleToJson(item.dfxs),
    "Bounds": repereBoundsToJson(item.bounds),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.FunctionsGraphBlock
class FunctionsGraphBlock implements Block {
  final List<FunctionGraph> functions;
  final List<FunctionArea> areas;
  final RepereBounds bounds;

  const FunctionsGraphBlock(this.functions, this.areas, this.bounds);

  @override
  String toString() {
    return "FunctionsGraphBlock($functions, $areas, $bounds)";
  }
}

FunctionsGraphBlock functionsGraphBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FunctionsGraphBlock(
      listFunctionGraphFromJson(json['Functions']),
      listFunctionAreaFromJson(json['Areas']),
      repereBoundsFromJson(json['Bounds']));
}

JSON functionsGraphBlockToJson(FunctionsGraphBlock item) {
  return {
    "Functions": listFunctionGraphToJson(item.functions),
    "Areas": listFunctionAreaToJson(item.areas),
    "Bounds": repereBoundsToJson(item.bounds)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.IdExercice
typedef IdExercice = int;

// github.com/benoitkugler/maths-online/prof/editor.IdProgression
typedef IdProgression = int;

// github.com/benoitkugler/maths-online/prof/editor.IdQuestion
typedef IdQuestion = int;

// github.com/benoitkugler/maths-online/prof/editor.InstantiatedExercice
class InstantiatedExercice {
  final IdExercice id;
  final String title;
  final Flow flow;
  final List<InstantiatedQuestion> questions;
  final List<int> baremes;

  const InstantiatedExercice(
      this.id, this.title, this.flow, this.questions, this.baremes);

  @override
  String toString() {
    return "InstantiatedExercice($id, $title, $flow, $questions, $baremes)";
  }
}

InstantiatedExercice instantiatedExerciceFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return InstantiatedExercice(
      intFromJson(json['Id']),
      stringFromJson(json['Title']),
      flowFromJson(json['Flow']),
      listInstantiatedQuestionFromJson(json['Questions']),
      listIntFromJson(json['Baremes']));
}

JSON instantiatedExerciceToJson(InstantiatedExercice item) {
  return {
    "Id": intToJson(item.id),
    "Title": stringToJson(item.title),
    "Flow": flowToJson(item.flow),
    "Questions": listInstantiatedQuestionToJson(item.questions),
    "Baremes": listIntToJson(item.baremes)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.InstantiatedQuestion
class InstantiatedQuestion {
  final IdQuestion id;
  final Question question;
  final List<VarEntry> params;

  const InstantiatedQuestion(this.id, this.question, this.params);

  @override
  String toString() {
    return "InstantiatedQuestion($id, $question, $params)";
  }
}

InstantiatedQuestion instantiatedQuestionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return InstantiatedQuestion(intFromJson(json['Id']),
      questionFromJson(json['Question']), listVarEntryFromJson(json['Params']));
}

JSON instantiatedQuestionToJson(InstantiatedQuestion item) {
  return {
    "Id": intToJson(item.id),
    "Question": questionToJson(item.question),
    "Params": listVarEntryToJson(item.params)
  };
}

// github.com/benoitkugler/maths-online/maths/repere.IntCoord
class IntCoord {
  final int x;
  final int y;

  const IntCoord(this.x, this.y);

  @override
  String toString() {
    return "IntCoord($x, $y)";
  }
}

IntCoord intCoordFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return IntCoord(intFromJson(json['X']), intFromJson(json['Y']));
}

JSON intCoordToJson(IntCoord item) {
  return {"X": intToJson(item.x), "Y": intToJson(item.y)};
}

// github.com/benoitkugler/maths-online/maths/repere.LabelPos
enum LabelPos {
  top,
  bottom,
  left,
  right,
  topLeft,
  topRight,
  bottomRight,
  bottomLeft,
  hide
}

extension _LabelPosExt on LabelPos {
  static LabelPos fromValue(int i) {
    return LabelPos.values[i];
  }

  int toValue() {
    return index;
  }
}

LabelPos labelPosFromJson(dynamic json) => _LabelPosExt.fromValue(json as int);

dynamic labelPosToJson(LabelPos item) => item.toValue();

// github.com/benoitkugler/maths-online/maths/repere.LabeledPoint
class LabeledPoint {
  final String color;
  final PosPoint point;

  const LabeledPoint(this.color, this.point);

  @override
  String toString() {
    return "LabeledPoint($color, $point)";
  }
}

LabeledPoint labeledPointFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return LabeledPoint(
      stringFromJson(json['Color']), posPointFromJson(json['Point']));
}

JSON labeledPointToJson(LabeledPoint item) {
  return {
    "Color": stringToJson(item.color),
    "Point": posPointToJson(item.point)
  };
}

// github.com/benoitkugler/maths-online/maths/repere.Line
class Line {
  final String label;
  final String color;
  final double a;
  final double b;

  const Line(this.label, this.color, this.a, this.b);

  @override
  String toString() {
    return "Line($label, $color, $a, $b)";
  }
}

Line lineFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Line(stringFromJson(json['Label']), stringFromJson(json['Color']),
      doubleFromJson(json['A']), doubleFromJson(json['B']));
}

JSON lineToJson(Line item) {
  return {
    "Label": stringToJson(item.label),
    "Color": stringToJson(item.color),
    "A": doubleToJson(item.a),
    "B": doubleToJson(item.b)
  };
}

/// github.com/benoitkugler/maths-online/prof/editor.LoopbackClientEvent
abstract class LoopbackClientEvent {}

LoopbackClientEvent loopbackClientEventFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "loopbackExerciceValidIn":
      return loopbackExerciceValidInFromJson(data);
    case "loopbackPing":
      return loopbackPingFromJson(data);
    case "loopbackQuestionCorrectAnswersIn":
      return loopbackQuestionCorrectAnswersInFromJson(data);
    case "loopbackQuestionValidIn":
      return loopbackQuestionValidInFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON loopbackClientEventToJson(LoopbackClientEvent item) {
  if (item is loopbackExerciceValidIn) {
    return {
      'Kind': "loopbackExerciceValidIn",
      'Data': loopbackExerciceValidInToJson(item)
    };
  } else if (item is loopbackPing) {
    return {'Kind': "loopbackPing", 'Data': loopbackPingToJson(item)};
  } else if (item is loopbackQuestionCorrectAnswersIn) {
    return {
      'Kind': "loopbackQuestionCorrectAnswersIn",
      'Data': loopbackQuestionCorrectAnswersInToJson(item)
    };
  } else if (item is loopbackQuestionValidIn) {
    return {
      'Kind': "loopbackQuestionValidIn",
      'Data': loopbackQuestionValidInToJson(item)
    };
  } else {
    throw ("unexpected type");
  }
}

/// github.com/benoitkugler/maths-online/prof/editor.LoopbackServerEvent
abstract class LoopbackServerEvent {}

LoopbackServerEvent loopbackServerEventFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "loopbackPaused":
      return loopbackPausedFromJson(data);
    case "loopbackQuestion":
      return loopbackQuestionFromJson(data);
    case "loopbackQuestionCorrectAnswersOut":
      return loopbackQuestionCorrectAnswersOutFromJson(data);
    case "loopbackQuestionValidOut":
      return loopbackQuestionValidOutFromJson(data);
    case "loopbackShowExercice":
      return loopbackShowExerciceFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON loopbackServerEventToJson(LoopbackServerEvent item) {
  if (item is loopbackPaused) {
    return {'Kind': "loopbackPaused", 'Data': loopbackPausedToJson(item)};
  } else if (item is loopbackQuestion) {
    return {'Kind': "loopbackQuestion", 'Data': loopbackQuestionToJson(item)};
  } else if (item is loopbackQuestionCorrectAnswersOut) {
    return {
      'Kind': "loopbackQuestionCorrectAnswersOut",
      'Data': loopbackQuestionCorrectAnswersOutToJson(item)
    };
  } else if (item is loopbackQuestionValidOut) {
    return {
      'Kind': "loopbackQuestionValidOut",
      'Data': loopbackQuestionValidOutToJson(item)
    };
  } else if (item is loopbackShowExercice) {
    return {
      'Kind': "loopbackShowExercice",
      'Data': loopbackShowExerciceToJson(item)
    };
  } else {
    throw ("unexpected type");
  }
}

// github.com/benoitkugler/maths-online/maths/questions/client.Node
class Node implements Assertion {
  final Assertion left;
  final Assertion right;
  final Binary op;

  const Node(this.left, this.right, this.op);

  @override
  String toString() {
    return "Node($left, $right, $op)";
  }
}

Node nodeFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Node(assertionFromJson(json['Left']), assertionFromJson(json['Right']),
      binaryFromJson(json['Op']));
}

JSON nodeToJson(Node item) {
  return {
    "Left": assertionToJson(item.left),
    "Right": assertionToJson(item.right),
    "Op": binaryToJson(item.op)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.NumberAnswer
class NumberAnswer implements Answer {
  final double value;

  const NumberAnswer(this.value);

  @override
  String toString() {
    return "NumberAnswer($value)";
  }
}

NumberAnswer numberAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return NumberAnswer(doubleFromJson(json['Value']));
}

JSON numberAnswerToJson(NumberAnswer item) {
  return {"Value": doubleToJson(item.value)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.NumberFieldBlock
class NumberFieldBlock implements Block {
  final int iD;

  const NumberFieldBlock(this.iD);

  @override
  String toString() {
    return "NumberFieldBlock($iD)";
  }
}

NumberFieldBlock numberFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return NumberFieldBlock(intFromJson(json['ID']));
}

JSON numberFieldBlockToJson(NumberFieldBlock item) {
  return {"ID": intToJson(item.iD)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.OrderedListAnswer
class OrderedListAnswer implements Answer {
  final List<int> indices;

  const OrderedListAnswer(this.indices);

  @override
  String toString() {
    return "OrderedListAnswer($indices)";
  }
}

OrderedListAnswer orderedListAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return OrderedListAnswer(listIntFromJson(json['Indices']));
}

JSON orderedListAnswerToJson(OrderedListAnswer item) {
  return {"Indices": listIntToJson(item.indices)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.OrderedListFieldBlock
class OrderedListFieldBlock implements Block {
  final String label;
  final List<TextLine> proposals;
  final int answerLength;
  final int iD;

  const OrderedListFieldBlock(
      this.label, this.proposals, this.answerLength, this.iD);

  @override
  String toString() {
    return "OrderedListFieldBlock($label, $proposals, $answerLength, $iD)";
  }
}

OrderedListFieldBlock orderedListFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return OrderedListFieldBlock(
      stringFromJson(json['Label']),
      listListTextOrMathFromJson(json['Proposals']),
      intFromJson(json['AnswerLength']),
      intFromJson(json['ID']));
}

JSON orderedListFieldBlockToJson(OrderedListFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Proposals": listListTextOrMathToJson(item.proposals),
    "AnswerLength": intToJson(item.answerLength),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.PointAnswer
class PointAnswer implements Answer {
  final IntCoord point;

  const PointAnswer(this.point);

  @override
  String toString() {
    return "PointAnswer($point)";
  }
}

PointAnswer pointAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PointAnswer(intCoordFromJson(json['Point']));
}

JSON pointAnswerToJson(PointAnswer item) {
  return {"Point": intCoordToJson(item.point)};
}

// github.com/benoitkugler/maths-online/maths/repere.PosPoint
class PosPoint {
  final Coord point;
  final LabelPos pos;

  const PosPoint(this.point, this.pos);

  @override
  String toString() {
    return "PosPoint($point, $pos)";
  }
}

PosPoint posPointFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return PosPoint(coordFromJson(json['Point']), labelPosFromJson(json['Pos']));
}

JSON posPointToJson(PosPoint item) {
  return {"Point": coordToJson(item.point), "Pos": labelPosToJson(item.pos)};
}

// github.com/benoitkugler/maths-online/prof/editor.Progression
class Progression {
  final IdProgression id;
  final IdExercice id_exercice;

  const Progression(this.id, this.id_exercice);

  @override
  String toString() {
    return "Progression($id, $id_exercice)";
  }
}

Progression progressionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Progression(intFromJson(json['Id']), intFromJson(json['id_exercice']));
}

JSON progressionToJson(Progression item) {
  return {"Id": intToJson(item.id), "id_exercice": intToJson(item.id_exercice)};
}

// github.com/benoitkugler/maths-online/prof/editor.ProgressionExt
class ProgressionExt {
  final Progression progression;
  final List<QuestionHistory> questions;
  final int nextQuestion;

  const ProgressionExt(this.progression, this.questions, this.nextQuestion);

  @override
  String toString() {
    return "ProgressionExt($progression, $questions, $nextQuestion)";
  }
}

ProgressionExt progressionExtFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ProgressionExt(
      progressionFromJson(json['Progression']),
      listListBoolFromJson(json['Questions']),
      intFromJson(json['NextQuestion']));
}

JSON progressionExtToJson(ProgressionExt item) {
  return {
    "Progression": progressionToJson(item.progression),
    "Questions": listListBoolToJson(item.questions),
    "NextQuestion": intToJson(item.nextQuestion)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.Proof
class Proof {
  final Sequence root;

  const Proof(this.root);

  @override
  String toString() {
    return "Proof($root)";
  }
}

Proof proofFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Proof(sequenceFromJson(json['Root']));
}

JSON proofToJson(Proof item) {
  return {"Root": sequenceToJson(item.root)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.ProofAnswer
class ProofAnswer implements Answer {
  final Proof proof;

  const ProofAnswer(this.proof);

  @override
  String toString() {
    return "ProofAnswer($proof)";
  }
}

ProofAnswer proofAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ProofAnswer(proofFromJson(json['Proof']));
}

JSON proofAnswerToJson(ProofAnswer item) {
  return {"Proof": proofToJson(item.proof)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.ProofFieldBlock
class ProofFieldBlock implements Block {
  final Proof shape;
  final List<TextLine> termProposals;
  final int iD;

  const ProofFieldBlock(this.shape, this.termProposals, this.iD);

  @override
  String toString() {
    return "ProofFieldBlock($shape, $termProposals, $iD)";
  }
}

ProofFieldBlock proofFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ProofFieldBlock(
      proofFromJson(json['Shape']),
      listListTextOrMathFromJson(json['TermProposals']),
      intFromJson(json['ID']));
}

JSON proofFieldBlockToJson(ProofFieldBlock item) {
  return {
    "Shape": proofToJson(item.shape),
    "TermProposals": listListTextOrMathToJson(item.termProposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.Question
class Question {
  final String title;
  final Enonce enonce;

  const Question(this.title, this.enonce);

  @override
  String toString() {
    return "Question($title, $enonce)";
  }
}

Question questionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Question(
      stringFromJson(json['Title']), listBlockFromJson(json['Enonce']));
}

JSON questionToJson(Question item) {
  return {
    "Title": stringToJson(item.title),
    "Enonce": listBlockToJson(item.enonce)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.QuestionAnswersIn
class QuestionAnswersIn {
  final Answers data;

  const QuestionAnswersIn(this.data);

  @override
  String toString() {
    return "QuestionAnswersIn($data)";
  }
}

QuestionAnswersIn questionAnswersInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionAnswersIn(dictInt_AnswerFromJson(json['Data']));
}

JSON questionAnswersInToJson(QuestionAnswersIn item) {
  return {"Data": dictInt_AnswerToJson(item.data)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.QuestionAnswersOut
class QuestionAnswersOut {
  final Map<int, bool> results;
  final Answers expectedAnswers;

  const QuestionAnswersOut(this.results, this.expectedAnswers);

  @override
  String toString() {
    return "QuestionAnswersOut($results, $expectedAnswers)";
  }
}

QuestionAnswersOut questionAnswersOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return QuestionAnswersOut(dictInt_BoolFromJson(json['Results']),
      dictInt_AnswerFromJson(json['ExpectedAnswers']));
}

JSON questionAnswersOutToJson(QuestionAnswersOut item) {
  return {
    "Results": dictInt_BoolToJson(item.results),
    "ExpectedAnswers": dictInt_AnswerToJson(item.expectedAnswers)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.QuestionHistory
typedef QuestionHistory = List<bool>;

// github.com/benoitkugler/maths-online/maths/questions/client.RadioAnswer
class RadioAnswer implements Answer {
  final int index;

  const RadioAnswer(this.index);

  @override
  String toString() {
    return "RadioAnswer($index)";
  }
}

RadioAnswer radioAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return RadioAnswer(intFromJson(json['Index']));
}

JSON radioAnswerToJson(RadioAnswer item) {
  return {"Index": intToJson(item.index)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.RadioFieldBlock
class RadioFieldBlock implements Block {
  final List<TextLine> proposals;
  final int iD;

  const RadioFieldBlock(this.proposals, this.iD);

  @override
  String toString() {
    return "RadioFieldBlock($proposals, $iD)";
  }
}

RadioFieldBlock radioFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return RadioFieldBlock(
      listListTextOrMathFromJson(json['Proposals']), intFromJson(json['ID']));
}

JSON radioFieldBlockToJson(RadioFieldBlock item) {
  return {
    "Proposals": listListTextOrMathToJson(item.proposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/repere.RepereBounds
class RepereBounds {
  final int width;
  final int height;
  final Coord origin;

  const RepereBounds(this.width, this.height, this.origin);

  @override
  String toString() {
    return "RepereBounds($width, $height, $origin)";
  }
}

RepereBounds repereBoundsFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return RepereBounds(intFromJson(json['Width']), intFromJson(json['Height']),
      coordFromJson(json['Origin']));
}

JSON repereBoundsToJson(RepereBounds item) {
  return {
    "Width": intToJson(item.width),
    "Height": intToJson(item.height),
    "Origin": coordToJson(item.origin)
  };
}

// github.com/benoitkugler/maths-online/maths/repere.Segment
class Segment {
  final String labelName;
  final String from;
  final String to;
  final String color;
  final LabelPos labelPos;
  final SegmentKind kind;

  const Segment(
      this.labelName, this.from, this.to, this.color, this.labelPos, this.kind);

  @override
  String toString() {
    return "Segment($labelName, $from, $to, $color, $labelPos, $kind)";
  }
}

Segment segmentFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Segment(
      stringFromJson(json['LabelName']),
      stringFromJson(json['From']),
      stringFromJson(json['To']),
      stringFromJson(json['Color']),
      labelPosFromJson(json['LabelPos']),
      segmentKindFromJson(json['Kind']));
}

JSON segmentToJson(Segment item) {
  return {
    "LabelName": stringToJson(item.labelName),
    "From": stringToJson(item.from),
    "To": stringToJson(item.to),
    "Color": stringToJson(item.color),
    "LabelPos": labelPosToJson(item.labelPos),
    "Kind": segmentKindToJson(item.kind)
  };
}

// github.com/benoitkugler/maths-online/maths/repere.SegmentKind
enum SegmentKind { sKSegment, sKVector, sKLine }

extension _SegmentKindExt on SegmentKind {
  static SegmentKind fromValue(int i) {
    return SegmentKind.values[i];
  }

  int toValue() {
    return index;
  }
}

SegmentKind segmentKindFromJson(dynamic json) =>
    _SegmentKindExt.fromValue(json as int);

dynamic segmentKindToJson(SegmentKind item) => item.toValue();

// github.com/benoitkugler/maths-online/maths/questions/client.Sequence
class Sequence implements Assertion {
  final Assertions parts;

  const Sequence(this.parts);

  @override
  String toString() {
    return "Sequence($parts)";
  }
}

Sequence sequenceFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Sequence(listAssertionFromJson(json['Parts']));
}

JSON sequenceToJson(Sequence item) {
  return {"Parts": listAssertionToJson(item.parts)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.SignColumn
class SignColumn {
  final String x;
  final bool isYForbiddenValue;
  final bool isSign;
  final bool isPositive;

  const SignColumn(
      this.x, this.isYForbiddenValue, this.isSign, this.isPositive);

  @override
  String toString() {
    return "SignColumn($x, $isYForbiddenValue, $isSign, $isPositive)";
  }
}

SignColumn signColumnFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return SignColumn(
      stringFromJson(json['X']),
      boolFromJson(json['IsYForbiddenValue']),
      boolFromJson(json['IsSign']),
      boolFromJson(json['IsPositive']));
}

JSON signColumnToJson(SignColumn item) {
  return {
    "X": stringToJson(item.x),
    "IsYForbiddenValue": boolToJson(item.isYForbiddenValue),
    "IsSign": boolToJson(item.isSign),
    "IsPositive": boolToJson(item.isPositive)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.SignTableBlock
class SignTableBlock implements Block {
  final String label;
  final List<SignColumn> columns;

  const SignTableBlock(this.label, this.columns);

  @override
  String toString() {
    return "SignTableBlock($label, $columns)";
  }
}

SignTableBlock signTableBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return SignTableBlock(
      stringFromJson(json['Label']), listSignColumnFromJson(json['Columns']));
}

JSON signTableBlockToJson(SignTableBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Columns": listSignColumnToJson(item.columns)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.Statement
class Statement implements Assertion {
  final TextLine content;

  const Statement(this.content);

  @override
  String toString() {
    return "Statement($content)";
  }
}

Statement statementFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Statement(listTextOrMathFromJson(json['Content']));
}

JSON statementToJson(Statement item) {
  return {"Content": listTextOrMathToJson(item.content)};
}

String stringFromJson(dynamic json) => json == null ? "" : json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online/maths/questions/client.TableAnswer
class TableAnswer implements Answer {
  final List<List<double>> rows;

  const TableAnswer(this.rows);

  @override
  String toString() {
    return "TableAnswer($rows)";
  }
}

TableAnswer tableAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TableAnswer(listListDoubleFromJson(json['Rows']));
}

JSON tableAnswerToJson(TableAnswer item) {
  return {"Rows": listListDoubleToJson(item.rows)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.TableBlock
class TableBlock implements Block {
  final List<TextOrMath> horizontalHeaders;
  final List<TextOrMath> verticalHeaders;
  final List<List<TextOrMath>> values;

  const TableBlock(this.horizontalHeaders, this.verticalHeaders, this.values);

  @override
  String toString() {
    return "TableBlock($horizontalHeaders, $verticalHeaders, $values)";
  }
}

TableBlock tableBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TableBlock(
      listTextOrMathFromJson(json['HorizontalHeaders']),
      listTextOrMathFromJson(json['VerticalHeaders']),
      listListTextOrMathFromJson(json['Values']));
}

JSON tableBlockToJson(TableBlock item) {
  return {
    "HorizontalHeaders": listTextOrMathToJson(item.horizontalHeaders),
    "VerticalHeaders": listTextOrMathToJson(item.verticalHeaders),
    "Values": listListTextOrMathToJson(item.values)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.TableFieldBlock
class TableFieldBlock implements Block {
  final List<TextOrMath> horizontalHeaders;
  final List<TextOrMath> verticalHeaders;
  final int iD;

  const TableFieldBlock(this.horizontalHeaders, this.verticalHeaders, this.iD);

  @override
  String toString() {
    return "TableFieldBlock($horizontalHeaders, $verticalHeaders, $iD)";
  }
}

TableFieldBlock tableFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TableFieldBlock(listTextOrMathFromJson(json['HorizontalHeaders']),
      listTextOrMathFromJson(json['VerticalHeaders']), intFromJson(json['ID']));
}

JSON tableFieldBlockToJson(TableFieldBlock item) {
  return {
    "HorizontalHeaders": listTextOrMathToJson(item.horizontalHeaders),
    "VerticalHeaders": listTextOrMathToJson(item.verticalHeaders),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.TextBlock
class TextBlock implements Block {
  final TextLine parts;
  final bool bold;
  final bool italic;
  final bool smaller;

  const TextBlock(this.parts, this.bold, this.italic, this.smaller);

  @override
  String toString() {
    return "TextBlock($parts, $bold, $italic, $smaller)";
  }
}

TextBlock textBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TextBlock(
      listTextOrMathFromJson(json['Parts']),
      boolFromJson(json['Bold']),
      boolFromJson(json['Italic']),
      boolFromJson(json['Smaller']));
}

JSON textBlockToJson(TextBlock item) {
  return {
    "Parts": listTextOrMathToJson(item.parts),
    "Bold": boolToJson(item.bold),
    "Italic": boolToJson(item.italic),
    "Smaller": boolToJson(item.smaller)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.TextLine
typedef TextLine = List<TextOrMath>;

// github.com/benoitkugler/maths-online/maths/questions/client.TextOrMath
class TextOrMath {
  final String text;
  final bool isMath;

  const TextOrMath(this.text, this.isMath);

  @override
  String toString() {
    return "TextOrMath($text, $isMath)";
  }
}

TextOrMath textOrMathFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TextOrMath(stringFromJson(json['Text']), boolFromJson(json['IsMath']));
}

JSON textOrMathToJson(TextOrMath item) {
  return {"Text": stringToJson(item.text), "IsMath": boolToJson(item.isMath)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.TreeAnswer
class TreeAnswer implements Answer {
  final TreeNodeAnswer root;

  const TreeAnswer(this.root);

  @override
  String toString() {
    return "TreeAnswer($root)";
  }
}

TreeAnswer treeAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TreeAnswer(treeNodeAnswerFromJson(json['Root']));
}

JSON treeAnswerToJson(TreeAnswer item) {
  return {"Root": treeNodeAnswerToJson(item.root)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.TreeFieldBlock
class TreeFieldBlock implements Block {
  final List<TreeShape> shapeProposals;
  final List<TextOrMath> eventsProposals;
  final int iD;

  const TreeFieldBlock(this.shapeProposals, this.eventsProposals, this.iD);

  @override
  String toString() {
    return "TreeFieldBlock($shapeProposals, $eventsProposals, $iD)";
  }
}

TreeFieldBlock treeFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TreeFieldBlock(listListIntFromJson(json['ShapeProposals']),
      listTextOrMathFromJson(json['EventsProposals']), intFromJson(json['ID']));
}

JSON treeFieldBlockToJson(TreeFieldBlock item) {
  return {
    "ShapeProposals": listListIntToJson(item.shapeProposals),
    "EventsProposals": listTextOrMathToJson(item.eventsProposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.TreeNodeAnswer
class TreeNodeAnswer {
  final List<TreeNodeAnswer> children;
  final List<double> probabilities;
  final int value;

  const TreeNodeAnswer(this.children, this.probabilities, this.value);

  @override
  String toString() {
    return "TreeNodeAnswer($children, $probabilities, $value)";
  }
}

TreeNodeAnswer treeNodeAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TreeNodeAnswer(listTreeNodeAnswerFromJson(json['Children']),
      listDoubleFromJson(json['Probabilities']), intFromJson(json['Value']));
}

JSON treeNodeAnswerToJson(TreeNodeAnswer item) {
  return {
    "Children": listTreeNodeAnswerToJson(item.children),
    "Probabilities": listDoubleToJson(item.probabilities),
    "Value": intToJson(item.value)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.TreeShape
typedef TreeShape = List<int>;

// github.com/benoitkugler/maths-online/prof/editor.VarEntry
class VarEntry {
  final Variable variable;
  final String resolved;

  const VarEntry(this.variable, this.resolved);

  @override
  String toString() {
    return "VarEntry($variable, $resolved)";
  }
}

VarEntry varEntryFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VarEntry(
      variableFromJson(json['Variable']), stringFromJson(json['Resolved']));
}

JSON varEntryToJson(VarEntry item) {
  return {
    "Variable": variableToJson(item.variable),
    "Resolved": stringToJson(item.resolved)
  };
}

// github.com/benoitkugler/maths-online/maths/expression.Variable
class Variable {
  final String indice;
  final int name;

  const Variable(this.indice, this.name);

  @override
  String toString() {
    return "Variable($indice, $name)";
  }
}

Variable variableFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Variable(stringFromJson(json['Indice']), intFromJson(json['Name']));
}

JSON variableToJson(Variable item) {
  return {"Indice": stringToJson(item.indice), "Name": intToJson(item.name)};
}

// github.com/benoitkugler/maths-online/maths/questions/client.VariationColumnNumber
class VariationColumnNumber {
  final String x;
  final String y;
  final bool isUp;

  const VariationColumnNumber(this.x, this.y, this.isUp);

  @override
  String toString() {
    return "VariationColumnNumber($x, $y, $isUp)";
  }
}

VariationColumnNumber variationColumnNumberFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VariationColumnNumber(stringFromJson(json['X']),
      stringFromJson(json['Y']), boolFromJson(json['IsUp']));
}

JSON variationColumnNumberToJson(VariationColumnNumber item) {
  return {
    "X": stringToJson(item.x),
    "Y": stringToJson(item.y),
    "IsUp": boolToJson(item.isUp)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.VariationTableAnswer
class VariationTableAnswer implements Answer {
  final List<String> xs;
  final List<String> fxs;
  final List<bool> arrows;

  const VariationTableAnswer(this.xs, this.fxs, this.arrows);

  @override
  String toString() {
    return "VariationTableAnswer($xs, $fxs, $arrows)";
  }
}

VariationTableAnswer variationTableAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VariationTableAnswer(listStringFromJson(json['Xs']),
      listStringFromJson(json['Fxs']), listBoolFromJson(json['Arrows']));
}

JSON variationTableAnswerToJson(VariationTableAnswer item) {
  return {
    "Xs": listStringToJson(item.xs),
    "Fxs": listStringToJson(item.fxs),
    "Arrows": listBoolToJson(item.arrows)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.VariationTableBlock
class VariationTableBlock implements Block {
  final String label;
  final List<VariationColumnNumber> columns;
  final List<bool> arrows;

  const VariationTableBlock(this.label, this.columns, this.arrows);

  @override
  String toString() {
    return "VariationTableBlock($label, $columns, $arrows)";
  }
}

VariationTableBlock variationTableBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VariationTableBlock(
      stringFromJson(json['Label']),
      listVariationColumnNumberFromJson(json['Columns']),
      listBoolFromJson(json['Arrows']));
}

JSON variationTableBlockToJson(VariationTableBlock item) {
  return {
    "Label": stringToJson(item.label),
    "Columns": listVariationColumnNumberToJson(item.columns),
    "Arrows": listBoolToJson(item.arrows)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.VariationTableFieldBlock
class VariationTableFieldBlock implements Block {
  final String label;
  final List<int> lengthProposals;
  final int iD;

  const VariationTableFieldBlock(this.label, this.lengthProposals, this.iD);

  @override
  String toString() {
    return "VariationTableFieldBlock($label, $lengthProposals, $iD)";
  }
}

VariationTableFieldBlock variationTableFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VariationTableFieldBlock(stringFromJson(json['Label']),
      listIntFromJson(json['LengthProposals']), intFromJson(json['ID']));
}

JSON variationTableFieldBlockToJson(VariationTableFieldBlock item) {
  return {
    "Label": stringToJson(item.label),
    "LengthProposals": listIntToJson(item.lengthProposals),
    "ID": intToJson(item.iD)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.VectorFieldBlock
class VectorFieldBlock implements Block {
  final int iD;
  final bool displayColumn;

  const VectorFieldBlock(this.iD, this.displayColumn);

  @override
  String toString() {
    return "VectorFieldBlock($iD, $displayColumn)";
  }
}

VectorFieldBlock vectorFieldBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VectorFieldBlock(
      intFromJson(json['ID']), boolFromJson(json['DisplayColumn']));
}

JSON vectorFieldBlockToJson(VectorFieldBlock item) {
  return {
    "ID": intToJson(item.iD),
    "DisplayColumn": boolToJson(item.displayColumn)
  };
}

// github.com/benoitkugler/maths-online/maths/questions/client.VectorNumberAnswer
class VectorNumberAnswer implements Answer {
  final double x;
  final double y;

  const VectorNumberAnswer(this.x, this.y);

  @override
  String toString() {
    return "VectorNumberAnswer($x, $y)";
  }
}

VectorNumberAnswer vectorNumberAnswerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VectorNumberAnswer(
      doubleFromJson(json['X']), doubleFromJson(json['Y']));
}

JSON vectorNumberAnswerToJson(VectorNumberAnswer item) {
  return {"X": doubleToJson(item.x), "Y": doubleToJson(item.y)};
}

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors
bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

Map<int, Answer> dictInt_AnswerFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), answerFromJson(v)));
}

Map<String, dynamic> dictInt_AnswerToJson(Map<int, Answer> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), answerToJson(v)));
}

Map<int, bool> dictInt_BoolFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON).map((k, v) => MapEntry(int.parse(k), boolFromJson(v)));
}

Map<String, dynamic> dictInt_BoolToJson(Map<int, bool> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), boolToJson(v)));
}

Map<String, LabeledPoint> dictString_LabeledPointFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(k as String, labeledPointFromJson(v)));
}

Map<String, dynamic> dictString_LabeledPointToJson(
    Map<String, LabeledPoint> item) {
  return item.map(
      (k, v) => MapEntry(stringToJson(k).toString(), labeledPointToJson(v)));
}

double doubleFromJson(dynamic json) => (json as num).toDouble();

double doubleToJson(double item) => item;

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

List<Area> listAreaFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(areaFromJson).toList();
}

List<dynamic> listAreaToJson(List<Area> item) {
  return item.map(areaToJson).toList();
}

List<Assertion> listAssertionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(assertionFromJson).toList();
}

List<dynamic> listAssertionToJson(List<Assertion> item) {
  return item.map(assertionToJson).toList();
}

List<BezierCurve> listBezierCurveFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(bezierCurveFromJson).toList();
}

List<dynamic> listBezierCurveToJson(List<BezierCurve> item) {
  return item.map(bezierCurveToJson).toList();
}

List<Block> listBlockFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(blockFromJson).toList();
}

List<dynamic> listBlockToJson(List<Block> item) {
  return item.map(blockToJson).toList();
}

List<bool> listBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(boolFromJson).toList();
}

List<dynamic> listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

List<double> listDoubleFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(doubleFromJson).toList();
}

List<dynamic> listDoubleToJson(List<double> item) {
  return item.map(doubleToJson).toList();
}

List<FunctionArea> listFunctionAreaFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(functionAreaFromJson).toList();
}

List<dynamic> listFunctionAreaToJson(List<FunctionArea> item) {
  return item.map(functionAreaToJson).toList();
}

List<FunctionGraph> listFunctionGraphFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(functionGraphFromJson).toList();
}

List<dynamic> listFunctionGraphToJson(List<FunctionGraph> item) {
  return item.map(functionGraphToJson).toList();
}

List<InstantiatedQuestion> listInstantiatedQuestionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(instantiatedQuestionFromJson).toList();
}

List<dynamic> listInstantiatedQuestionToJson(List<InstantiatedQuestion> item) {
  return item.map(instantiatedQuestionToJson).toList();
}

List<int> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<int> item) {
  return item.map(intToJson).toList();
}

List<Line> listLineFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(lineFromJson).toList();
}

List<dynamic> listLineToJson(List<Line> item) {
  return item.map(lineToJson).toList();
}

List<QuestionHistory> listListBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listBoolFromJson).toList();
}

List<dynamic> listListBoolToJson(List<QuestionHistory> item) {
  return item.map(listBoolToJson).toList();
}

List<List<double>> listListDoubleFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listDoubleFromJson).toList();
}

List<dynamic> listListDoubleToJson(List<List<double>> item) {
  return item.map(listDoubleToJson).toList();
}

List<TreeShape> listListIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listIntFromJson).toList();
}

List<dynamic> listListIntToJson(List<TreeShape> item) {
  return item.map(listIntToJson).toList();
}

List<TextLine> listListTextOrMathFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listTextOrMathFromJson).toList();
}

List<dynamic> listListTextOrMathToJson(List<TextLine> item) {
  return item.map(listTextOrMathToJson).toList();
}

List<Segment> listSegmentFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(segmentFromJson).toList();
}

List<dynamic> listSegmentToJson(List<Segment> item) {
  return item.map(segmentToJson).toList();
}

List<SignColumn> listSignColumnFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(signColumnFromJson).toList();
}

List<dynamic> listSignColumnToJson(List<SignColumn> item) {
  return item.map(signColumnToJson).toList();
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}

List<TextOrMath> listTextOrMathFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(textOrMathFromJson).toList();
}

List<dynamic> listTextOrMathToJson(List<TextOrMath> item) {
  return item.map(textOrMathToJson).toList();
}

List<TreeNodeAnswer> listTreeNodeAnswerFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(treeNodeAnswerFromJson).toList();
}

List<dynamic> listTreeNodeAnswerToJson(List<TreeNodeAnswer> item) {
  return item.map(treeNodeAnswerToJson).toList();
}

List<VarEntry> listVarEntryFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(varEntryFromJson).toList();
}

List<dynamic> listVarEntryToJson(List<VarEntry> item) {
  return item.map(varEntryToJson).toList();
}

List<VariationColumnNumber> listVariationColumnNumberFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(variationColumnNumberFromJson).toList();
}

List<dynamic> listVariationColumnNumberToJson(
    List<VariationColumnNumber> item) {
  return item.map(variationColumnNumberToJson).toList();
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackExerciceValidIn
class loopbackExerciceValidIn implements LoopbackClientEvent {
  final EvaluateExerciceIn answer;

  const loopbackExerciceValidIn(this.answer);

  @override
  String toString() {
    return "loopbackExerciceValidIn($answer)";
  }
}

loopbackExerciceValidIn loopbackExerciceValidInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return loopbackExerciceValidIn(evaluateExerciceInFromJson(json['Answer']));
}

JSON loopbackExerciceValidInToJson(loopbackExerciceValidIn item) {
  return {"Answer": evaluateExerciceInToJson(item.answer)};
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackPaused
class loopbackPaused implements LoopbackServerEvent {
  const loopbackPaused();

  @override
  String toString() {
    return "loopbackPaused()";
  }
}

loopbackPaused loopbackPausedFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return loopbackPaused();
}

JSON loopbackPausedToJson(loopbackPaused item) {
  return {};
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackPing
class loopbackPing implements LoopbackClientEvent {
  const loopbackPing();

  @override
  String toString() {
    return "loopbackPing()";
  }
}

loopbackPing loopbackPingFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return loopbackPing();
}

JSON loopbackPingToJson(loopbackPing item) {
  return {};
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackQuestion
class loopbackQuestion implements LoopbackServerEvent {
  final Question question;

  const loopbackQuestion(this.question);

  @override
  String toString() {
    return "loopbackQuestion($question)";
  }
}

loopbackQuestion loopbackQuestionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return loopbackQuestion(questionFromJson(json['Question']));
}

JSON loopbackQuestionToJson(loopbackQuestion item) {
  return {"Question": questionToJson(item.question)};
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackQuestionCorrectAnswersIn
class loopbackQuestionCorrectAnswersIn implements LoopbackClientEvent {
  const loopbackQuestionCorrectAnswersIn();

  @override
  String toString() {
    return "loopbackQuestionCorrectAnswersIn()";
  }
}

loopbackQuestionCorrectAnswersIn loopbackQuestionCorrectAnswersInFromJson(
    dynamic json_) {
  final json = (json_ as JSON);
  return loopbackQuestionCorrectAnswersIn();
}

JSON loopbackQuestionCorrectAnswersInToJson(
    loopbackQuestionCorrectAnswersIn item) {
  return {};
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackQuestionCorrectAnswersOut
class loopbackQuestionCorrectAnswersOut implements LoopbackServerEvent {
  final QuestionAnswersIn answers;

  const loopbackQuestionCorrectAnswersOut(this.answers);

  @override
  String toString() {
    return "loopbackQuestionCorrectAnswersOut($answers)";
  }
}

loopbackQuestionCorrectAnswersOut loopbackQuestionCorrectAnswersOutFromJson(
    dynamic json_) {
  final json = (json_ as JSON);
  return loopbackQuestionCorrectAnswersOut(
      questionAnswersInFromJson(json['Answers']));
}

JSON loopbackQuestionCorrectAnswersOutToJson(
    loopbackQuestionCorrectAnswersOut item) {
  return {"Answers": questionAnswersInToJson(item.answers)};
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackQuestionValidIn
class loopbackQuestionValidIn implements LoopbackClientEvent {
  final QuestionAnswersIn answers;

  const loopbackQuestionValidIn(this.answers);

  @override
  String toString() {
    return "loopbackQuestionValidIn($answers)";
  }
}

loopbackQuestionValidIn loopbackQuestionValidInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return loopbackQuestionValidIn(questionAnswersInFromJson(json['Answers']));
}

JSON loopbackQuestionValidInToJson(loopbackQuestionValidIn item) {
  return {"Answers": questionAnswersInToJson(item.answers)};
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackQuestionValidOut
class loopbackQuestionValidOut implements LoopbackServerEvent {
  final QuestionAnswersOut answers;

  const loopbackQuestionValidOut(this.answers);

  @override
  String toString() {
    return "loopbackQuestionValidOut($answers)";
  }
}

loopbackQuestionValidOut loopbackQuestionValidOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return loopbackQuestionValidOut(questionAnswersOutFromJson(json['Answers']));
}

JSON loopbackQuestionValidOutToJson(loopbackQuestionValidOut item) {
  return {"Answers": questionAnswersOutToJson(item.answers)};
}

// github.com/benoitkugler/maths-online/prof/editor.loopbackShowExercice
class loopbackShowExercice implements LoopbackServerEvent {
  final InstantiatedExercice exercice;
  final ProgressionExt progression;

  const loopbackShowExercice(this.exercice, this.progression);

  @override
  String toString() {
    return "loopbackShowExercice($exercice, $progression)";
  }
}

loopbackShowExercice loopbackShowExerciceFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return loopbackShowExercice(instantiatedExerciceFromJson(json['Exercice']),
      progressionExtFromJson(json['Progression']));
}

JSON loopbackShowExerciceToJson(loopbackShowExercice item) {
  return {
    "Exercice": instantiatedExerciceToJson(item.exercice),
    "Progression": progressionExtToJson(item.progression)
  };
}
