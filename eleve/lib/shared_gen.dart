// Code generated by gomacro/generator/dart. DO NOT EDIT

import 'questions/types.gen.dart';

// github.com/benoitkugler/maths-online/prof/editor.Answer
class Answer {
  final List<VarEntry> params;
  final QuestionAnswersIn answer;

  const Answer(this.params, this.answer);

  @override
  String toString() {
    return "Answer($params, $answer)";
  }
}

Answer answerFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Answer(listVarEntryFromJson(json['Params']),
      questionAnswersInFromJson(json['Answer']));
}

JSON answerToJson(Answer item) {
  return {
    "Params": listVarEntryToJson(item.params),
    "Answer": questionAnswersInToJson(item.answer)
  };
}

// github.com/benoitkugler/maths-online.CheckExpressionOut
class CheckExpressionOut {
  final String reason;
  final bool isValid;

  const CheckExpressionOut(this.reason, this.isValid);

  @override
  String toString() {
    return "CheckExpressionOut($reason, $isValid)";
  }
}

CheckExpressionOut checkExpressionOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return CheckExpressionOut(
      stringFromJson(json['Reason']), boolFromJson(json['IsValid']));
}

JSON checkExpressionOutToJson(CheckExpressionOut item) {
  return {
    "Reason": stringToJson(item.reason),
    "IsValid": boolToJson(item.isValid)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.EvaluateExerciceIn
class EvaluateExerciceIn {
  final IdExercice idExercice;
  final Map<int, Answer> answers;
  final ProgressionExt progression;

  const EvaluateExerciceIn(this.idExercice, this.answers, this.progression);

  @override
  String toString() {
    return "EvaluateExerciceIn($idExercice, $answers, $progression)";
  }
}

EvaluateExerciceIn evaluateExerciceInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return EvaluateExerciceIn(
      intFromJson(json['IdExercice']),
      dictIntToAnswerFromJson(json['Answers']),
      progressionExtFromJson(json['Progression']));
}

JSON evaluateExerciceInToJson(EvaluateExerciceIn item) {
  return {
    "IdExercice": intToJson(item.idExercice),
    "Answers": dictIntToAnswerToJson(item.answers),
    "Progression": progressionExtToJson(item.progression)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.EvaluateExerciceOut
class EvaluateExerciceOut {
  final Map<int, QuestionAnswersOut> results;
  final ProgressionExt progression;
  final List<InstantiatedQuestion> newQuestions;

  const EvaluateExerciceOut(this.results, this.progression, this.newQuestions);

  @override
  String toString() {
    return "EvaluateExerciceOut($results, $progression, $newQuestions)";
  }
}

EvaluateExerciceOut evaluateExerciceOutFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return EvaluateExerciceOut(
      dictIntToQuestionAnswersOutFromJson(json['Results']),
      progressionExtFromJson(json['Progression']),
      listInstantiatedQuestionFromJson(json['NewQuestions']));
}

JSON evaluateExerciceOutToJson(EvaluateExerciceOut item) {
  return {
    "Results": dictIntToQuestionAnswersOutToJson(item.results),
    "Progression": progressionExtToJson(item.progression),
    "NewQuestions": listInstantiatedQuestionToJson(item.newQuestions)
  };
}

// github.com/benoitkugler/maths-online.EvaluateQuestionIn
class EvaluateQuestionIn {
  final QuestionAnswersIn answer;
  final List<VarEntry> params;
  final IdQuestion idQuestion;

  const EvaluateQuestionIn(this.answer, this.params, this.idQuestion);

  @override
  String toString() {
    return "EvaluateQuestionIn($answer, $params, $idQuestion)";
  }
}

EvaluateQuestionIn evaluateQuestionInFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return EvaluateQuestionIn(questionAnswersInFromJson(json['Answer']),
      listVarEntryFromJson(json['Params']), intFromJson(json['IdQuestion']));
}

JSON evaluateQuestionInToJson(EvaluateQuestionIn item) {
  return {
    "Answer": questionAnswersInToJson(item.answer),
    "Params": listVarEntryToJson(item.params),
    "IdQuestion": intToJson(item.idQuestion)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.Exercice
class Exercice {
  final IdExercice id;
  final String title;
  final String description;
  final Parameters parameters;
  final Flow flow;
  final IdTeacher idTeacher;
  final bool public;

  const Exercice(this.id, this.title, this.description, this.parameters,
      this.flow, this.idTeacher, this.public);

  @override
  String toString() {
    return "Exercice($id, $title, $description, $parameters, $flow, $idTeacher, $public)";
  }
}

Exercice exerciceFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Exercice(
      intFromJson(json['Id']),
      stringFromJson(json['Title']),
      stringFromJson(json['Description']),
      parametersFromJson(json['Parameters']),
      flowFromJson(json['Flow']),
      intFromJson(json['IdTeacher']),
      boolFromJson(json['Public']));
}

JSON exerciceToJson(Exercice item) {
  return {
    "Id": intToJson(item.id),
    "Title": stringToJson(item.title),
    "Description": stringToJson(item.description),
    "Parameters": parametersToJson(item.parameters),
    "Flow": flowToJson(item.flow),
    "IdTeacher": intToJson(item.idTeacher),
    "Public": boolToJson(item.public)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.Flow
enum Flow { parallel, sequencial }

extension _FlowExt on Flow {
  static Flow fromValue(int i) {
    return Flow.values[i];
  }

  int toValue() {
    return index;
  }
}

Flow flowFromJson(dynamic json) => _FlowExt.fromValue(json as int);

dynamic flowToJson(Flow item) => item.toValue();

// github.com/benoitkugler/maths-online/prof/editor.IdExercice
typedef IdExercice = int;

// github.com/benoitkugler/maths-online/prof/editor.IdQuestion
typedef IdQuestion = int;

// github.com/benoitkugler/maths-online/prof/teacher.IdTeacher
typedef IdTeacher = int;

// github.com/benoitkugler/maths-online/prof/editor.InstantiateQuestionsOut
typedef InstantiateQuestionsOut = List<InstantiatedQuestion>;

// github.com/benoitkugler/maths-online/prof/editor.InstantiatedExercice
class InstantiatedExercice {
  final Exercice exercice;
  final List<InstantiatedQuestion> questions;
  final List<int> baremes;

  const InstantiatedExercice(this.exercice, this.questions, this.baremes);

  @override
  String toString() {
    return "InstantiatedExercice($exercice, $questions, $baremes)";
  }
}

InstantiatedExercice instantiatedExerciceFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return InstantiatedExercice(
      exerciceFromJson(json['Exercice']),
      listInstantiatedQuestionFromJson(json['Questions']),
      listIntFromJson(json['Baremes']));
}

JSON instantiatedExerciceToJson(InstantiatedExercice item) {
  return {
    "Exercice": exerciceToJson(item.exercice),
    "Questions": listInstantiatedQuestionToJson(item.questions),
    "Baremes": listIntToJson(item.baremes)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.InstantiatedQuestion
class InstantiatedQuestion {
  final IdQuestion id;
  final Question question;
  final List<VarEntry> params;

  const InstantiatedQuestion(this.id, this.question, this.params);

  @override
  String toString() {
    return "InstantiatedQuestion($id, $question, $params)";
  }
}

InstantiatedQuestion instantiatedQuestionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return InstantiatedQuestion(intFromJson(json['Id']),
      questionFromJson(json['Question']), listVarEntryFromJson(json['Params']));
}

JSON instantiatedQuestionToJson(InstantiatedQuestion item) {
  return {
    "Id": intToJson(item.id),
    "Question": questionToJson(item.question),
    "Params": listVarEntryToJson(item.params)
  };
}

// github.com/benoitkugler/maths-online/maths/questions.Parameters
class Parameters {
  final RandomParameters variables;
  final List<String> intrinsics;

  const Parameters(this.variables, this.intrinsics);

  @override
  String toString() {
    return "Parameters($variables, $intrinsics)";
  }
}

Parameters parametersFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Parameters(listRandomParameterFromJson(json['Variables']),
      listStringFromJson(json['Intrinsics']));
}

JSON parametersToJson(Parameters item) {
  return {
    "Variables": listRandomParameterToJson(item.variables),
    "Intrinsics": listStringToJson(item.intrinsics)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.ProgressionExt
class ProgressionExt {
  final List<QuestionHistory> questions;
  final int nextQuestion;

  const ProgressionExt(this.questions, this.nextQuestion);

  @override
  String toString() {
    return "ProgressionExt($questions, $nextQuestion)";
  }
}

ProgressionExt progressionExtFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ProgressionExt(listListBoolFromJson(json['Questions']),
      intFromJson(json['NextQuestion']));
}

JSON progressionExtToJson(ProgressionExt item) {
  return {
    "Questions": listListBoolToJson(item.questions),
    "NextQuestion": intToJson(item.nextQuestion)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.QuestionHistory
typedef QuestionHistory = List<bool>;

// github.com/benoitkugler/maths-online/maths/questions.RandomParameter
class RandomParameter {
  final String expression;
  final Variable variable;

  const RandomParameter(this.expression, this.variable);

  @override
  String toString() {
    return "RandomParameter($expression, $variable)";
  }
}

RandomParameter randomParameterFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return RandomParameter(
      stringFromJson(json['expression']), variableFromJson(json['variable']));
}

JSON randomParameterToJson(RandomParameter item) {
  return {
    "expression": stringToJson(item.expression),
    "variable": variableToJson(item.variable)
  };
}

// github.com/benoitkugler/maths-online/maths/questions.RandomParameters
typedef RandomParameters = List<RandomParameter>;

String stringFromJson(dynamic json) => json == null ? "" : json as String;

String stringToJson(String item) => item;

// github.com/benoitkugler/maths-online.StudentExerciceInst
class StudentExerciceInst {
  final InstantiatedExercice exercice;
  final ProgressionExt progression;

  const StudentExerciceInst(this.exercice, this.progression);

  @override
  String toString() {
    return "StudentExerciceInst($exercice, $progression)";
  }
}

StudentExerciceInst studentExerciceInstFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return StudentExerciceInst(instantiatedExerciceFromJson(json['Exercice']),
      progressionExtFromJson(json['Progression']));
}

JSON studentExerciceInstToJson(StudentExerciceInst item) {
  return {
    "Exercice": instantiatedExerciceToJson(item.exercice),
    "Progression": progressionExtToJson(item.progression)
  };
}

// github.com/benoitkugler/maths-online/prof/editor.VarEntry
class VarEntry {
  final Variable variable;
  final String resolved;

  const VarEntry(this.variable, this.resolved);

  @override
  String toString() {
    return "VarEntry($variable, $resolved)";
  }
}

VarEntry varEntryFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return VarEntry(
      variableFromJson(json['Variable']), stringFromJson(json['Resolved']));
}

JSON varEntryToJson(VarEntry item) {
  return {
    "Variable": variableToJson(item.variable),
    "Resolved": stringToJson(item.resolved)
  };
}

// github.com/benoitkugler/maths-online/maths/expression.Variable
class Variable {
  final String indice;
  final int name;

  const Variable(this.indice, this.name);

  @override
  String toString() {
    return "Variable($indice, $name)";
  }
}

Variable variableFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Variable(stringFromJson(json['Indice']), intFromJson(json['Name']));
}

JSON variableToJson(Variable item) {
  return {"Indice": stringToJson(item.indice), "Name": intToJson(item.name)};
}

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors
bool boolFromJson(dynamic json) => json as bool;

bool boolToJson(bool item) => item;

Map<int, Answer> dictIntToAnswerFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), answerFromJson(v)));
}

Map<String, dynamic> dictIntToAnswerToJson(Map<int, Answer> item) {
  return item.map((k, v) => MapEntry(intToJson(k).toString(), answerToJson(v)));
}

Map<int, QuestionAnswersOut> dictIntToQuestionAnswersOutFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON)
      .map((k, v) => MapEntry(int.parse(k), questionAnswersOutFromJson(v)));
}

Map<String, dynamic> dictIntToQuestionAnswersOutToJson(
    Map<int, QuestionAnswersOut> item) {
  return item.map(
      (k, v) => MapEntry(intToJson(k).toString(), questionAnswersOutToJson(v)));
}

int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;

List<bool> listBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(boolFromJson).toList();
}

List<dynamic> listBoolToJson(List<bool> item) {
  return item.map(boolToJson).toList();
}

List<InstantiatedQuestion> listInstantiatedQuestionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(instantiatedQuestionFromJson).toList();
}

List<dynamic> listInstantiatedQuestionToJson(List<InstantiatedQuestion> item) {
  return item.map(instantiatedQuestionToJson).toList();
}

List<int> listIntFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(intFromJson).toList();
}

List<dynamic> listIntToJson(List<int> item) {
  return item.map(intToJson).toList();
}

List<QuestionHistory> listListBoolFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(listBoolFromJson).toList();
}

List<dynamic> listListBoolToJson(List<QuestionHistory> item) {
  return item.map(listBoolToJson).toList();
}

List<RandomParameter> listRandomParameterFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(randomParameterFromJson).toList();
}

List<dynamic> listRandomParameterToJson(List<RandomParameter> item) {
  return item.map(randomParameterToJson).toList();
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

List<dynamic> listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}

List<VarEntry> listVarEntryFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(varEntryFromJson).toList();
}

List<dynamic> listVarEntryToJson(List<VarEntry> item) {
  return item.map(varEntryToJson).toList();
}
