
-- maths/exercice/create_gen.sql
-- DO NOT EDIT - autogenerated by structgen
-- No validation : accept anything
CREATE OR REPLACE FUNCTION structgen_validate_json_ (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    RETURN TRUE;
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_array_ (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) = 'null' THEN
        RETURN TRUE;
    END IF;
    IF jsonb_typeof(data) != 'array' THEN
        RETURN FALSE;
    END IF;
    IF jsonb_array_length(data) = 0 THEN
        RETURN TRUE;
    END IF;
    RETURN (
        SELECT
            bool_and(structgen_validate_json_ (value))
        FROM
            jsonb_array_elements(data));
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_string (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    RETURN jsonb_typeof(data) = 'string';
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_number (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    RETURN jsonb_typeof(data) = 'number';
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_exp_Variable (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) != 'object' THEN
        RETURN FALSE;
    END IF;
    RETURN (
        SELECT
            bool_and(key IN ('Indice', 'Name'))
        FROM
            jsonb_each(data))
        AND structgen_validate_json_string (data -> 'Indice')
        AND structgen_validate_json_number (data -> 'Name');
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_exe_randomParameter (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) != 'object' THEN
        RETURN FALSE;
    END IF;
    RETURN (
        SELECT
            bool_and(key IN ('expression', 'variable'))
        FROM
            jsonb_each(data))
        AND structgen_validate_json_string (data -> 'expression')
        AND structgen_validate_json_exp_Variable (data -> 'variable');
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_array_exe_randomParameter (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) = 'null' THEN
        RETURN TRUE;
    END IF;
    IF jsonb_typeof(data) != 'array' THEN
        RETURN FALSE;
    END IF;
    IF jsonb_array_length(data) = 0 THEN
        RETURN TRUE;
    END IF;
    RETURN (
        SELECT
            bool_and(structgen_validate_json_exe_randomParameter (value))
        FROM
            jsonb_array_elements(data));
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_array_string (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) = 'null' THEN
        RETURN TRUE;
    END IF;
    IF jsonb_typeof(data) != 'array' THEN
        RETURN FALSE;
    END IF;
    IF jsonb_array_length(data) = 0 THEN
        RETURN TRUE;
    END IF;
    RETURN (
        SELECT
            bool_and(structgen_validate_json_string (value))
        FROM
            jsonb_array_elements(data));
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_exe_Parameters (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) != 'object' THEN
        RETURN FALSE;
    END IF;
    RETURN (
        SELECT
            bool_and(key IN ('Variables', 'Intrinsics'))
        FROM
            jsonb_each(data))
        AND structgen_validate_json_array_exe_randomParameter (data -> 'Variables')
        AND structgen_validate_json_array_string (data -> 'Intrinsics');
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE TABLE questions (
    id serial PRIMARY KEY,
    title varchar NOT NULL,
    enonce jsonb CONSTRAINT enonce_structgen_validate_json_array_ CHECK (structgen_validate_json_array_ (enonce)),
    parameters jsonb NOT NULL CONSTRAINT parameters_structgen_validate_json_exe_Parameters CHECK (structgen_validate_json_exe_Parameters (parameters))
);

CREATE TABLE question_tags (
    tag varchar NOT NULL,
    id_question integer NOT NULL
);

ALTER TABLE question_tags
    ADD FOREIGN KEY (id_question) REFERENCES questions ON DELETE CASCADE;

ALTER TABLE question_tags
    ADD UNIQUE (id_question, tag);

-- prof/trivial-poursuit/create_gen.sql
-- DO NOT EDIT - autogenerated by structgen
CREATE OR REPLACE FUNCTION structgen_validate_json_string (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    RETURN jsonb_typeof(data) = 'string';
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_array_string (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) = 'null' THEN
        RETURN TRUE;
    END IF;
    IF jsonb_typeof(data) != 'array' THEN
        RETURN FALSE;
    END IF;
    IF jsonb_array_length(data) = 0 THEN
        RETURN TRUE;
    END IF;
    RETURN (
        SELECT
            bool_and(structgen_validate_json_string (value))
        FROM
            jsonb_array_elements(data));
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_array_array_string (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) = 'null' THEN
        RETURN TRUE;
    END IF;
    IF jsonb_typeof(data) != 'array' THEN
        RETURN FALSE;
    END IF;
    IF jsonb_array_length(data) = 0 THEN
        RETURN TRUE;
    END IF;
    RETURN (
        SELECT
            bool_and(structgen_validate_json_array_string (value))
        FROM
            jsonb_array_elements(data));
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE OR REPLACE FUNCTION structgen_validate_json_array_5_array_array_string (data jsonb)
    RETURNS boolean
    AS $f$
BEGIN
    IF jsonb_typeof(data) != 'array' THEN
        RETURN FALSE;
    END IF;
    RETURN (
        SELECT
            bool_and(structgen_validate_json_array_array_string (value))
        FROM
            jsonb_array_elements(data))
        AND jsonb_array_length(data) = 5;
END;
$f$
LANGUAGE 'plpgsql'
IMMUTABLE;

CREATE TABLE trivial_configs (
    Id serial PRIMARY KEY,
    IsLaunched boolean NOT NULL,
    Questions jsonb NOT NULL CONSTRAINT Questions_structgen_validate_json_array_5_array_array_string CHECK (structgen_validate_json_array_5_array_array_string (Questions)),
    QuestionTimeout integer NOT NULL
);

-- prof/students/create_gen.sql
-- DO NOT EDIT - autogenerated by structgen
CREATE TABLE students (
    Id serial PRIMARY KEY,
    Name varchar NOT NULL,
    Surname varchar NOT NULL
);

