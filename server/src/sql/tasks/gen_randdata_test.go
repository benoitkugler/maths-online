package tasks

import (
	"math/rand"

	"github.com/benoitkugler/maths-online/server/src/sql/editor"
	"github.com/benoitkugler/maths-online/server/src/sql/teacher"
)

// Code generated by gomacro/generator/go/randdata. DO NOT EDIT.

func randIdMonoquestion() IdMonoquestion {
	return IdMonoquestion(randint64())
}

func randIdProgression() IdProgression {
	return IdProgression(randint64())
}

func randIdRandomMonoquestion() IdRandomMonoquestion {
	return IdRandomMonoquestion(randint64())
}

func randIdTask() IdTask {
	return IdTask(randint64())
}

func randMonoquestion() Monoquestion {
	var s Monoquestion
	s.Id = randIdMonoquestion()
	s.IdQuestion = randedi_IdQuestion()
	s.NbRepeat = randint()
	s.Bareme = randint()

	return s
}

func randOptionalIdMonoquestion() OptionalIdMonoquestion {
	var s OptionalIdMonoquestion
	s.Valid = randbool()
	s.ID = randIdMonoquestion()

	return s
}

func randOptionalIdRandomMonoquestion() OptionalIdRandomMonoquestion {
	var s OptionalIdRandomMonoquestion
	s.Valid = randbool()
	s.ID = randIdRandomMonoquestion()

	return s
}

func randProgression() Progression {
	var s Progression
	s.IdStudent = randtea_IdStudent()
	s.IdTask = randIdTask()
	s.Index = randint()
	s.History = randQuestionHistory()

	return s
}

func randQuestionHistory() QuestionHistory {
	return QuestionHistory(randSlicebool())
}

func randRandomMonoquestion() RandomMonoquestion {
	var s RandomMonoquestion
	s.Id = randIdRandomMonoquestion()
	s.IdQuestiongroup = randedi_IdQuestiongroup()
	s.NbRepeat = randint()
	s.Bareme = randint()
	s.Difficulty = randedi_DifficultyQuery()

	return s
}

func randRandomMonoquestionVariant() RandomMonoquestionVariant {
	var s RandomMonoquestionVariant
	s.IdStudent = randtea_IdStudent()
	s.IdRandomMonoquestion = randIdRandomMonoquestion()
	s.Index = randint()
	s.IdQuestion = randedi_IdQuestion()

	return s
}

func randSlicebool() []bool {
	l := 40 + rand.Intn(10)
	out := make([]bool, l)
	for i := range out {
		out[i] = randbool()
	}
	return out
}

func randSliceedi_DifficultyTag() []editor.DifficultyTag {
	l := 40 + rand.Intn(10)
	out := make([]editor.DifficultyTag, l)
	for i := range out {
		out[i] = randedi_DifficultyTag()
	}
	return out
}

func randTask() Task {
	var s Task
	s.Id = randIdTask()
	s.IdExercice = randedi_OptionalIdExercice()
	s.IdMonoquestion = randOptionalIdMonoquestion()
	s.IdRandomMonoquestion = randOptionalIdRandomMonoquestion()

	return s
}

func randbool() bool {
	i := rand.Int31n(2)
	return i == 1
}

func randedi_DifficultyQuery() editor.DifficultyQuery {
	return editor.DifficultyQuery(randSliceedi_DifficultyTag())
}

func randedi_DifficultyTag() editor.DifficultyTag {
	choix := [...]editor.DifficultyTag{editor.Diff1, editor.Diff2, editor.Diff3, editor.DiffEmpty}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randedi_IdExercice() editor.IdExercice {
	return editor.IdExercice(randint64())
}

func randedi_IdQuestion() editor.IdQuestion {
	return editor.IdQuestion(randint64())
}

func randedi_IdQuestiongroup() editor.IdQuestiongroup {
	return editor.IdQuestiongroup(randint64())
}

func randedi_OptionalIdExercice() editor.OptionalIdExercice {
	var s editor.OptionalIdExercice
	s.Valid = randbool()
	s.ID = randedi_IdExercice()

	return s
}

func randint() int {
	return int(rand.Intn(1000000))
}

func randint64() int64 {
	return int64(rand.Intn(1000000))
}

func randtea_IdStudent() teacher.IdStudent {
	return teacher.IdStudent(randint64())
}
