package reviews

// Code generated by gomacro/generator/go/sqlcrud. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"

	"github.com/benoitkugler/maths-online/sql/editor"
	"github.com/benoitkugler/maths-online/sql/teacher"
	"github.com/benoitkugler/maths-online/sql/trivial"
	"github.com/lib/pq"
)

type scanner interface {
	Scan(...interface{}) error
}

// DB groups transaction like objects, and
// is implemented by *sql.DB and *sql.Tx
type DB interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
	Prepare(query string) (*sql.Stmt, error)
}

func scanOneReview(row scanner) (Review, error) {
	var item Review
	err := row.Scan(
		&item.Id,
		&item.Kind,
	)
	return item, err
}

func ScanReview(row *sql.Row) (Review, error) { return scanOneReview(row) }

// SelectAll returns all the items in the reviews table.
func SelectAllReviews(db DB) (Reviews, error) {
	rows, err := db.Query("SELECT * FROM reviews")
	if err != nil {
		return nil, err
	}
	return ScanReviews(rows)
}

// SelectReview returns the entry matching 'id'.
func SelectReview(tx DB, id IdReview) (Review, error) {
	row := tx.QueryRow("SELECT * FROM reviews WHERE id = $1", id)
	return ScanReview(row)
}

// SelectReviews returns the entry matching the given 'ids'.
func SelectReviews(tx DB, ids ...IdReview) (Reviews, error) {
	rows, err := tx.Query("SELECT * FROM reviews WHERE id = ANY($1)", IdReviewArrayToPQ(ids))
	if err != nil {
		return nil, err
	}
	return ScanReviews(rows)
}

type Reviews map[IdReview]Review

func (m Reviews) IDs() []IdReview {
	out := make([]IdReview, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanReviews(rs *sql.Rows) (Reviews, error) {
	var (
		s   Review
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Reviews, 16)
	for rs.Next() {
		s, err = scanOneReview(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert one Review in the database and returns the item with id filled.
func (item Review) Insert(tx DB) (out Review, err error) {
	row := tx.QueryRow(`INSERT INTO reviews (
		kind
		) VALUES (
		$1
		) RETURNING *;
		`, item.Kind)
	return ScanReview(row)
}

// Update Review in the database and returns the new version.
func (item Review) Update(tx DB) (out Review, err error) {
	row := tx.QueryRow(`UPDATE reviews SET (
		kind
		) = (
		$1
		) WHERE id = $2 RETURNING *;
		`, item.Kind, item.Id)
	return ScanReview(row)
}

// Deletes the Review and returns the item
func DeleteReviewById(tx DB, id IdReview) (Review, error) {
	row := tx.QueryRow("DELETE FROM reviews WHERE id = $1 RETURNING *;", id)
	return ScanReview(row)
}

// Deletes the Review in the database and returns the ids.
func DeleteReviewsByIDs(tx DB, ids ...IdReview) ([]IdReview, error) {
	rows, err := tx.Query("DELETE FROM reviews WHERE id = ANY($1) RETURNING id", IdReviewArrayToPQ(ids))
	if err != nil {
		return nil, err
	}
	return ScanIdReviewArray(rows)
}

func scanOneReviewExercice(row scanner) (ReviewExercice, error) {
	var item ReviewExercice
	err := row.Scan(
		&item.IdReview,
		&item.IdExercice,
		&item.Kind,
	)
	return item, err
}

func ScanReviewExercice(row *sql.Row) (ReviewExercice, error) { return scanOneReviewExercice(row) }

// SelectAll returns all the items in the review_exercices table.
func SelectAllReviewExercices(db DB) (ReviewExercices, error) {
	rows, err := db.Query("SELECT * FROM review_exercices")
	if err != nil {
		return nil, err
	}
	return ScanReviewExercices(rows)
}

type ReviewExercices []ReviewExercice

func ScanReviewExercices(rs *sql.Rows) (ReviewExercices, error) {
	var (
		item ReviewExercice
		err  error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(ReviewExercices, 0, 16)
	for rs.Next() {
		item, err = scanOneReviewExercice(rs)
		if err != nil {
			return nil, err
		}
		structs = append(structs, item)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert the links ReviewExercice in the database.
// It is a no-op if 'items' is empty.
func InsertManyReviewExercices(tx *sql.Tx, items ...ReviewExercice) error {
	if len(items) == 0 {
		return nil
	}

	stmt, err := tx.Prepare(pq.CopyIn("review_exercices",
		"idreview",
		"idexercice",
		"kind",
	))
	if err != nil {
		return err
	}

	for _, item := range items {
		_, err = stmt.Exec(item.IdReview, item.IdExercice, item.Kind)
		if err != nil {
			return err
		}
	}

	if _, err = stmt.Exec(); err != nil {
		return err
	}

	if err = stmt.Close(); err != nil {
		return err
	}
	return nil
}

// Delete the link ReviewExercice from the database.
// Only the foreign keys IdReview, IdExercice fields are used in 'item'.
func (item ReviewExercice) Delete(tx DB) error {
	_, err := tx.Exec(`DELETE FROM review_exercices WHERE IdReview = $1 AND IdExercice = $2;`, item.IdReview, item.IdExercice)
	return err
}

// ByIdReview returns a map with 'IdReview' as keys.
func (items ReviewExercices) ByIdReview() map[IdReview]ReviewExercice {
	out := make(map[IdReview]ReviewExercice, len(items))
	for _, target := range items {
		out[target.IdReview] = target
	}
	return out
}

// IdReviews returns the list of ids of IdReview
// contained in this link table.
// They are not garanteed to be distinct.
func (items ReviewExercices) IdReviews() []IdReview {
	out := make([]IdReview, len(items))
	for index, target := range items {
		out[index] = target.IdReview
	}
	return out
}

// SelectReviewExerciceByIdReview return zero or one item, thanks to a UNIQUE SQL constraint.
func SelectReviewExerciceByIdReview(tx DB, idReview IdReview) (item ReviewExercice, found bool, err error) {
	row := tx.QueryRow("SELECT * FROM review_exercices WHERE idreview = $1", idReview)
	item, err = ScanReviewExercice(row)
	if err == sql.ErrNoRows {
		return item, false, nil
	}
	return item, true, err
}

func SelectReviewExercicesByIdReviews(tx DB, idReviews ...IdReview) (ReviewExercices, error) {
	rows, err := tx.Query("SELECT * FROM review_exercices WHERE idreview = ANY($1)", IdReviewArrayToPQ(idReviews))
	if err != nil {
		return nil, err
	}
	return ScanReviewExercices(rows)
}

func DeleteReviewExercicesByIdReviews(tx DB, idReviews ...IdReview) (ReviewExercices, error) {
	rows, err := tx.Query("DELETE FROM review_exercices WHERE idreview = ANY($1) RETURNING *", IdReviewArrayToPQ(idReviews))
	if err != nil {
		return nil, err
	}
	return ScanReviewExercices(rows)
}

// ByIdExercice returns a map with 'IdExercice' as keys.
func (items ReviewExercices) ByIdExercice() map[editor.IdExercicegroup]ReviewExercice {
	out := make(map[editor.IdExercicegroup]ReviewExercice, len(items))
	for _, target := range items {
		out[target.IdExercice] = target
	}
	return out
}

// IdExercices returns the list of ids of IdExercice
// contained in this link table.
// They are not garanteed to be distinct.
func (items ReviewExercices) IdExercices() []editor.IdExercicegroup {
	out := make([]editor.IdExercicegroup, len(items))
	for index, target := range items {
		out[index] = target.IdExercice
	}
	return out
}

// SelectReviewExerciceByIdExercice return zero or one item, thanks to a UNIQUE SQL constraint.
func SelectReviewExerciceByIdExercice(tx DB, idExercice editor.IdExercicegroup) (item ReviewExercice, found bool, err error) {
	row := tx.QueryRow("SELECT * FROM review_exercices WHERE idexercice = $1", idExercice)
	item, err = ScanReviewExercice(row)
	if err == sql.ErrNoRows {
		return item, false, nil
	}
	return item, true, err
}

func SelectReviewExercicesByIdExercices(tx DB, idExercices ...editor.IdExercicegroup) (ReviewExercices, error) {
	rows, err := tx.Query("SELECT * FROM review_exercices WHERE idexercice = ANY($1)", editor.IdExercicegroupArrayToPQ(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanReviewExercices(rows)
}

func DeleteReviewExercicesByIdExercices(tx DB, idExercices ...editor.IdExercicegroup) (ReviewExercices, error) {
	rows, err := tx.Query("DELETE FROM review_exercices WHERE idexercice = ANY($1) RETURNING *", editor.IdExercicegroupArrayToPQ(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanReviewExercices(rows)
}

func scanOneReviewParticipation(row scanner) (ReviewParticipation, error) {
	var item ReviewParticipation
	err := row.Scan(
		&item.IdReview,
		&item.IdTeacher,
		&item.Approval,
		&item.Comments,
	)
	return item, err
}

func ScanReviewParticipation(row *sql.Row) (ReviewParticipation, error) {
	return scanOneReviewParticipation(row)
}

// SelectAll returns all the items in the review_participations table.
func SelectAllReviewParticipations(db DB) (ReviewParticipations, error) {
	rows, err := db.Query("SELECT * FROM review_participations")
	if err != nil {
		return nil, err
	}
	return ScanReviewParticipations(rows)
}

type ReviewParticipations []ReviewParticipation

func ScanReviewParticipations(rs *sql.Rows) (ReviewParticipations, error) {
	var (
		item ReviewParticipation
		err  error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(ReviewParticipations, 0, 16)
	for rs.Next() {
		item, err = scanOneReviewParticipation(rs)
		if err != nil {
			return nil, err
		}
		structs = append(structs, item)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert the links ReviewParticipation in the database.
// It is a no-op if 'items' is empty.
func InsertManyReviewParticipations(tx *sql.Tx, items ...ReviewParticipation) error {
	if len(items) == 0 {
		return nil
	}

	stmt, err := tx.Prepare(pq.CopyIn("review_participations",
		"idreview",
		"idteacher",
		"approval",
		"comments",
	))
	if err != nil {
		return err
	}

	for _, item := range items {
		_, err = stmt.Exec(item.IdReview, item.IdTeacher, item.Approval, item.Comments)
		if err != nil {
			return err
		}
	}

	if _, err = stmt.Exec(); err != nil {
		return err
	}

	if err = stmt.Close(); err != nil {
		return err
	}
	return nil
}

// Delete the link ReviewParticipation from the database.
// Only the foreign keys IdReview, IdTeacher fields are used in 'item'.
func (item ReviewParticipation) Delete(tx DB) error {
	_, err := tx.Exec(`DELETE FROM review_participations WHERE IdReview = $1 AND IdTeacher = $2;`, item.IdReview, item.IdTeacher)
	return err
}

// ByIdReview returns a map with 'IdReview' as keys.
func (items ReviewParticipations) ByIdReview() map[IdReview]ReviewParticipations {
	out := make(map[IdReview]ReviewParticipations)
	for _, target := range items {
		out[target.IdReview] = append(out[target.IdReview], target)
	}
	return out
}

// IdReviews returns the list of ids of IdReview
// contained in this link table.
// They are not garanteed to be distinct.
func (items ReviewParticipations) IdReviews() []IdReview {
	out := make([]IdReview, len(items))
	for index, target := range items {
		out[index] = target.IdReview
	}
	return out
}

func SelectReviewParticipationsByIdReviews(tx DB, idReviews ...IdReview) (ReviewParticipations, error) {
	rows, err := tx.Query("SELECT * FROM review_participations WHERE idreview = ANY($1)", IdReviewArrayToPQ(idReviews))
	if err != nil {
		return nil, err
	}
	return ScanReviewParticipations(rows)
}

func DeleteReviewParticipationsByIdReviews(tx DB, idReviews ...IdReview) (ReviewParticipations, error) {
	rows, err := tx.Query("DELETE FROM review_participations WHERE idreview = ANY($1) RETURNING *", IdReviewArrayToPQ(idReviews))
	if err != nil {
		return nil, err
	}
	return ScanReviewParticipations(rows)
}

// ByIdTeacher returns a map with 'IdTeacher' as keys.
func (items ReviewParticipations) ByIdTeacher() map[teacher.IdTeacher]ReviewParticipations {
	out := make(map[teacher.IdTeacher]ReviewParticipations)
	for _, target := range items {
		out[target.IdTeacher] = append(out[target.IdTeacher], target)
	}
	return out
}

// IdTeachers returns the list of ids of IdTeacher
// contained in this link table.
// They are not garanteed to be distinct.
func (items ReviewParticipations) IdTeachers() []teacher.IdTeacher {
	out := make([]teacher.IdTeacher, len(items))
	for index, target := range items {
		out[index] = target.IdTeacher
	}
	return out
}

func SelectReviewParticipationsByIdTeachers(tx DB, idTeachers ...teacher.IdTeacher) (ReviewParticipations, error) {
	rows, err := tx.Query("SELECT * FROM review_participations WHERE idteacher = ANY($1)", teacher.IdTeacherArrayToPQ(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanReviewParticipations(rows)
}

func DeleteReviewParticipationsByIdTeachers(tx DB, idTeachers ...teacher.IdTeacher) (ReviewParticipations, error) {
	rows, err := tx.Query("DELETE FROM review_participations WHERE idteacher = ANY($1) RETURNING *", teacher.IdTeacherArrayToPQ(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanReviewParticipations(rows)
}

func scanOneReviewQuestion(row scanner) (ReviewQuestion, error) {
	var item ReviewQuestion
	err := row.Scan(
		&item.IdReview,
		&item.IdQuestion,
		&item.Kind,
	)
	return item, err
}

func ScanReviewQuestion(row *sql.Row) (ReviewQuestion, error) { return scanOneReviewQuestion(row) }

// SelectAll returns all the items in the review_questions table.
func SelectAllReviewQuestions(db DB) (ReviewQuestions, error) {
	rows, err := db.Query("SELECT * FROM review_questions")
	if err != nil {
		return nil, err
	}
	return ScanReviewQuestions(rows)
}

type ReviewQuestions []ReviewQuestion

func ScanReviewQuestions(rs *sql.Rows) (ReviewQuestions, error) {
	var (
		item ReviewQuestion
		err  error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(ReviewQuestions, 0, 16)
	for rs.Next() {
		item, err = scanOneReviewQuestion(rs)
		if err != nil {
			return nil, err
		}
		structs = append(structs, item)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert the links ReviewQuestion in the database.
// It is a no-op if 'items' is empty.
func InsertManyReviewQuestions(tx *sql.Tx, items ...ReviewQuestion) error {
	if len(items) == 0 {
		return nil
	}

	stmt, err := tx.Prepare(pq.CopyIn("review_questions",
		"idreview",
		"idquestion",
		"kind",
	))
	if err != nil {
		return err
	}

	for _, item := range items {
		_, err = stmt.Exec(item.IdReview, item.IdQuestion, item.Kind)
		if err != nil {
			return err
		}
	}

	if _, err = stmt.Exec(); err != nil {
		return err
	}

	if err = stmt.Close(); err != nil {
		return err
	}
	return nil
}

// Delete the link ReviewQuestion from the database.
// Only the foreign keys IdReview, IdQuestion fields are used in 'item'.
func (item ReviewQuestion) Delete(tx DB) error {
	_, err := tx.Exec(`DELETE FROM review_questions WHERE IdReview = $1 AND IdQuestion = $2;`, item.IdReview, item.IdQuestion)
	return err
}

// ByIdReview returns a map with 'IdReview' as keys.
func (items ReviewQuestions) ByIdReview() map[IdReview]ReviewQuestion {
	out := make(map[IdReview]ReviewQuestion, len(items))
	for _, target := range items {
		out[target.IdReview] = target
	}
	return out
}

// IdReviews returns the list of ids of IdReview
// contained in this link table.
// They are not garanteed to be distinct.
func (items ReviewQuestions) IdReviews() []IdReview {
	out := make([]IdReview, len(items))
	for index, target := range items {
		out[index] = target.IdReview
	}
	return out
}

// SelectReviewQuestionByIdReview return zero or one item, thanks to a UNIQUE SQL constraint.
func SelectReviewQuestionByIdReview(tx DB, idReview IdReview) (item ReviewQuestion, found bool, err error) {
	row := tx.QueryRow("SELECT * FROM review_questions WHERE idreview = $1", idReview)
	item, err = ScanReviewQuestion(row)
	if err == sql.ErrNoRows {
		return item, false, nil
	}
	return item, true, err
}

func SelectReviewQuestionsByIdReviews(tx DB, idReviews ...IdReview) (ReviewQuestions, error) {
	rows, err := tx.Query("SELECT * FROM review_questions WHERE idreview = ANY($1)", IdReviewArrayToPQ(idReviews))
	if err != nil {
		return nil, err
	}
	return ScanReviewQuestions(rows)
}

func DeleteReviewQuestionsByIdReviews(tx DB, idReviews ...IdReview) (ReviewQuestions, error) {
	rows, err := tx.Query("DELETE FROM review_questions WHERE idreview = ANY($1) RETURNING *", IdReviewArrayToPQ(idReviews))
	if err != nil {
		return nil, err
	}
	return ScanReviewQuestions(rows)
}

// ByIdQuestion returns a map with 'IdQuestion' as keys.
func (items ReviewQuestions) ByIdQuestion() map[editor.IdQuestiongroup]ReviewQuestion {
	out := make(map[editor.IdQuestiongroup]ReviewQuestion, len(items))
	for _, target := range items {
		out[target.IdQuestion] = target
	}
	return out
}

// IdQuestions returns the list of ids of IdQuestion
// contained in this link table.
// They are not garanteed to be distinct.
func (items ReviewQuestions) IdQuestions() []editor.IdQuestiongroup {
	out := make([]editor.IdQuestiongroup, len(items))
	for index, target := range items {
		out[index] = target.IdQuestion
	}
	return out
}

// SelectReviewQuestionByIdQuestion return zero or one item, thanks to a UNIQUE SQL constraint.
func SelectReviewQuestionByIdQuestion(tx DB, idQuestion editor.IdQuestiongroup) (item ReviewQuestion, found bool, err error) {
	row := tx.QueryRow("SELECT * FROM review_questions WHERE idquestion = $1", idQuestion)
	item, err = ScanReviewQuestion(row)
	if err == sql.ErrNoRows {
		return item, false, nil
	}
	return item, true, err
}

func SelectReviewQuestionsByIdQuestions(tx DB, idQuestions ...editor.IdQuestiongroup) (ReviewQuestions, error) {
	rows, err := tx.Query("SELECT * FROM review_questions WHERE idquestion = ANY($1)", editor.IdQuestiongroupArrayToPQ(idQuestions))
	if err != nil {
		return nil, err
	}
	return ScanReviewQuestions(rows)
}

func DeleteReviewQuestionsByIdQuestions(tx DB, idQuestions ...editor.IdQuestiongroup) (ReviewQuestions, error) {
	rows, err := tx.Query("DELETE FROM review_questions WHERE idquestion = ANY($1) RETURNING *", editor.IdQuestiongroupArrayToPQ(idQuestions))
	if err != nil {
		return nil, err
	}
	return ScanReviewQuestions(rows)
}

func scanOneReviewTrivial(row scanner) (ReviewTrivial, error) {
	var item ReviewTrivial
	err := row.Scan(
		&item.IdReview,
		&item.IdTrivial,
		&item.Kind,
	)
	return item, err
}

func ScanReviewTrivial(row *sql.Row) (ReviewTrivial, error) { return scanOneReviewTrivial(row) }

// SelectAll returns all the items in the review_trivials table.
func SelectAllReviewTrivials(db DB) (ReviewTrivials, error) {
	rows, err := db.Query("SELECT * FROM review_trivials")
	if err != nil {
		return nil, err
	}
	return ScanReviewTrivials(rows)
}

type ReviewTrivials []ReviewTrivial

func ScanReviewTrivials(rs *sql.Rows) (ReviewTrivials, error) {
	var (
		item ReviewTrivial
		err  error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(ReviewTrivials, 0, 16)
	for rs.Next() {
		item, err = scanOneReviewTrivial(rs)
		if err != nil {
			return nil, err
		}
		structs = append(structs, item)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert the links ReviewTrivial in the database.
// It is a no-op if 'items' is empty.
func InsertManyReviewTrivials(tx *sql.Tx, items ...ReviewTrivial) error {
	if len(items) == 0 {
		return nil
	}

	stmt, err := tx.Prepare(pq.CopyIn("review_trivials",
		"idreview",
		"idtrivial",
		"kind",
	))
	if err != nil {
		return err
	}

	for _, item := range items {
		_, err = stmt.Exec(item.IdReview, item.IdTrivial, item.Kind)
		if err != nil {
			return err
		}
	}

	if _, err = stmt.Exec(); err != nil {
		return err
	}

	if err = stmt.Close(); err != nil {
		return err
	}
	return nil
}

// Delete the link ReviewTrivial from the database.
// Only the foreign keys IdReview, IdTrivial fields are used in 'item'.
func (item ReviewTrivial) Delete(tx DB) error {
	_, err := tx.Exec(`DELETE FROM review_trivials WHERE IdReview = $1 AND IdTrivial = $2;`, item.IdReview, item.IdTrivial)
	return err
}

// ByIdReview returns a map with 'IdReview' as keys.
func (items ReviewTrivials) ByIdReview() map[IdReview]ReviewTrivial {
	out := make(map[IdReview]ReviewTrivial, len(items))
	for _, target := range items {
		out[target.IdReview] = target
	}
	return out
}

// IdReviews returns the list of ids of IdReview
// contained in this link table.
// They are not garanteed to be distinct.
func (items ReviewTrivials) IdReviews() []IdReview {
	out := make([]IdReview, len(items))
	for index, target := range items {
		out[index] = target.IdReview
	}
	return out
}

// SelectReviewTrivialByIdReview return zero or one item, thanks to a UNIQUE SQL constraint.
func SelectReviewTrivialByIdReview(tx DB, idReview IdReview) (item ReviewTrivial, found bool, err error) {
	row := tx.QueryRow("SELECT * FROM review_trivials WHERE idreview = $1", idReview)
	item, err = ScanReviewTrivial(row)
	if err == sql.ErrNoRows {
		return item, false, nil
	}
	return item, true, err
}

func SelectReviewTrivialsByIdReviews(tx DB, idReviews ...IdReview) (ReviewTrivials, error) {
	rows, err := tx.Query("SELECT * FROM review_trivials WHERE idreview = ANY($1)", IdReviewArrayToPQ(idReviews))
	if err != nil {
		return nil, err
	}
	return ScanReviewTrivials(rows)
}

func DeleteReviewTrivialsByIdReviews(tx DB, idReviews ...IdReview) (ReviewTrivials, error) {
	rows, err := tx.Query("DELETE FROM review_trivials WHERE idreview = ANY($1) RETURNING *", IdReviewArrayToPQ(idReviews))
	if err != nil {
		return nil, err
	}
	return ScanReviewTrivials(rows)
}

// ByIdTrivial returns a map with 'IdTrivial' as keys.
func (items ReviewTrivials) ByIdTrivial() map[trivial.IdTrivial]ReviewTrivial {
	out := make(map[trivial.IdTrivial]ReviewTrivial, len(items))
	for _, target := range items {
		out[target.IdTrivial] = target
	}
	return out
}

// IdTrivials returns the list of ids of IdTrivial
// contained in this link table.
// They are not garanteed to be distinct.
func (items ReviewTrivials) IdTrivials() []trivial.IdTrivial {
	out := make([]trivial.IdTrivial, len(items))
	for index, target := range items {
		out[index] = target.IdTrivial
	}
	return out
}

// SelectReviewTrivialByIdTrivial return zero or one item, thanks to a UNIQUE SQL constraint.
func SelectReviewTrivialByIdTrivial(tx DB, idTrivial trivial.IdTrivial) (item ReviewTrivial, found bool, err error) {
	row := tx.QueryRow("SELECT * FROM review_trivials WHERE idtrivial = $1", idTrivial)
	item, err = ScanReviewTrivial(row)
	if err == sql.ErrNoRows {
		return item, false, nil
	}
	return item, true, err
}

func SelectReviewTrivialsByIdTrivials(tx DB, idTrivials ...trivial.IdTrivial) (ReviewTrivials, error) {
	rows, err := tx.Query("SELECT * FROM review_trivials WHERE idtrivial = ANY($1)", trivial.IdTrivialArrayToPQ(idTrivials))
	if err != nil {
		return nil, err
	}
	return ScanReviewTrivials(rows)
}

func DeleteReviewTrivialsByIdTrivials(tx DB, idTrivials ...trivial.IdTrivial) (ReviewTrivials, error) {
	rows, err := tx.Query("DELETE FROM review_trivials WHERE idtrivial = ANY($1) RETURNING *", trivial.IdTrivialArrayToPQ(idTrivials))
	if err != nil {
		return nil, err
	}
	return ScanReviewTrivials(rows)
}

func loadJSON(out interface{}, src interface{}) error {
	if src == nil {
		return nil //zero value out
	}
	bs, ok := src.([]byte)
	if !ok {
		return errors.New("not a []byte")
	}
	return json.Unmarshal(bs, out)
}

func dumpJSON(s interface{}) (driver.Value, error) {
	b, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	return driver.Value(string(b)), nil
}

func IdReviewArrayToPQ(ids []IdReview) pq.Int64Array {
	out := make(pq.Int64Array, len(ids))
	for i, v := range ids {
		out[i] = int64(v)
	}
	return out
}

// ScanIdReviewArray scans the result of a query returning a
// list of ID's.
func ScanIdReviewArray(rs *sql.Rows) ([]IdReview, error) {
	defer rs.Close()
	ints := make([]IdReview, 0, 16)
	var err error
	for rs.Next() {
		var s IdReview
		if err = rs.Scan(&s); err != nil {
			return nil, err
		}
		ints = append(ints, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return ints, nil
}

type IdReviewSet map[IdReview]bool

func NewIdReviewSetFrom(ids []IdReview) IdReviewSet {
	out := make(IdReviewSet, len(ids))
	for _, key := range ids {
		out[key] = true
	}
	return out
}

func (s IdReviewSet) Add(id IdReview) { s[id] = true }

func (s IdReviewSet) Has(id IdReview) bool { return s[id] }

func (s IdReviewSet) Keys() []IdReview {
	out := make([]IdReview, 0, len(s))
	for k := range s {
		out = append(out, k)
	}
	return out
}

func (s *Comments) Scan(src interface{}) error  { return loadJSON(s, src) }
func (s Comments) Value() (driver.Value, error) { return dumpJSON(s) }
