package homework

import (
	"database/sql"
	"math/rand"
	"time"

	"github.com/benoitkugler/maths-online/server/src/sql/tasks"
	"github.com/benoitkugler/maths-online/server/src/sql/teacher"
)

// Code generated by gomacro/generator/go/randdata. DO NOT EDIT.

func randIdSheet() IdSheet {
	return IdSheet(randint64())
}

func randIdTravail() IdTravail {
	return IdTravail(randint64())
}

func randOptionalIdTravail() OptionalIdTravail {
	var s OptionalIdTravail
	s.Valid = randbool()
	s.ID = randIdTravail()

	return s
}

func randQuestionRepeat() QuestionRepeat {
	choix := [...]QuestionRepeat{Unlimited, OneTry}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randSheet() Sheet {
	var s Sheet
	s.Id = randIdSheet()
	s.Title = randstring()
	s.IdTeacher = randtea_IdTeacher()
	s.Level = randstring()
	s.Anonymous = randOptionalIdTravail()
	s.Public = randbool()
	s.Matiere = randtea_MatiereTag()

	return s
}

func randSheetTask() SheetTask {
	var s SheetTask
	s.IdSheet = randIdSheet()
	s.Index = randint()
	s.IdTask = randtas_IdTask()

	return s
}

func randTime() Time {
	return Time(randtTime())
}

func randTravail() Travail {
	var s Travail
	s.Id = randIdTravail()
	s.IdClassroom = randtea_IdClassroom()
	s.IdSheet = randIdSheet()
	s.Noted = randbool()
	s.Deadline = randTime()
	s.ShowAfter = randTime()
	s.QuestionRepeat = randQuestionRepeat()
	s.QuestionTimeLimit = randint()

	return s
}

func randTravailException() TravailException {
	var s TravailException
	s.IdStudent = randtea_IdStudent()
	s.IdTravail = randIdTravail()
	s.Deadline = randsql_NullTime()
	s.IgnoreForMark = randbool()

	return s
}

func randbool() bool {
	i := rand.Int31n(2)
	return i == 1
}

func randint() int {
	return int(rand.Intn(1000000))
}

func randint64() int64 {
	return int64(rand.Intn(1000000))
}

func randsql_NullTime() sql.NullTime {
	var s sql.NullTime
	s.Time = randtTime()
	s.Valid = randbool()

	return s
}

var letterRunes2 = []rune("azertyuiopqsdfghjklmwxcvbn123456789é@!?&èïab ")

func randstring() string {
	b := make([]rune, 10)
	maxLength := len(letterRunes2)
	for i := range b {
		b[i] = letterRunes2[rand.Intn(maxLength)]
	}
	return string(b)
}

func randtTime() time.Time {
	return time.Unix(int64(rand.Int31()), 5)
}

func randtas_IdTask() tasks.IdTask {
	return tasks.IdTask(randint64())
}

func randtea_IdClassroom() teacher.IdClassroom {
	return teacher.IdClassroom(randint64())
}

func randtea_IdStudent() teacher.IdStudent {
	return teacher.IdStudent(randint64())
}

func randtea_IdTeacher() teacher.IdTeacher {
	return teacher.IdTeacher(randint64())
}

func randtea_MatiereTag() teacher.MatiereTag {
	choix := [...]teacher.MatiereTag{teacher.Allemand, teacher.Anglais, teacher.Autre, teacher.Espagnol, teacher.Francais, teacher.HistoireGeo, teacher.Italien, teacher.Mathematiques, teacher.PhysiqueChimie, teacher.SES, teacher.SVT}
	i := rand.Intn(len(choix))
	return choix[i]
}
