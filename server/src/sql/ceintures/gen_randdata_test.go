package ceintures

import (
	"math/rand"

	"github.com/benoitkugler/maths-online/server/src/maths/expression"
	"github.com/benoitkugler/maths-online/server/src/maths/questions"
	"github.com/benoitkugler/maths-online/server/src/maths/questions/client"
	"github.com/benoitkugler/maths-online/server/src/maths/repere"
	"github.com/benoitkugler/maths-online/server/src/sql/teacher"
)

// Code generated by gomacro/generator/go/randdata. DO NOT EDIT.

func randAdvance() Advance {
	return Advance(randArray4Rank())
}

func randArray4Array8Stat() [4][8]Stat {
	var out [4][8]Stat
	for i := range out {
		out[i] = randArray8Stat()
	}
	return out
}

func randArray4Rank() [4]Rank {
	var out [4]Rank
	for i := range out {
		out[i] = randRank()
	}
	return out
}

func randArray8Stat() [8]Stat {
	var out [8]Stat
	for i := range out {
		out[i] = randStat()
	}
	return out
}

func randBeltevolution() Beltevolution {
	var s Beltevolution
	s.IdStudent = randtea_IdStudent()
	s.Advance = randAdvance()
	s.Stats = randStats()

	return s
}

func randBeltquestion() Beltquestion {
	var s Beltquestion
	s.Id = randIdBeltquestion()
	s.Domain = randDomain()
	s.Rank = randRank()
	s.Parameters = randque_Parameters()
	s.Enonce = randque_Enonce()
	s.Correction = randque_Enonce()

	return s
}

func randDomain() Domain {
	choix := [...]Domain{CalculMental, Fractions, Factorisation, Developpement}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randIdBeltquestion() IdBeltquestion {
	return IdBeltquestion(randint64())
}

func randRank() Rank {
	choix := [...]Rank{StartRank, Blanche, Jaune, Orange, Verte, Bleue, Marron, Noire}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randSliceSliceque_TextPart() [][]questions.TextPart {
	l := 3 + rand.Intn(5)
	out := make([][]questions.TextPart, l)
	for i := range out {
		out[i] = randSliceque_TextPart()
	}
	return out
}

func randSliceSlicestring() [][]string {
	l := 3 + rand.Intn(5)
	out := make([][]string, l)
	for i := range out {
		out[i] = randSlicestring()
	}
	return out
}

func randSlicebool() []bool {
	l := 3 + rand.Intn(5)
	out := make([]bool, l)
	for i := range out {
		out[i] = randbool()
	}
	return out
}

func randSlicecli_SignSymbol() []client.SignSymbol {
	l := 3 + rand.Intn(5)
	out := make([]client.SignSymbol, l)
	for i := range out {
		out[i] = randcli_SignSymbol()
	}
	return out
}

func randSliceque_Block() []questions.Block {
	l := 3 + rand.Intn(5)
	out := make([]questions.Block, l)
	for i := range out {
		out[i] = randque_Block()
	}
	return out
}

func randSliceque_FunctionArea() []questions.FunctionArea {
	l := 3 + rand.Intn(5)
	out := make([]questions.FunctionArea, l)
	for i := range out {
		out[i] = randque_FunctionArea()
	}
	return out
}

func randSliceque_FunctionDefinition() []questions.FunctionDefinition {
	l := 3 + rand.Intn(5)
	out := make([]questions.FunctionDefinition, l)
	for i := range out {
		out[i] = randque_FunctionDefinition()
	}
	return out
}

func randSliceque_FunctionPoint() []questions.FunctionPoint {
	l := 3 + rand.Intn(5)
	out := make([]questions.FunctionPoint, l)
	for i := range out {
		out[i] = randque_FunctionPoint()
	}
	return out
}

func randSliceque_FunctionSign() []questions.FunctionSign {
	l := 3 + rand.Intn(5)
	out := make([]questions.FunctionSign, l)
	for i := range out {
		out[i] = randque_FunctionSign()
	}
	return out
}

func randSliceque_Interpolated() []questions.Interpolated {
	l := 3 + rand.Intn(5)
	out := make([]questions.Interpolated, l)
	for i := range out {
		out[i] = randque_Interpolated()
	}
	return out
}

func randSliceque_ParameterEntry() []questions.ParameterEntry {
	l := 3 + rand.Intn(5)
	out := make([]questions.ParameterEntry, l)
	for i := range out {
		out[i] = randque_ParameterEntry()
	}
	return out
}

func randSliceque_TextPart() []questions.TextPart {
	l := 3 + rand.Intn(5)
	out := make([]questions.TextPart, l)
	for i := range out {
		out[i] = randque_TextPart()
	}
	return out
}

func randSliceque_VariationTableBlock() []questions.VariationTableBlock {
	l := 3 + rand.Intn(5)
	out := make([]questions.VariationTableBlock, l)
	for i := range out {
		out[i] = randque_VariationTableBlock()
	}
	return out
}

func randSlicerep_NamedRandomLabeledPoint() []repere.NamedRandomLabeledPoint {
	l := 3 + rand.Intn(5)
	out := make([]repere.NamedRandomLabeledPoint, l)
	for i := range out {
		out[i] = randrep_NamedRandomLabeledPoint()
	}
	return out
}

func randSlicerep_RandomArea() []repere.RandomArea {
	l := 3 + rand.Intn(5)
	out := make([]repere.RandomArea, l)
	for i := range out {
		out[i] = randrep_RandomArea()
	}
	return out
}

func randSlicerep_RandomCircle() []repere.RandomCircle {
	l := 3 + rand.Intn(5)
	out := make([]repere.RandomCircle, l)
	for i := range out {
		out[i] = randrep_RandomCircle()
	}
	return out
}

func randSlicerep_RandomLine() []repere.RandomLine {
	l := 3 + rand.Intn(5)
	out := make([]repere.RandomLine, l)
	for i := range out {
		out[i] = randrep_RandomLine()
	}
	return out
}

func randSlicerep_RandomSegment() []repere.RandomSegment {
	l := 3 + rand.Intn(5)
	out := make([]repere.RandomSegment, l)
	for i := range out {
		out[i] = randrep_RandomSegment()
	}
	return out
}

func randSlicestring() []string {
	l := 3 + rand.Intn(5)
	out := make([]string, l)
	for i := range out {
		out[i] = randstring()
	}
	return out
}

func randStat() Stat {
	var s Stat
	s.Success = randuint16()
	s.Failure = randuint16()

	return s
}

func randStats() Stats {
	return Stats(randArray4Array8Stat())
}

func randbool() bool {
	i := rand.Int31n(2)
	return i == 1
}

func randcli_SignSymbol() client.SignSymbol {
	choix := [...]client.SignSymbol{client.Nothing, client.Zero, client.ForbiddenValue}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randexp_Variable() expression.Variable {
	var s expression.Variable
	s.Indice = randstring()
	s.Name = randrune()

	return s
}

func randfloat64() float64 {
	return rand.Float64() * float64(rand.Int31())
}

func randint() int {
	return int(rand.Intn(1000000))
}

func randint64() int64 {
	return int64(rand.Intn(1000000))
}

func randque_Block() questions.Block {
	choix := [...]questions.Block{
		randque_ExpressionFieldBlock(),
		randque_FigureBlock(),
		randque_FormulaBlock(),
		randque_FunctionPointsFieldBlock(),
		randque_FunctionsGraphBlock(),
		randque_GeometricConstructionFieldBlock(),
		randque_NumberFieldBlock(),
		randque_OrderedListFieldBlock(),
		randque_ProofFieldBlock(),
		randque_RadioFieldBlock(),
		randque_SignTableBlock(),
		randque_SignTableFieldBlock(),
		randque_TableBlock(),
		randque_TableFieldBlock(),
		randque_TextBlock(),
		randque_TreeBlock(),
		randque_TreeFieldBlock(),
		randque_VariationTableBlock(),
		randque_VariationTableFieldBlock(),
		randque_VectorFieldBlock(),
	}
	i := rand.Intn(20)
	return choix[i]
}

func randque_Co() questions.Co {
	return questions.Co(randstring())
}

func randque_ComparisonLevel() questions.ComparisonLevel {
	choix := [...]questions.ComparisonLevel{questions.AsLinearEquation, questions.ExpandedSubstitutions, questions.SimpleSubstitutions, questions.Strict}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randque_CoordExpression() questions.CoordExpression {
	var s questions.CoordExpression
	s.X = randstring()
	s.Y = randstring()

	return s
}

func randque_Enonce() questions.Enonce {
	return questions.Enonce(randSliceque_Block())
}

func randque_ExpressionFieldBlock() questions.ExpressionFieldBlock {
	var s questions.ExpressionFieldBlock
	s.Expression = randstring()
	s.Label = randque_Interpolated()
	s.ComparisonLevel = randque_ComparisonLevel()
	s.ShowFractionHelp = randbool()

	return s
}

func randque_FigureBlock() questions.FigureBlock {
	var s questions.FigureBlock
	s.Drawings = randrep_RandomDrawings()
	s.Bounds = randrep_RepereBounds()
	s.ShowGrid = randbool()
	s.ShowOrigin = randbool()

	return s
}

func randque_FiguresOrGraphs() questions.FiguresOrGraphs {
	choix := [...]questions.FiguresOrGraphs{
		randque_FigureBlock(),
		randque_FunctionsGraphBlock(),
	}
	i := rand.Intn(2)
	return choix[i]
}

func randque_FormulaBlock() questions.FormulaBlock {
	var s questions.FormulaBlock
	s.Parts = randque_Interpolated()

	return s
}

func randque_FunctionArea() questions.FunctionArea {
	var s questions.FunctionArea
	s.Bottom = randque_Interpolated()
	s.Top = randque_Interpolated()
	s.Left = randstring()
	s.Right = randstring()
	s.Color = randrep_ColorHex()

	return s
}

func randque_FunctionDecoration() questions.FunctionDecoration {
	var s questions.FunctionDecoration
	s.Label = randque_Interpolated()
	s.Color = randstring()

	return s
}

func randque_FunctionDefinition() questions.FunctionDefinition {
	var s questions.FunctionDefinition
	s.Function = randstring()
	s.Decoration = randque_FunctionDecoration()
	s.Variable = randexp_Variable()
	s.From = randstring()
	s.To = randstring()

	return s
}

func randque_FunctionPoint() questions.FunctionPoint {
	var s questions.FunctionPoint
	s.Function = randque_Interpolated()
	s.X = randstring()
	s.Color = randrep_ColorHex()
	s.Legend = randque_Interpolated()

	return s
}

func randque_FunctionPointsFieldBlock() questions.FunctionPointsFieldBlock {
	var s questions.FunctionPointsFieldBlock
	s.IsDiscrete = randbool()
	s.Function = randstring()
	s.Label = randstring()
	s.Variable = randexp_Variable()
	s.XGrid = randSlicestring()

	return s
}

func randque_FunctionSign() questions.FunctionSign {
	var s questions.FunctionSign
	s.Label = randque_Interpolated()
	s.FxSymbols = randSlicecli_SignSymbol()
	s.Signs = randSlicebool()

	return s
}

func randque_FunctionsGraphBlock() questions.FunctionsGraphBlock {
	var s questions.FunctionsGraphBlock
	s.FunctionExprs = randSliceque_FunctionDefinition()
	s.FunctionVariations = randSliceque_VariationTableBlock()
	s.SequenceExprs = randSliceque_FunctionDefinition()
	s.Areas = randSliceque_FunctionArea()
	s.Points = randSliceque_FunctionPoint()

	return s
}

func randque_GFAffineLine() questions.GFAffineLine {
	var s questions.GFAffineLine
	s.Label = randstring()
	s.A = randstring()
	s.B = randstring()

	return s
}

func randque_GFPoint() questions.GFPoint {
	var s questions.GFPoint
	s.Answer = randque_CoordExpression()

	return s
}

func randque_GFVector() questions.GFVector {
	var s questions.GFVector
	s.Answer = randque_CoordExpression()
	s.AnswerOrigin = randque_CoordExpression()
	s.MustHaveOrigin = randbool()

	return s
}

func randque_GFVectorPair() questions.GFVectorPair {
	var s questions.GFVectorPair
	s.Criterion = randque_VectorPairCriterion()

	return s
}

func randque_GeoField() questions.GeoField {
	choix := [...]questions.GeoField{
		randque_GFAffineLine(),
		randque_GFPoint(),
		randque_GFVector(),
		randque_GFVectorPair(),
	}
	i := rand.Intn(4)
	return choix[i]
}

func randque_GeometricConstructionFieldBlock() questions.GeometricConstructionFieldBlock {
	var s questions.GeometricConstructionFieldBlock
	s.Field = randque_GeoField()
	s.Background = randque_FiguresOrGraphs()

	return s
}

func randque_In() questions.In {
	return questions.In(randstring())
}

func randque_Interpolated() questions.Interpolated {
	return questions.Interpolated(randstring())
}

func randque_NumberFieldBlock() questions.NumberFieldBlock {
	var s questions.NumberFieldBlock
	s.Expression = randstring()

	return s
}

func randque_OrderedListFieldBlock() questions.OrderedListFieldBlock {
	var s questions.OrderedListFieldBlock
	s.Label = randque_Interpolated()
	s.Answer = randSliceque_Interpolated()
	s.AdditionalProposals = randSliceque_Interpolated()

	return s
}

func randque_ParameterEntry() questions.ParameterEntry {
	choix := [...]questions.ParameterEntry{
		randque_Co(),
		randque_In(),
		randque_Rp(),
	}
	i := rand.Intn(3)
	return choix[i]
}

func randque_Parameters() questions.Parameters {
	return questions.Parameters(randSliceque_ParameterEntry())
}

func randque_ProofFieldBlock() questions.ProofFieldBlock {
	var s questions.ProofFieldBlock
	s.Answer = randque_ProofSequence()

	return s
}

func randque_ProofSequence() questions.ProofSequence {
	var s questions.ProofSequence

	return s
}

func randque_RadioFieldBlock() questions.RadioFieldBlock {
	var s questions.RadioFieldBlock
	s.Answer = randstring()
	s.Proposals = randSliceque_Interpolated()
	s.AsDropDown = randbool()

	return s
}

func randque_Rp() questions.Rp {
	var s questions.Rp
	s.Expression = randstring()
	s.Variable = randexp_Variable()

	return s
}

func randque_SignTableBlock() questions.SignTableBlock {
	var s questions.SignTableBlock
	s.Xs = randSlicestring()
	s.Functions = randSliceque_FunctionSign()

	return s
}

func randque_SignTableFieldBlock() questions.SignTableFieldBlock {
	var s questions.SignTableFieldBlock
	s.Answer = randque_SignTableBlock()

	return s
}

func randque_TableBlock() questions.TableBlock {
	var s questions.TableBlock
	s.HorizontalHeaders = randSliceque_TextPart()
	s.VerticalHeaders = randSliceque_TextPart()
	s.Values = randSliceSliceque_TextPart()

	return s
}

func randque_TableFieldBlock() questions.TableFieldBlock {
	var s questions.TableFieldBlock
	s.HorizontalHeaders = randSliceque_TextPart()
	s.VerticalHeaders = randSliceque_TextPart()
	s.Answer = randSliceSlicestring()

	return s
}

func randque_TextBlock() questions.TextBlock {
	var s questions.TextBlock
	s.Parts = randque_Interpolated()
	s.Bold = randbool()
	s.Italic = randbool()
	s.Smaller = randbool()

	return s
}

func randque_TextKind() questions.TextKind {
	choix := [...]questions.TextKind{questions.Text, questions.StaticMath, questions.Expression}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randque_TextPart() questions.TextPart {
	var s questions.TextPart
	s.Content = randstring()
	s.Kind = randque_TextKind()

	return s
}

func randque_TreeBlock() questions.TreeBlock {
	var s questions.TreeBlock
	s.EventsProposals = randSliceque_Interpolated()
	s.AnswerRoot = randque_TreeNodeAnswer()

	return s
}

func randque_TreeFieldBlock() questions.TreeFieldBlock {
	var s questions.TreeFieldBlock
	s.Answer = randque_TreeBlock()

	return s
}

func randque_TreeNodeAnswer() questions.TreeNodeAnswer {
	var s questions.TreeNodeAnswer
	s.Probabilities = randSlicestring()
	s.Value = randint()

	return s
}

func randque_VariationTableBlock() questions.VariationTableBlock {
	var s questions.VariationTableBlock
	s.Label = randque_Interpolated()
	s.Xs = randSlicestring()
	s.Fxs = randSlicestring()

	return s
}

func randque_VariationTableFieldBlock() questions.VariationTableFieldBlock {
	var s questions.VariationTableFieldBlock
	s.Answer = randque_VariationTableBlock()

	return s
}

func randque_VectorFieldBlock() questions.VectorFieldBlock {
	var s questions.VectorFieldBlock
	s.Answer = randque_CoordExpression()
	s.AcceptColinear = randbool()
	s.DisplayColumn = randbool()

	return s
}

func randque_VectorPairCriterion() questions.VectorPairCriterion {
	choix := [...]questions.VectorPairCriterion{questions.VectorEquals, questions.VectorColinear, questions.VectorOrthogonal}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randrep_ColorHex() repere.ColorHex {
	return repere.ColorHex(randstring())
}

func randrep_Coord() repere.Coord {
	var s repere.Coord
	s.X = randfloat64()
	s.Y = randfloat64()

	return s
}

func randrep_LabelPos() repere.LabelPos {
	choix := [...]repere.LabelPos{repere.Top, repere.Bottom, repere.Left, repere.Right, repere.TopLeft, repere.TopRight, repere.BottomRight, repere.BottomLeft, repere.Hide}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randrep_NamedRandomLabeledPoint() repere.NamedRandomLabeledPoint {
	var s repere.NamedRandomLabeledPoint
	s.Name = randstring()
	s.Point = randrep_RandomLabeledPoint()

	return s
}

func randrep_RandomArea() repere.RandomArea {
	var s repere.RandomArea
	s.Color = randrep_ColorHex()
	s.Points = randSlicestring()

	return s
}

func randrep_RandomCircle() repere.RandomCircle {
	var s repere.RandomCircle
	s.Center = randrep_RandomCoord()
	s.Radius = randstring()
	s.LineColor = randrep_ColorHex()
	s.FillColor = randrep_ColorHex()
	s.Legend = randstring()

	return s
}

func randrep_RandomCoord() repere.RandomCoord {
	var s repere.RandomCoord
	s.X = randstring()
	s.Y = randstring()

	return s
}

func randrep_RandomDrawings() repere.RandomDrawings {
	var s repere.RandomDrawings
	s.Points = randSlicerep_NamedRandomLabeledPoint()
	s.Segments = randSlicerep_RandomSegment()
	s.Lines = randSlicerep_RandomLine()
	s.Circles = randSlicerep_RandomCircle()
	s.Areas = randSlicerep_RandomArea()

	return s
}

func randrep_RandomLabeledPoint() repere.RandomLabeledPoint {
	var s repere.RandomLabeledPoint
	s.Color = randrep_ColorHex()
	s.Coord = randrep_RandomCoord()
	s.Pos = randrep_LabelPos()

	return s
}

func randrep_RandomLine() repere.RandomLine {
	var s repere.RandomLine
	s.Label = randstring()
	s.A = randstring()
	s.B = randstring()
	s.Color = randrep_ColorHex()

	return s
}

func randrep_RandomSegment() repere.RandomSegment {
	var s repere.RandomSegment
	s.LabelName = randstring()
	s.From = randstring()
	s.To = randstring()
	s.Color = randrep_ColorHex()
	s.LabelPos = randrep_LabelPos()
	s.Kind = randrep_SegmentKind()

	return s
}

func randrep_RepereBounds() repere.RepereBounds {
	var s repere.RepereBounds
	s.Width = randint()
	s.Height = randint()
	s.Origin = randrep_Coord()

	return s
}

func randrep_SegmentKind() repere.SegmentKind {
	choix := [...]repere.SegmentKind{repere.SKSegment, repere.SKVector, repere.SKLine}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randrune() rune {
	return rune(rand.Intn(1000000))
}

var letterRunes2 = []rune("azertyuiopqsdfghjklmwxcvbn123456789é@!?&èïab ")

func randstring() string {
	b := make([]rune, 10)
	maxLength := len(letterRunes2)
	for i := range b {
		b[i] = letterRunes2[rand.Intn(maxLength)]
	}
	return string(b)
}

func randtea_IdStudent() teacher.IdStudent {
	return teacher.IdStudent(randint64())
}

func randuint16() uint16 {
	return uint16(rand.Intn(1000000))
}
