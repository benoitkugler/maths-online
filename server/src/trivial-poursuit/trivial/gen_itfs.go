package trivial

import "encoding/json"

// Code generated by structgen/interfaces. DO NOT EDIT

// ClientEventITFWrapper may be used as replacements for ClientEventITF
// when working with JSON
type ClientEventITFWrapper struct {
	Data ClientEventITF
}

func (out *ClientEventITFWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data Answer
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data ClientMove
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data DiceClicked
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 3:
		var data Ping
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 4:
		var data WantNextTurn
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item ClientEventITFWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case Answer:
		wr = wrapper{Kind: 0, Data: data}
	case ClientMove:
		wr = wrapper{Kind: 1, Data: data}
	case DiceClicked:
		wr = wrapper{Kind: 2, Data: data}
	case Ping:
		wr = wrapper{Kind: 3, Data: data}
	case WantNextTurn:
		wr = wrapper{Kind: 4, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

const (
	AnswerClKind = iota
	ClientMoveClKind
	DiceClickedClKind
	PingClKind
	WantNextTurnClKind
)

// ServerEventWrapper may be used as replacements for ServerEvent
// when working with JSON
type ServerEventWrapper struct {
	Data ServerEvent
}

func (out *ServerEventWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data DiceThrow
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data GameEnd
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data GameStart
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 3:
		var data GameTerminated
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 4:
		var data LobbyUpdate
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 5:
		var data Move
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 6:
		var data PlayerAnswerResults
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 7:
		var data PlayerJoin
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 8:
		var data PlayerLeft
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 9:
		var data PlayerReconnected
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 10:
		var data PlayerTurn
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 11:
		var data PossibleMoves
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 12:
		var data ShowQuestion
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item ServerEventWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case DiceThrow:
		wr = wrapper{Kind: 0, Data: data}
	case GameEnd:
		wr = wrapper{Kind: 1, Data: data}
	case GameStart:
		wr = wrapper{Kind: 2, Data: data}
	case GameTerminated:
		wr = wrapper{Kind: 3, Data: data}
	case LobbyUpdate:
		wr = wrapper{Kind: 4, Data: data}
	case Move:
		wr = wrapper{Kind: 5, Data: data}
	case PlayerAnswerResults:
		wr = wrapper{Kind: 6, Data: data}
	case PlayerJoin:
		wr = wrapper{Kind: 7, Data: data}
	case PlayerLeft:
		wr = wrapper{Kind: 8, Data: data}
	case PlayerReconnected:
		wr = wrapper{Kind: 9, Data: data}
	case PlayerTurn:
		wr = wrapper{Kind: 10, Data: data}
	case PossibleMoves:
		wr = wrapper{Kind: 11, Data: data}
	case ShowQuestion:
		wr = wrapper{Kind: 12, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

const (
	DiceThrowSeKind = iota
	GameEndSeKind
	GameStartSeKind
	GameTerminatedSeKind
	LobbyUpdateSeKind
	MoveSeKind
	PlayerAnswerResultsSeKind
	PlayerJoinSeKind
	PlayerLeftSeKind
	PlayerReconnectedSeKind
	PlayerTurnSeKind
	PossibleMovesSeKind
	ShowQuestionSeKind
)

func (ct Events) MarshalJSON() ([]byte, error) {
	tmp := make([]ServerEventWrapper, len(ct))
	for i, v := range ct {
		tmp[i].Data = v
	}
	return json.Marshal(tmp)
}

func (ct *Events) UnmarshalJSON(data []byte) error {
	var tmp []ServerEventWrapper
	err := json.Unmarshal(data, &tmp)
	*ct = make(Events, len(tmp))
	for i, v := range tmp {
		(*ct)[i] = v.Data
	}
	return err
}
