package exercice

// Code generated by structgen. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"

	"github.com/lib/pq"
)

func loadJSON(out interface{}, src interface{}) error {
	if src == nil {
		return nil //zero value out
	}
	bs, ok := src.([]byte)
	if !ok {
		return errors.New("not a []byte")
	}
	return json.Unmarshal(bs, out)
}

func dumpJSON(s interface{}) (driver.Value, error) {
	b, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	return driver.Value(string(b)), nil
}

// Set is a set of IDs.
type Set map[int64]bool

func NewSet() Set {
	return map[int64]bool{}
}

// NewSetFromSlice returns a set of unique IDs
func NewSetFromSlice(keys []int64) Set {
	out := make(Set, len(keys))
	for _, key := range keys {
		out[key] = true
	}
	return out
}

// Keys return the IDs contained in the set, as a slice.
func (s Set) Keys() []int64 {
	out := make([]int64, 0, len(s))
	for k := range s {
		out = append(out, k)
	}
	return out
}

func (s Set) Has(key int64) bool {
	_, has := s[key]
	return has
}

func (s Set) Add(key int64) {
	s[key] = true
}

type IDs []int64

func (ids IDs) AsSQL() pq.Int64Array {
	return pq.Int64Array(ids)
}

func (ids IDs) AsSet() Set {
	return NewSetFromSlice(ids)
}

// ScanIDs scans the result of a query returning a
// list of IDs.
func ScanIDs(rs *sql.Rows) (IDs, error) {
	defer rs.Close()
	ints := make(IDs, 0, 16)
	var err error
	for rs.Next() {
		var s int64
		if err = rs.Scan(&s); err != nil {
			return nil, err
		}
		ints = append(ints, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return ints, nil
}

type scanner interface {
	Scan(...interface{}) error
}

// DB groups transaction like objects
type DB interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
	Prepare(query string) (*sql.Stmt, error)
}

func scanOneExercice(row scanner) (Exercice, error) {
	var s Exercice
	err := row.Scan(
		&s.Id,
		&s.Parameters,
		&s.Flow,
	)
	return s, err
}

func ScanExercice(row *sql.Row) (Exercice, error) {
	return scanOneExercice(row)
}

func SelectAllExercices(tx DB) (Exercices, error) {
	rows, err := tx.Query("SELECT * FROM exercices")
	if err != nil {
		return nil, err
	}
	return ScanExercices(rows)
}

// SelectExercice returns the entry matching id.
func SelectExercice(tx DB, id int64) (Exercice, error) {
	row := tx.QueryRow("SELECT * FROM exercices WHERE id = $1", id)
	return ScanExercice(row)
}

// SelectExercices returns the entry matching the given ids.
func SelectExercices(tx DB, ids ...int64) (Exercices, error) {
	rows, err := tx.Query("SELECT * FROM exercices WHERE id = ANY($1)", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanExercices(rows)
}

type Exercices map[int64]Exercice

func (m Exercices) IDs() IDs {
	out := make(IDs, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanExercices(rs *sql.Rows) (Exercices, error) {
	var (
		s   Exercice
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Exercices, 16)
	for rs.Next() {
		s, err = scanOneExercice(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Exercice in the database and returns the item with id filled.
func (item Exercice) Insert(tx DB) (out Exercice, err error) {
	row := tx.QueryRow(`INSERT INTO exercices (
		Parameters,Flow
		) VALUES (
		$1,$2
		) RETURNING 
		Id,Parameters,Flow;
		`, item.Parameters, item.Flow)
	return ScanExercice(row)
}

// Update Exercice in the database and returns the new version.
func (item Exercice) Update(tx DB) (out Exercice, err error) {
	row := tx.QueryRow(`UPDATE exercices SET (
		Parameters,Flow
		) = (
		$2,$3
		) WHERE id = $1 RETURNING 
		Id,Parameters,Flow;
		`, item.Id, item.Parameters, item.Flow)
	return ScanExercice(row)
}

// Deletes the Exercice and returns the item
func DeleteExerciceById(tx DB, id int64) (Exercice, error) {
	row := tx.QueryRow("DELETE FROM exercices WHERE id = $1 RETURNING *;", id)
	return ScanExercice(row)
}

// Deletes the Exercice in the database and returns the ids.
func DeleteExercicesByIDs(tx DB, ids ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM exercices WHERE id = ANY($1) RETURNING id", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func scanOneExerciceQuestion(row scanner) (ExerciceQuestion, error) {
	var s ExerciceQuestion
	err := row.Scan(
		&s.IdExercice,
		&s.IdQuestion,
		&s.Bareme,
	)
	return s, err
}

func ScanExerciceQuestion(row *sql.Row) (ExerciceQuestion, error) {
	return scanOneExerciceQuestion(row)
}

func SelectAllExerciceQuestions(tx DB) (ExerciceQuestions, error) {
	rows, err := tx.Query("SELECT * FROM exercice_questions")
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

type ExerciceQuestions []ExerciceQuestion

func ScanExerciceQuestions(rs *sql.Rows) (ExerciceQuestions, error) {
	var (
		s   ExerciceQuestion
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(ExerciceQuestions, 0, 16)
	for rs.Next() {
		s, err = scanOneExerciceQuestion(rs)
		if err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert the links ExerciceQuestion in the database.
func InsertManyExerciceQuestions(tx *sql.Tx, items ...ExerciceQuestion) error {
	if len(items) == 0 {
		return nil
	}

	stmt, err := tx.Prepare(pq.CopyIn("exercice_questions",
		"id_exercice", "id_question", "bareme",
	))
	if err != nil {
		return err
	}

	for _, item := range items {
		_, err = stmt.Exec(item.IdExercice, item.IdQuestion, item.Bareme)
		if err != nil {
			return err
		}
	}

	if _, err = stmt.Exec(); err != nil {
		return err
	}

	if err = stmt.Close(); err != nil {
		return err
	}
	return nil
}

// Delete the link ExerciceQuestion in the database.
// Only the 'IdExercice' 'IdQuestion' fields are used.
func (item ExerciceQuestion) Delete(tx DB) error {
	_, err := tx.Exec(`DELETE FROM exercice_questions WHERE 
	id_exercice = $1 AND id_question = $2;`, item.IdExercice, item.IdQuestion)
	return err
}

func SelectExerciceQuestionsByIdExercices(tx DB, idExercices ...int64) (ExerciceQuestions, error) {
	rows, err := tx.Query("SELECT * FROM exercice_questions WHERE id_exercice = ANY($1)", pq.Int64Array(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

func DeleteExerciceQuestionsByIdExercices(tx DB, idExercices ...int64) (ExerciceQuestions, error) {
	rows, err := tx.Query("DELETE FROM exercice_questions WHERE id_exercice = ANY($1) RETURNING *", pq.Int64Array(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

func SelectExerciceQuestionsByIdQuestions(tx DB, idQuestions ...int64) (ExerciceQuestions, error) {
	rows, err := tx.Query("SELECT * FROM exercice_questions WHERE id_question = ANY($1)", pq.Int64Array(idQuestions))
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

func DeleteExerciceQuestionsByIdQuestions(tx DB, idQuestions ...int64) (ExerciceQuestions, error) {
	rows, err := tx.Query("DELETE FROM exercice_questions WHERE id_question = ANY($1) RETURNING *", pq.Int64Array(idQuestions))
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

// ByIdExercice returns a map with 'IdExercice' as keys.
func (items ExerciceQuestions) ByIdExercice() map[int64]ExerciceQuestions {
	out := make(map[int64]ExerciceQuestions)
	for _, target := range items {
		out[target.IdExercice] = append(out[target.IdExercice], target)
	}
	return out
}

// IdExercices returns the list of ids of IdExercice
// contained in this link table.
// They are not garanteed to be distinct.
func (items ExerciceQuestions) IdExercices() IDs {
	out := make(IDs, len(items))
	for index, target := range items {
		out[index] = target.IdExercice
	}
	return out
}

// ByIdQuestion returns a map with 'IdQuestion' as keys.
func (items ExerciceQuestions) ByIdQuestion() map[int64]ExerciceQuestions {
	out := make(map[int64]ExerciceQuestions)
	for _, target := range items {
		out[target.IdQuestion] = append(out[target.IdQuestion], target)
	}
	return out
}

// IdQuestions returns the list of ids of IdQuestion
// contained in this link table.
// They are not garanteed to be distinct.
func (items ExerciceQuestions) IdQuestions() IDs {
	out := make(IDs, len(items))
	for index, target := range items {
		out[index] = target.IdQuestion
	}
	return out
}
