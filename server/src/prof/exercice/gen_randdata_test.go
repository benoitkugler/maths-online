package exercice

import (
	"math/rand"

	"github.com/benoitkugler/maths-online/maths/expression"
	"github.com/benoitkugler/maths-online/maths/questions"
)

// Code generated by structgen. DO NOT EDIT.

func randint64() int64 {
	return int64(rand.Intn(1000000))
}

var letterRunes2 = []rune("azertyuiopqsdfghjklmwxcvbn123456789é@!?&èïab ")

func randstring() string {
	b := make([]rune, 50)
	maxLength := len(letterRunes2)
	for i := range b {
		b[i] = letterRunes2[rand.Intn(maxLength)]
	}
	return string(b)
}

func randrune() rune {
	return rune(rand.Intn(1000000))
}

func randexp_Variable() expression.Variable {
	return expression.Variable{
		Indice: randstring(),
		Name:   randrune(),
	}
}

func randque_RandomParameter() questions.RandomParameter {
	return questions.RandomParameter{
		Expression: randstring(),
		Variable:   randexp_Variable(),
	}
}

func randSliceque_RandomParameter() []questions.RandomParameter {
	l := 40 + rand.Intn(10)
	out := make([]questions.RandomParameter, l)
	for i := range out {
		out[i] = randque_RandomParameter()
	}
	return out
}

func randRandomParameters() questions.RandomParameters {
	return questions.RandomParameters(randSliceque_RandomParameter())
}

func randSlicestring() []string {
	l := 40 + rand.Intn(10)
	out := make([]string, l)
	for i := range out {
		out[i] = randstring()
	}
	return out
}

func randque_Parameters() questions.Parameters {
	return questions.Parameters{
		Variables:  randRandomParameters(),
		Intrinsics: randSlicestring(),
	}
}

func randFlow() Flow {
	choix := [...]Flow{Parallel, Sequencial}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randExercice() Exercice {
	return Exercice{
		Id:         randint64(),
		Parameters: randque_Parameters(),
		Flow:       randFlow(),
	}
}

func randint() int {
	return int(rand.Intn(1000000))
}

func randExerciceQuestion() ExerciceQuestion {
	return ExerciceQuestion{
		IdExercice: randint64(),
		IdQuestion: randint64(),
		Bareme:     randint(),
	}
}
