package teacher

// Code generated by structgen. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"
	"time"

	"github.com/lib/pq"
)

func loadJSON(out interface{}, src interface{}) error {
	if src == nil {
		return nil //zero value out
	}
	bs, ok := src.([]byte)
	if !ok {
		return errors.New("not a []byte")
	}
	return json.Unmarshal(bs, out)
}

func dumpJSON(s interface{}) (driver.Value, error) {
	b, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	return driver.Value(string(b)), nil
}

// Set is a set of IDs.
type Set map[int64]bool

func NewSet() Set {
	return map[int64]bool{}
}

// NewSetFromSlice returns a set of unique IDs
func NewSetFromSlice(keys []int64) Set {
	out := make(Set, len(keys))
	for _, key := range keys {
		out[key] = true
	}
	return out
}

// Keys return the IDs contained in the set, as a slice.
func (s Set) Keys() []int64 {
	out := make([]int64, 0, len(s))
	for k := range s {
		out = append(out, k)
	}
	return out
}

func (s Set) Has(key int64) bool {
	_, has := s[key]
	return has
}

func (s Set) Add(key int64) {
	s[key] = true
}

type IDs []int64

func (ids IDs) AsSQL() pq.Int64Array {
	return pq.Int64Array(ids)
}

func (ids IDs) AsSet() Set {
	return NewSetFromSlice(ids)
}

// ScanIDs scans the result of a query returning a
// list of IDs.
func ScanIDs(rs *sql.Rows) (IDs, error) {
	defer rs.Close()
	ints := make(IDs, 0, 16)
	var err error
	for rs.Next() {
		var s int64
		if err = rs.Scan(&s); err != nil {
			return nil, err
		}
		ints = append(ints, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return ints, nil
}

type scanner interface {
	Scan(...interface{}) error
}

// DB groups transaction like objects
type DB interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
	Prepare(query string) (*sql.Stmt, error)
}

func scanOneClassroom(row scanner) (Classroom, error) {
	var s Classroom
	err := row.Scan(
		&s.Id,
		&s.IdTeacher,
		&s.Name,
	)
	return s, err
}

func ScanClassroom(row *sql.Row) (Classroom, error) {
	return scanOneClassroom(row)
}

func SelectAllClassrooms(tx DB) (Classrooms, error) {
	rows, err := tx.Query("SELECT * FROM classrooms")
	if err != nil {
		return nil, err
	}
	return ScanClassrooms(rows)
}

// SelectClassroom returns the entry matching id.
func SelectClassroom(tx DB, id int64) (Classroom, error) {
	row := tx.QueryRow("SELECT * FROM classrooms WHERE id = $1", id)
	return ScanClassroom(row)
}

// SelectClassrooms returns the entry matching the given ids.
func SelectClassrooms(tx DB, ids ...int64) (Classrooms, error) {
	rows, err := tx.Query("SELECT * FROM classrooms WHERE id = ANY($1)", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanClassrooms(rows)
}

type Classrooms map[int64]Classroom

func (m Classrooms) IDs() IDs {
	out := make(IDs, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanClassrooms(rs *sql.Rows) (Classrooms, error) {
	var (
		s   Classroom
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Classrooms, 16)
	for rs.Next() {
		s, err = scanOneClassroom(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Classroom in the database and returns the item with id filled.
func (item Classroom) Insert(tx DB) (out Classroom, err error) {
	row := tx.QueryRow(`INSERT INTO classrooms (
		id_teacher,name
		) VALUES (
		$1,$2
		) RETURNING 
		id,id_teacher,name;
		`, item.IdTeacher, item.Name)
	return ScanClassroom(row)
}

// Update Classroom in the database and returns the new version.
func (item Classroom) Update(tx DB) (out Classroom, err error) {
	row := tx.QueryRow(`UPDATE classrooms SET (
		id_teacher,name
		) = (
		$2,$3
		) WHERE id = $1 RETURNING 
		id,id_teacher,name;
		`, item.Id, item.IdTeacher, item.Name)
	return ScanClassroom(row)
}

// Deletes the Classroom and returns the item
func DeleteClassroomById(tx DB, id int64) (Classroom, error) {
	row := tx.QueryRow("DELETE FROM classrooms WHERE id = $1 RETURNING *;", id)
	return ScanClassroom(row)
}

// Deletes the Classroom in the database and returns the ids.
func DeleteClassroomsByIDs(tx DB, ids ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM classrooms WHERE id = ANY($1) RETURNING id", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func scanOneStudent(row scanner) (Student, error) {
	var s Student
	err := row.Scan(
		&s.Id,
		&s.Name,
		&s.Surname,
		&s.Birthday,
		&s.TrivialSuccess,
		&s.IsClientAttached,
		&s.IdClassroom,
	)
	return s, err
}

func ScanStudent(row *sql.Row) (Student, error) {
	return scanOneStudent(row)
}

func SelectAllStudents(tx DB) (Students, error) {
	rows, err := tx.Query("SELECT * FROM students")
	if err != nil {
		return nil, err
	}
	return ScanStudents(rows)
}

// SelectStudent returns the entry matching id.
func SelectStudent(tx DB, id int64) (Student, error) {
	row := tx.QueryRow("SELECT * FROM students WHERE id = $1", id)
	return ScanStudent(row)
}

// SelectStudents returns the entry matching the given ids.
func SelectStudents(tx DB, ids ...int64) (Students, error) {
	rows, err := tx.Query("SELECT * FROM students WHERE id = ANY($1)", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanStudents(rows)
}

type Students map[int64]Student

func (m Students) IDs() IDs {
	out := make(IDs, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanStudents(rs *sql.Rows) (Students, error) {
	var (
		s   Student
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Students, 16)
	for rs.Next() {
		s, err = scanOneStudent(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Student in the database and returns the item with id filled.
func (item Student) Insert(tx DB) (out Student, err error) {
	row := tx.QueryRow(`INSERT INTO students (
		Name,Surname,Birthday,TrivialSuccess,IsClientAttached,id_classroom
		) VALUES (
		$1,$2,$3,$4,$5,$6
		) RETURNING 
		Id,Name,Surname,Birthday,TrivialSuccess,IsClientAttached,id_classroom;
		`, item.Name, item.Surname, item.Birthday, item.TrivialSuccess, item.IsClientAttached, item.IdClassroom)
	return ScanStudent(row)
}

// Update Student in the database and returns the new version.
func (item Student) Update(tx DB) (out Student, err error) {
	row := tx.QueryRow(`UPDATE students SET (
		Name,Surname,Birthday,TrivialSuccess,IsClientAttached,id_classroom
		) = (
		$2,$3,$4,$5,$6,$7
		) WHERE id = $1 RETURNING 
		Id,Name,Surname,Birthday,TrivialSuccess,IsClientAttached,id_classroom;
		`, item.Id, item.Name, item.Surname, item.Birthday, item.TrivialSuccess, item.IsClientAttached, item.IdClassroom)
	return ScanStudent(row)
}

// Deletes the Student and returns the item
func DeleteStudentById(tx DB, id int64) (Student, error) {
	row := tx.QueryRow("DELETE FROM students WHERE id = $1 RETURNING *;", id)
	return ScanStudent(row)
}

// Deletes the Student in the database and returns the ids.
func DeleteStudentsByIDs(tx DB, ids ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM students WHERE id = ANY($1) RETURNING id", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func (s *Date) Scan(src interface{}) error {
	var tmp pq.NullTime
	err := tmp.Scan(src)
	if err != nil {
		return err
	}
	*s = Date(tmp.Time)
	return nil
}

func (s Date) Value() (driver.Value, error) {
	return pq.NullTime{Time: time.Time(s), Valid: true}.Value()
}

func scanOneTeacher(row scanner) (Teacher, error) {
	var s Teacher
	err := row.Scan(
		&s.Id,
		&s.Mail,
		&s.PasswordCrypted,
		&s.IsAdmin,
	)
	return s, err
}

func ScanTeacher(row *sql.Row) (Teacher, error) {
	return scanOneTeacher(row)
}

func SelectAllTeachers(tx DB) (Teachers, error) {
	rows, err := tx.Query("SELECT * FROM teachers")
	if err != nil {
		return nil, err
	}
	return ScanTeachers(rows)
}

// SelectTeacher returns the entry matching id.
func SelectTeacher(tx DB, id int64) (Teacher, error) {
	row := tx.QueryRow("SELECT * FROM teachers WHERE id = $1", id)
	return ScanTeacher(row)
}

// SelectTeachers returns the entry matching the given ids.
func SelectTeachers(tx DB, ids ...int64) (Teachers, error) {
	rows, err := tx.Query("SELECT * FROM teachers WHERE id = ANY($1)", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanTeachers(rows)
}

type Teachers map[int64]Teacher

func (m Teachers) IDs() IDs {
	out := make(IDs, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanTeachers(rs *sql.Rows) (Teachers, error) {
	var (
		s   Teacher
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Teachers, 16)
	for rs.Next() {
		s, err = scanOneTeacher(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Teacher in the database and returns the item with id filled.
func (item Teacher) Insert(tx DB) (out Teacher, err error) {
	row := tx.QueryRow(`INSERT INTO teachers (
		mail,password_crypted,is_admin
		) VALUES (
		$1,$2,$3
		) RETURNING 
		id,mail,password_crypted,is_admin;
		`, item.Mail, item.PasswordCrypted, item.IsAdmin)
	return ScanTeacher(row)
}

// Update Teacher in the database and returns the new version.
func (item Teacher) Update(tx DB) (out Teacher, err error) {
	row := tx.QueryRow(`UPDATE teachers SET (
		mail,password_crypted,is_admin
		) = (
		$2,$3,$4
		) WHERE id = $1 RETURNING 
		id,mail,password_crypted,is_admin;
		`, item.Id, item.Mail, item.PasswordCrypted, item.IsAdmin)
	return ScanTeacher(row)
}

// Deletes the Teacher and returns the item
func DeleteTeacherById(tx DB, id int64) (Teacher, error) {
	row := tx.QueryRow("DELETE FROM teachers WHERE id = $1 RETURNING *;", id)
	return ScanTeacher(row)
}

// Deletes the Teacher in the database and returns the ids.
func DeleteTeachersByIDs(tx DB, ids ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM teachers WHERE id = ANY($1) RETURNING id", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func SelectClassroomsByIdTeachers(tx DB, idTeachers ...int64) (Classrooms, error) {
	rows, err := tx.Query("SELECT * FROM classrooms WHERE id_teacher = ANY($1)", pq.Int64Array(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanClassrooms(rows)
}

func DeleteClassroomsByIdTeachers(tx DB, idTeachers ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM classrooms WHERE id_teacher = ANY($1) RETURNING id", pq.Int64Array(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func SelectStudentsByIdClassrooms(tx DB, idClassrooms ...int64) (Students, error) {
	rows, err := tx.Query("SELECT * FROM students WHERE id_classroom = ANY($1)", pq.Int64Array(idClassrooms))
	if err != nil {
		return nil, err
	}
	return ScanStudents(rows)
}

func DeleteStudentsByIdClassrooms(tx DB, idClassrooms ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM students WHERE id_classroom = ANY($1) RETURNING id", pq.Int64Array(idClassrooms))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}
