package reviews

import "encoding/json"

// Code generated by gomacro/generator/gounions. DO NOT EDIT

func (item LoadTargetOut) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Content TargetContentWrapper
	}
	wr := wrapper{
		Content: TargetContentWrapper{item.Content},
	}
	return json.Marshal(wr)
}

func (item *LoadTargetOut) UnmarshalJSON(src []byte) error {
	type wrapper struct {
		Content TargetContentWrapper
	}
	var wr wrapper
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	item.Content = wr.Content.Data
	return nil
}

// TargetContentWrapper may be used as replacements for TargetContent
// when working with JSON
type TargetContentWrapper struct {
	Data TargetContent
}

func (out *TargetContentWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Kind string
		Data json.RawMessage
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case "TargetExercice":
		var data TargetExercice
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case "TargetQuestion":
		var data TargetQuestion
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case "TargetSheet":
		var data TargetSheet
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case "TargetTrivial":
		var data TargetTrivial
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item TargetContentWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data any
		Kind string
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case TargetExercice:
		wr = wrapper{Kind: "TargetExercice", Data: data}
	case TargetQuestion:
		wr = wrapper{Kind: "TargetQuestion", Data: data}
	case TargetSheet:
		wr = wrapper{Kind: "TargetSheet", Data: data}
	case TargetTrivial:
		wr = wrapper{Kind: "TargetTrivial", Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

const (
	TargetExerciceTaKind = "TargetExercice"
	TargetQuestionTaKind = "TargetQuestion"
	TargetSheetTaKind    = "TargetSheet"
	TargetTrivialTaKind  = "TargetTrivial"
)
