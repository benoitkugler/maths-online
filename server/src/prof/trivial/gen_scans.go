package trivial

// Code generated by structgen. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"

	"github.com/lib/pq"
)

func loadJSON(out interface{}, src interface{}) error {
	if src == nil {
		return nil //zero value out
	}
	bs, ok := src.([]byte)
	if !ok {
		return errors.New("not a []byte")
	}
	return json.Unmarshal(bs, out)
}

func dumpJSON(s interface{}) (driver.Value, error) {
	b, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	return driver.Value(string(b)), nil
}

// Set is a set of IDs.
type Set map[int64]bool

func NewSet() Set {
	return map[int64]bool{}
}

// NewSetFromSlice returns a set of unique IDs
func NewSetFromSlice(keys []int64) Set {
	out := make(Set, len(keys))
	for _, key := range keys {
		out[key] = true
	}
	return out
}

// Keys return the IDs contained in the set, as a slice.
func (s Set) Keys() []int64 {
	out := make([]int64, 0, len(s))
	for k := range s {
		out = append(out, k)
	}
	return out
}

func (s Set) Has(key int64) bool {
	_, has := s[key]
	return has
}

func (s Set) Add(key int64) {
	s[key] = true
}

type IDs []int64

func (ids IDs) AsSQL() pq.Int64Array {
	return pq.Int64Array(ids)
}

func (ids IDs) AsSet() Set {
	return NewSetFromSlice(ids)
}

// ScanIDs scans the result of a query returning a
// list of IDs.
func ScanIDs(rs *sql.Rows) (IDs, error) {
	defer rs.Close()
	ints := make(IDs, 0, 16)
	var err error
	for rs.Next() {
		var s int64
		if err = rs.Scan(&s); err != nil {
			return nil, err
		}
		ints = append(ints, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return ints, nil
}

type scanner interface {
	Scan(...interface{}) error
}

// DB groups transaction like objects
type DB interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
	Prepare(query string) (*sql.Stmt, error)
}

func scanOneTrivialConfig(row scanner) (TrivialConfig, error) {
	var s TrivialConfig
	err := row.Scan(
		&s.Id,
		&s.Questions,
		&s.QuestionTimeout,
		&s.ShowDecrassage,
		&s.Public,
		&s.IdTeacher,
		&s.Name,
	)
	return s, err
}

func ScanTrivialConfig(row *sql.Row) (TrivialConfig, error) {
	return scanOneTrivialConfig(row)
}

func SelectAllTrivialConfigs(tx DB) (TrivialConfigs, error) {
	rows, err := tx.Query("SELECT * FROM trivial_configs")
	if err != nil {
		return nil, err
	}
	return ScanTrivialConfigs(rows)
}

// SelectTrivialConfig returns the entry matching id.
func SelectTrivialConfig(tx DB, id int64) (TrivialConfig, error) {
	row := tx.QueryRow("SELECT * FROM trivial_configs WHERE id = $1", id)
	return ScanTrivialConfig(row)
}

// SelectTrivialConfigs returns the entry matching the given ids.
func SelectTrivialConfigs(tx DB, ids ...int64) (TrivialConfigs, error) {
	rows, err := tx.Query("SELECT * FROM trivial_configs WHERE id = ANY($1)", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanTrivialConfigs(rows)
}

type TrivialConfigs map[int64]TrivialConfig

func (m TrivialConfigs) IDs() IDs {
	out := make(IDs, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanTrivialConfigs(rs *sql.Rows) (TrivialConfigs, error) {
	var (
		s   TrivialConfig
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(TrivialConfigs, 16)
	for rs.Next() {
		s, err = scanOneTrivialConfig(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert TrivialConfig in the database and returns the item with id filled.
func (item TrivialConfig) Insert(tx DB) (out TrivialConfig, err error) {
	row := tx.QueryRow(`INSERT INTO trivial_configs (
		Questions,QuestionTimeout,ShowDecrassage,Public,id_teacher,Name
		) VALUES (
		$1,$2,$3,$4,$5,$6
		) RETURNING 
		Id,Questions,QuestionTimeout,ShowDecrassage,Public,id_teacher,Name;
		`, item.Questions, item.QuestionTimeout, item.ShowDecrassage, item.Public, item.IdTeacher, item.Name)
	return ScanTrivialConfig(row)
}

// Update TrivialConfig in the database and returns the new version.
func (item TrivialConfig) Update(tx DB) (out TrivialConfig, err error) {
	row := tx.QueryRow(`UPDATE trivial_configs SET (
		Questions,QuestionTimeout,ShowDecrassage,Public,id_teacher,Name
		) = (
		$2,$3,$4,$5,$6,$7
		) WHERE id = $1 RETURNING 
		Id,Questions,QuestionTimeout,ShowDecrassage,Public,id_teacher,Name;
		`, item.Id, item.Questions, item.QuestionTimeout, item.ShowDecrassage, item.Public, item.IdTeacher, item.Name)
	return ScanTrivialConfig(row)
}

// Deletes the TrivialConfig and returns the item
func DeleteTrivialConfigById(tx DB, id int64) (TrivialConfig, error) {
	row := tx.QueryRow("DELETE FROM trivial_configs WHERE id = $1 RETURNING *;", id)
	return ScanTrivialConfig(row)
}

// Deletes the TrivialConfig in the database and returns the ids.
func DeleteTrivialConfigsByIDs(tx DB, ids ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM trivial_configs WHERE id = ANY($1) RETURNING id", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func (s *CategoriesQuestions) Scan(src interface{}) error  { return loadJSON(s, src) }
func (s CategoriesQuestions) Value() (driver.Value, error) { return dumpJSON(s) }

func SelectTrivialConfigsByIdTeachers(tx DB, idTeachers ...int64) (TrivialConfigs, error) {
	rows, err := tx.Query("SELECT * FROM trivial_configs WHERE id_teacher = ANY($1)", pq.Int64Array(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanTrivialConfigs(rows)
}

func DeleteTrivialConfigsByIdTeachers(tx DB, idTeachers ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM trivial_configs WHERE id_teacher = ANY($1) RETURNING id", pq.Int64Array(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}
