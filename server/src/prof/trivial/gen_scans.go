package trivial

// Code generated by gomacro/generator/go/sqlcrud. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"

	"github.com/benoitkugler/maths-online/prof/teacher"
	"github.com/lib/pq"
)

	type scanner interface {
		Scan(...interface{}) error
	}
	
	// DB groups transaction like objects, and 
	// is implemented by *sql.DB and *sql.Tx
	type DB interface {
		Exec(query string, args ...interface{}) (sql.Result, error)
		Query(query string, args ...interface{}) (*sql.Rows, error)
		QueryRow(query string, args ...interface{}) *sql.Row 
		Prepare(query string) (*sql.Stmt, error)
	}
	

func scanOneTrivial(row scanner) (Trivial, error) {
	var item Trivial
	err := row.Scan(
		&item.Id,
&item.Questions,
&item.QuestionTimeout,
&item.ShowDecrassage,
&item.Public,
&item.IdTeacher,
&item.Name,
	)
	return item, err
}

func ScanTrivial(row *sql.Row) (Trivial, error) { return scanOneTrivial(row) }

// SelectAll returns all the items in the trivials table.
func SelectAllTrivials(db DB) (Trivials, error) {
	rows, err := db.Query("SELECT * FROM trivials")
	if err != nil {
		return nil, err
	}
	return ScanTrivials(rows)
}

// SelectTrivial returns the entry matching 'id'.
func SelectTrivial(tx DB, id IdTrivial) (Trivial, error) {
	row := tx.QueryRow("SELECT * FROM trivials WHERE id = $1", id)
	return ScanTrivial(row)
}

// SelectTrivials returns the entry matching the given 'ids'.
func SelectTrivials(tx DB, ids ...IdTrivial) (Trivials, error) {
	rows, err := tx.Query("SELECT * FROM trivials WHERE id = ANY($1)", IdTrivialArrayToPQ(ids))
	if err != nil {
		return nil, err
	}
	return ScanTrivials(rows)
}

type Trivials map[IdTrivial]Trivial

func (m Trivials) IDs() []IdTrivial {
	out := make([]IdTrivial, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanTrivials(rs *sql.Rows) (Trivials, error) {
	var (
		s Trivial
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Trivials,  16)
	for rs.Next() {
		s, err = scanOneTrivial(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert one Trivial in the database and returns the item with id filled.
func (item Trivial) Insert(tx DB) (out Trivial, err error) {
	row := tx.QueryRow(`INSERT INTO trivials (
		questions, questiontimeout, showdecrassage, public, idteacher, name
		) VALUES (
		$1, $2, $3, $4, $5, $6
		) RETURNING *;
		`,item.Questions, item.QuestionTimeout, item.ShowDecrassage, item.Public, item.IdTeacher, item.Name)
	return ScanTrivial(row)
}

// Update Trivial in the database and returns the new version.
func (item Trivial) Update(tx DB) (out Trivial, err error) {
	row := tx.QueryRow(`UPDATE trivials SET (
		questions, questiontimeout, showdecrassage, public, idteacher, name
		) = (
		$1, $2, $3, $4, $5, $6
		) WHERE id = $7 RETURNING *;
		`,item.Questions, item.QuestionTimeout, item.ShowDecrassage, item.Public, item.IdTeacher, item.Name, item.Id)
	return ScanTrivial(row)
}

// Deletes the Trivial and returns the item
func DeleteTrivialById(tx DB, id IdTrivial) (Trivial, error) {
	row := tx.QueryRow("DELETE FROM trivials WHERE id = $1 RETURNING *;", id)
	return ScanTrivial(row)
}

// Deletes the Trivial in the database and returns the ids.
func DeleteTrivialsByIDs(tx DB, ids ...IdTrivial) ([]IdTrivial, error) {
	rows, err := tx.Query("DELETE FROM trivials WHERE id = ANY($1) RETURNING id", IdTrivialArrayToPQ(ids))
	if err != nil {
		return nil, err
	}
	return ScanIdTrivialArray(rows)
}	

		func SelectTrivialsByIdTeachers(tx DB, idTeachers ...teacher.IdTeacher) (Trivials, error) {
			rows, err := tx.Query("SELECT * FROM trivials WHERE idteacher = ANY($1)", teacher.IdTeacherArrayToPQ(idTeachers))
			if err != nil {
				return nil, err
			}
			return ScanTrivials(rows)
		}	

		func DeleteTrivialsByIdTeachers(tx DB, idTeachers ...teacher.IdTeacher) ([]IdTrivial, error) {
			rows, err := tx.Query("DELETE FROM trivials WHERE idteacher = ANY($1) RETURNING id", teacher.IdTeacherArrayToPQ(idTeachers))
			if err != nil {
				return nil, err
			}
			return ScanIdTrivialArray(rows)
		}	
		

	func loadJSON(out interface{}, src interface{}) error {
		if src == nil {
			return nil //zero value out
		}
		bs, ok := src.([]byte)
		if !ok {
			return errors.New("not a []byte")
		}
		return json.Unmarshal(bs, out)
	}
	
	func dumpJSON(s interface{}) (driver.Value, error) {
		b, err := json.Marshal(s)
		if err != nil {
			return nil, err
		}
		return driver.Value(string(b)), nil
	}
	

		func IdTrivialArrayToPQ(ids []IdTrivial) pq.Int64Array {
			out := make(pq.Int64Array, len(ids))
			for i, v := range ids {
				out[i] = int64(v)
			}
			return out
		}
		
	// ScanIdTrivialArray scans the result of a query returning a
	// list of ID's.
	func ScanIdTrivialArray(rs *sql.Rows) ([]IdTrivial, error) {
		defer rs.Close()
		ints := make([]IdTrivial, 0, 16)
		var err error
		for rs.Next() {
			var s IdTrivial
			if err = rs.Scan(&s); err != nil {
				return nil, err
			}
			ints = append(ints, s)
		}
		if err = rs.Err(); err != nil {
			return nil, err
		}
		return ints, nil
	}
	
	type IdTrivialSet map[IdTrivial]bool 

	func NewIdTrivialSetFrom(ids []IdTrivial) IdTrivialSet { 
		out := make(IdTrivialSet, len(ids))
		for _, key := range ids {
			out[key] = true
		}
		return out
	}

	func (s IdTrivialSet) Add(id IdTrivial) { s[id] = true }

	func (s IdTrivialSet) Has(id IdTrivial) bool { return s[id] }

	func (s IdTrivialSet) Keys() []IdTrivial {
		out := make([]IdTrivial, 0, len(s))
		for k := range s {
			out = append(out, k)
		}
		return out
	}
	

						func (s *CategoriesQuestions) Scan(src interface{}) error { return loadJSON(s, src) }
						func (s CategoriesQuestions) Value() (driver.Value, error) { return dumpJSON(s) }
						
