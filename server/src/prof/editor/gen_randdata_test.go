package editor

import (
	"database/sql"
	"math/rand"

	"github.com/benoitkugler/maths-online/maths/expression"
	"github.com/benoitkugler/maths-online/maths/functiongrapher"
	"github.com/benoitkugler/maths-online/maths/questions"
	"github.com/benoitkugler/maths-online/maths/repere"
	"github.com/benoitkugler/maths-online/prof/teacher"
)

// Code generated by gomacro/generator/go/randdata. DO NOT EDIT.

		

	func randDifficultyTag() DifficultyTag {
		choix := [...]DifficultyTag{Diff1, Diff2, Diff3}
		i := rand.Intn(len(choix))
		return choix[i]
	}

	func randExercice() Exercice {
		return Exercice{
				Id: randIdExercice(),
	Title: randstring(),
	Description: randstring(),
	Parameters: randque_Parameters(),
	Flow: randFlow(),
	IdTeacher: randtea_IdTeacher(),
	Public: randbool(),

		}
	}

	func randExerciceQuestion() ExerciceQuestion {
		return ExerciceQuestion{
				IdExercice: randIdExercice(),
	IdQuestion: randIdQuestion(),
	Bareme: randint(),
	Index: randint(),

		}
	}

	func randFlow() Flow {
		choix := [...]Flow{Parallel, Sequencial}
		i := rand.Intn(len(choix))
		return choix[i]
	}

	func randIdExercice() IdExercice {
		return IdExercice(randint64())
	}

	func randIdProgression() IdProgression {
		return IdProgression(randint64())
	}

	func randIdQuestion() IdQuestion {
		return IdQuestion(randint64())
	}

	func randProgression() Progression {
		return Progression{
				Id: randIdProgression(),
	IdExercice: randIdExercice(),

		}
	}

	func randProgressionQuestion() ProgressionQuestion {
		return ProgressionQuestion{
				IdProgression: randIdProgression(),
	IdExercice: randIdExercice(),
	Index: randint(),
	History: randQuestionHistory(),

		}
	}

	func randQuestion() Question {
		return Question{
				Id: randIdQuestion(),
	Page: randque_QuestionPage(),
	Public: randbool(),
	IdTeacher: randtea_IdTeacher(),
	Description: randstring(),
	NeedExercice: randsql_NullInt64(),

		}
	}

	func randQuestionHistory() QuestionHistory {
		return QuestionHistory(randSlicebool())
	}

	func randQuestionTag() QuestionTag {
		return QuestionTag{
				Tag: randstring(),
	IdQuestion: randIdQuestion(),

		}
	}

		func randSliceSliceque_TextPart() [][]questions.TextPart {
			l := 40 + rand.Intn(10)
			out := make([][]questions.TextPart, l)
			for i := range out {
				out[i] = randSliceque_TextPart()
			}
			return out
		}

		func randSliceSlicestring() [][]string {
			l := 40 + rand.Intn(10)
			out := make([][]string, l)
			for i := range out {
				out[i] = randSlicestring()
			}
			return out
		}

		func randSlicebool() []bool {
			l := 40 + rand.Intn(10)
			out := make([]bool, l)
			for i := range out {
				out[i] = randbool()
			}
			return out
		}

		func randSliceque_Block() []questions.Block {
			l := 40 + rand.Intn(10)
			out := make([]questions.Block, l)
			for i := range out {
				out[i] = randque_Block()
			}
			return out
		}

		func randSliceque_FunctionArea() []questions.FunctionArea {
			l := 40 + rand.Intn(10)
			out := make([]questions.FunctionArea, l)
			for i := range out {
				out[i] = randque_FunctionArea()
			}
			return out
		}

		func randSliceque_FunctionDefinition() []questions.FunctionDefinition {
			l := 40 + rand.Intn(10)
			out := make([]questions.FunctionDefinition, l)
			for i := range out {
				out[i] = randque_FunctionDefinition()
			}
			return out
		}

		func randSliceque_Interpolated() []questions.Interpolated {
			l := 40 + rand.Intn(10)
			out := make([]questions.Interpolated, l)
			for i := range out {
				out[i] = randque_Interpolated()
			}
			return out
		}

		func randSliceque_RandomParameter() []questions.RandomParameter {
			l := 40 + rand.Intn(10)
			out := make([]questions.RandomParameter, l)
			for i := range out {
				out[i] = randque_RandomParameter()
			}
			return out
		}

		func randSliceque_SignSymbol() []questions.SignSymbol {
			l := 40 + rand.Intn(10)
			out := make([]questions.SignSymbol, l)
			for i := range out {
				out[i] = randque_SignSymbol()
			}
			return out
		}

		func randSliceque_TextPart() []questions.TextPart {
			l := 40 + rand.Intn(10)
			out := make([]questions.TextPart, l)
			for i := range out {
				out[i] = randque_TextPart()
			}
			return out
		}

		func randSliceque_VariationTableBlock() []questions.VariationTableBlock {
			l := 40 + rand.Intn(10)
			out := make([]questions.VariationTableBlock, l)
			for i := range out {
				out[i] = randque_VariationTableBlock()
			}
			return out
		}

		func randSlicerep_NamedRandomLabeledPoint() []repere.NamedRandomLabeledPoint {
			l := 40 + rand.Intn(10)
			out := make([]repere.NamedRandomLabeledPoint, l)
			for i := range out {
				out[i] = randrep_NamedRandomLabeledPoint()
			}
			return out
		}

		func randSlicerep_RandomArea() []repere.RandomArea {
			l := 40 + rand.Intn(10)
			out := make([]repere.RandomArea, l)
			for i := range out {
				out[i] = randrep_RandomArea()
			}
			return out
		}

		func randSlicerep_RandomLine() []repere.RandomLine {
			l := 40 + rand.Intn(10)
			out := make([]repere.RandomLine, l)
			for i := range out {
				out[i] = randrep_RandomLine()
			}
			return out
		}

		func randSlicerep_RandomSegment() []repere.RandomSegment {
			l := 40 + rand.Intn(10)
			out := make([]repere.RandomSegment, l)
			for i := range out {
				out[i] = randrep_RandomSegment()
			}
			return out
		}

		func randSlicestring() []string {
			l := 40 + rand.Intn(10)
			out := make([]string, l)
			for i := range out {
				out[i] = randstring()
			}
			return out
		}

	func randbool() bool {
		i := rand.Int31n(2)
		return i == 1
	}

	func randexp_ComparisonLevel() expression.ComparisonLevel {
		choix := [...]expression.ComparisonLevel{expression.Strict, expression.SimpleSubstitutions, expression.ExpandedSubstitutions}
		i := rand.Intn(len(choix))
		return choix[i]
	}

	func randexp_Variable() expression.Variable {
		return expression.Variable{
				Indice: randstring(),
	Name: randrune(),

		}
	}

	func randfloat64() float64 {
		return rand.Float64() * float64(rand.Int31())
	}

	func randfun_FunctionDecoration() functiongrapher.FunctionDecoration {
		return functiongrapher.FunctionDecoration{
				Label: randstring(),
	Color: randstring(),

		}
	}

	func randint() int {
		return int(rand.Intn(1000000))
	}

	func randint64() int64 {
		return int64(rand.Intn(1000000))
	}

		func randque_Block() questions.Block {
			choix := [...]questions.Block{
				randque_ExpressionFieldBlock(),
randque_FigureAffineLineFieldBlock(),
randque_FigureBlock(),
randque_FigurePointFieldBlock(),
randque_FigureVectorFieldBlock(),
randque_FigureVectorPairFieldBlock(),
randque_FormulaBlock(),
randque_FunctionPointsFieldBlock(),
randque_FunctionsGraphBlock(),
randque_NumberFieldBlock(),
randque_OrderedListFieldBlock(),
randque_ProofFieldBlock(),
randque_RadioFieldBlock(),
randque_SignTableBlock(),
randque_TableBlock(),
randque_TableFieldBlock(),
randque_TextBlock(),
randque_TreeFieldBlock(),
randque_VariationTableBlock(),
randque_VariationTableFieldBlock(),
randque_VectorFieldBlock(),

			}
			i := rand.Intn(21)
			return choix[i]
		}

	func randque_CoordExpression() questions.CoordExpression {
		return questions.CoordExpression{
				X: randstring(),
	Y: randstring(),

		}
	}

	func randque_Enonce() questions.Enonce {
		return questions.Enonce(randSliceque_Block())
	}

	func randque_ExpressionFieldBlock() questions.ExpressionFieldBlock {
		return questions.ExpressionFieldBlock{
				Expression: randstring(),
	Label: randque_TextPart(),
	ComparisonLevel: randexp_ComparisonLevel(),

		}
	}

	func randque_FigureAffineLineFieldBlock() questions.FigureAffineLineFieldBlock {
		return questions.FigureAffineLineFieldBlock{
				Label: randstring(),
	A: randstring(),
	B: randstring(),
	Figure: randque_FigureBlock(),

		}
	}

	func randque_FigureBlock() questions.FigureBlock {
		return questions.FigureBlock{
				Drawings: randrep_RandomDrawings(),
	Bounds: randrep_RepereBounds(),
	ShowGrid: randbool(),
	ShowOrigin: randbool(),

		}
	}

	func randque_FigurePointFieldBlock() questions.FigurePointFieldBlock {
		return questions.FigurePointFieldBlock{
				Answer: randque_CoordExpression(),
	Figure: randque_FigureBlock(),

		}
	}

	func randque_FigureVectorFieldBlock() questions.FigureVectorFieldBlock {
		return questions.FigureVectorFieldBlock{
				Answer: randque_CoordExpression(),
	AnswerOrigin: randque_CoordExpression(),
	Figure: randque_FigureBlock(),
	MustHaveOrigin: randbool(),

		}
	}

	func randque_FigureVectorPairFieldBlock() questions.FigureVectorPairFieldBlock {
		return questions.FigureVectorPairFieldBlock{
				Figure: randque_FigureBlock(),
	Criterion: randque_VectorPairCriterion(),

		}
	}

	func randque_FormulaBlock() questions.FormulaBlock {
		return questions.FormulaBlock{
				Parts: randque_Interpolated(),

		}
	}

	func randque_FunctionArea() questions.FunctionArea {
		return questions.FunctionArea{
				Bottom: randque_Interpolated(),
	Top: randque_Interpolated(),
	Left: randstring(),
	Right: randstring(),
	Color: randstring(),

		}
	}

	func randque_FunctionDefinition() questions.FunctionDefinition {
		return questions.FunctionDefinition{
				Function: randstring(),
	Decoration: randfun_FunctionDecoration(),
	Variable: randexp_Variable(),
	From: randstring(),
	To: randstring(),

		}
	}

	func randque_FunctionPointsFieldBlock() questions.FunctionPointsFieldBlock {
		return questions.FunctionPointsFieldBlock{
				Function: randstring(),
	Label: randstring(),
	Variable: randexp_Variable(),
	XGrid: randSlicestring(),

		}
	}

	func randque_FunctionsGraphBlock() questions.FunctionsGraphBlock {
		return questions.FunctionsGraphBlock{
				FunctionExprs: randSliceque_FunctionDefinition(),
	FunctionVariations: randSliceque_VariationTableBlock(),
	Areas: randSliceque_FunctionArea(),

		}
	}

	func randque_Interpolated() questions.Interpolated {
		return questions.Interpolated(randstring())
	}

	func randque_NumberFieldBlock() questions.NumberFieldBlock {
		return questions.NumberFieldBlock{
				Expression: randstring(),

		}
	}

	func randque_OrderedListFieldBlock() questions.OrderedListFieldBlock {
		return questions.OrderedListFieldBlock{
				Label: randque_Interpolated(),
	Answer: randSliceque_Interpolated(),
	AdditionalProposals: randSliceque_Interpolated(),

		}
	}

	func randque_Parameters() questions.Parameters {
		return questions.Parameters{
				Variables: randque_RandomParameters(),
	Intrinsics: randSlicestring(),

		}
	}

	func randque_ProofFieldBlock() questions.ProofFieldBlock {
		return questions.ProofFieldBlock{
				Answer: randque_ProofSequence(),

		}
	}

	func randque_ProofSequence() questions.ProofSequence {
		return questions.ProofSequence{
			
		}
	}

	func randque_QuestionPage() questions.QuestionPage {
		return questions.QuestionPage{
				Title: randstring(),
	Enonce: randque_Enonce(),
	Parameters: randque_Parameters(),

		}
	}

	func randque_RadioFieldBlock() questions.RadioFieldBlock {
		return questions.RadioFieldBlock{
				Answer: randstring(),
	Proposals: randSliceque_Interpolated(),
	AsDropDown: randbool(),

		}
	}

	func randque_RandomParameter() questions.RandomParameter {
		return questions.RandomParameter{
				Expression: randstring(),
	Variable: randexp_Variable(),

		}
	}

	func randque_RandomParameters() questions.RandomParameters {
		return questions.RandomParameters(randSliceque_RandomParameter())
	}

	func randque_SignSymbol() questions.SignSymbol {
		choix := [...]questions.SignSymbol{questions.Nothing, questions.Zero, questions.ForbiddenValue}
		i := rand.Intn(len(choix))
		return choix[i]
	}

	func randque_SignTableBlock() questions.SignTableBlock {
		return questions.SignTableBlock{
				Label: randstring(),
	FxSymbols: randSliceque_SignSymbol(),
	Xs: randSliceque_Interpolated(),
	Signs: randSlicebool(),

		}
	}

	func randque_TableBlock() questions.TableBlock {
		return questions.TableBlock{
				HorizontalHeaders: randSliceque_TextPart(),
	VerticalHeaders: randSliceque_TextPart(),
	Values: randSliceSliceque_TextPart(),

		}
	}

	func randque_TableFieldBlock() questions.TableFieldBlock {
		return questions.TableFieldBlock{
				HorizontalHeaders: randSliceque_TextPart(),
	VerticalHeaders: randSliceque_TextPart(),
	Answer: randSliceSlicestring(),

		}
	}

	func randque_TextBlock() questions.TextBlock {
		return questions.TextBlock{
				Parts: randque_Interpolated(),
	Bold: randbool(),
	Italic: randbool(),
	Smaller: randbool(),

		}
	}

	func randque_TextKind() questions.TextKind {
		choix := [...]questions.TextKind{questions.Text, questions.StaticMath, questions.Expression}
		i := rand.Intn(len(choix))
		return choix[i]
	}

	func randque_TextPart() questions.TextPart {
		return questions.TextPart{
				Content: randstring(),
	Kind: randque_TextKind(),

		}
	}

	func randque_TreeFieldBlock() questions.TreeFieldBlock {
		return questions.TreeFieldBlock{
				EventsProposals: randSlicestring(),
	AnswerRoot: randque_TreeNodeAnswer(),

		}
	}

	func randque_TreeNodeAnswer() questions.TreeNodeAnswer {
		return questions.TreeNodeAnswer{
				Probabilities: randSlicestring(),
	Value: randint(),

		}
	}

	func randque_VariationTableBlock() questions.VariationTableBlock {
		return questions.VariationTableBlock{
				Label: randque_Interpolated(),
	Xs: randSlicestring(),
	Fxs: randSlicestring(),

		}
	}

	func randque_VariationTableFieldBlock() questions.VariationTableFieldBlock {
		return questions.VariationTableFieldBlock{
				Answer: randque_VariationTableBlock(),

		}
	}

	func randque_VectorFieldBlock() questions.VectorFieldBlock {
		return questions.VectorFieldBlock{
				Answer: randque_CoordExpression(),
	AcceptColinear: randbool(),
	DisplayColumn: randbool(),

		}
	}

	func randque_VectorPairCriterion() questions.VectorPairCriterion {
		choix := [...]questions.VectorPairCriterion{questions.VectorEquals, questions.VectorColinear, questions.VectorOrthogonal}
		i := rand.Intn(len(choix))
		return choix[i]
	}

	func randrep_Coord() repere.Coord {
		return repere.Coord{
				X: randfloat64(),
	Y: randfloat64(),

		}
	}

	func randrep_LabelPos() repere.LabelPos {
		choix := [...]repere.LabelPos{repere.Top, repere.Bottom, repere.Left, repere.Right, repere.TopLeft, repere.TopRight, repere.BottomRight, repere.BottomLeft, repere.Hide}
		i := rand.Intn(len(choix))
		return choix[i]
	}

	func randrep_NamedRandomLabeledPoint() repere.NamedRandomLabeledPoint {
		return repere.NamedRandomLabeledPoint{
				Name: randstring(),
	Point: randrep_RandomLabeledPoint(),

		}
	}

	func randrep_RandomArea() repere.RandomArea {
		return repere.RandomArea{
				Color: randstring(),
	Points: randSlicestring(),

		}
	}

	func randrep_RandomCoord() repere.RandomCoord {
		return repere.RandomCoord{
				X: randstring(),
	Y: randstring(),

		}
	}

	func randrep_RandomDrawings() repere.RandomDrawings {
		return repere.RandomDrawings{
				Points: randSlicerep_NamedRandomLabeledPoint(),
	Segments: randSlicerep_RandomSegment(),
	Lines: randSlicerep_RandomLine(),
	Areas: randSlicerep_RandomArea(),

		}
	}

	func randrep_RandomLabeledPoint() repere.RandomLabeledPoint {
		return repere.RandomLabeledPoint{
				Color: randstring(),
	Coord: randrep_RandomCoord(),
	Pos: randrep_LabelPos(),

		}
	}

	func randrep_RandomLine() repere.RandomLine {
		return repere.RandomLine{
				Label: randstring(),
	A: randstring(),
	B: randstring(),
	Color: randstring(),

		}
	}

	func randrep_RandomSegment() repere.RandomSegment {
		return repere.RandomSegment{
				LabelName: randstring(),
	From: randstring(),
	To: randstring(),
	Color: randstring(),
	LabelPos: randrep_LabelPos(),
	Kind: randrep_SegmentKind(),

		}
	}

	func randrep_RepereBounds() repere.RepereBounds {
		return repere.RepereBounds{
				Width: randint(),
	Height: randint(),
	Origin: randrep_Coord(),

		}
	}

	func randrep_SegmentKind() repere.SegmentKind {
		choix := [...]repere.SegmentKind{repere.SKSegment, repere.SKVector, repere.SKLine}
		i := rand.Intn(len(choix))
		return choix[i]
	}

	func randrune() rune {
		return rune(rand.Intn(1000000))
	}

	func randsql_NullInt64() sql.NullInt64 {
		return sql.NullInt64{
				Int64: randint64(),
	Valid: randbool(),

		}
	}

	var letterRunes2  = []rune("azertyuiopqsdfghjklmwxcvbn123456789é@!?&èïab ")

	func randstring() string {
		b := make([]rune, 50)
		maxLength := len(letterRunes2)		
		for i := range b {
			b[i] = letterRunes2[rand.Intn(maxLength)]
		}
		return string(b)
	}

	func randtea_IdTeacher() teacher.IdTeacher {
		return teacher.IdTeacher(randint64())
	}
