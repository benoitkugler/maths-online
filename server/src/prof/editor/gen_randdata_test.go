package editor

import (
	"math/rand"

	"github.com/benoitkugler/maths-online/maths/expression"
	"github.com/benoitkugler/maths-online/maths/functiongrapher"
	"github.com/benoitkugler/maths-online/maths/questions"
	"github.com/benoitkugler/maths-online/maths/repere"
)

// Code generated by structgen. DO NOT EDIT.

func randDifficultyTag() DifficultyTag {
	choix := [...]DifficultyTag{Diff1, Diff2, Diff3}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randint64() int64 {
	return int64(rand.Intn(1000000))
}

var letterRunes2 = []rune("azertyuiopqsdfghjklmwxcvbn123456789é@!?&èïab ")

func randstring() string {
	b := make([]rune, 50)
	maxLength := len(letterRunes2)
	for i := range b {
		b[i] = letterRunes2[rand.Intn(maxLength)]
	}
	return string(b)
}

func randrune() rune {
	return rune(rand.Intn(1000000))
}

func randexp_Variable() expression.Variable {
	return expression.Variable{
		Indice: randstring(),
		Name:   randrune(),
	}
}

func randque_RandomParameter() questions.RandomParameter {
	return questions.RandomParameter{
		Expression: randstring(),
		Variable:   randexp_Variable(),
	}
}

func randSliceque_RandomParameter() []questions.RandomParameter {
	l := 40 + rand.Intn(10)
	out := make([]questions.RandomParameter, l)
	for i := range out {
		out[i] = randque_RandomParameter()
	}
	return out
}

func randRandomParameters() questions.RandomParameters {
	return questions.RandomParameters(randSliceque_RandomParameter())
}

func randSlicestring() []string {
	l := 40 + rand.Intn(10)
	out := make([]string, l)
	for i := range out {
		out[i] = randstring()
	}
	return out
}

func randque_Parameters() questions.Parameters {
	return questions.Parameters{
		Variables:  randRandomParameters(),
		Intrinsics: randSlicestring(),
	}
}

func randFlow() Flow {
	choix := [...]Flow{Parallel, Sequencial}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randbool() bool {
	i := rand.Int31n(2)
	return i == 1
}

func randExercice() Exercice {
	return Exercice{
		Id:          randint64(),
		Title:       randstring(),
		Description: randstring(),
		Parameters:  randque_Parameters(),
		Flow:        randFlow(),
		IdTeacher:   randint64(),
		Public:      randbool(),
	}
}

func randint() int {
	return int(rand.Intn(1000000))
}

func randExerciceQuestion() ExerciceQuestion {
	return ExerciceQuestion{
		IdExercice: randint64(),
		IdQuestion: randint64(),
		Bareme:     randint(),
		Index:      randint(),
	}
}

func randLevelTag() LevelTag {
	choix := [...]LevelTag{Premiere, Seconde, Terminale}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randProgression() Progression {
	return Progression{
		Id:         randint64(),
		IdExercice: randint64(),
	}
}

func randSlicebool() []bool {
	l := 40 + rand.Intn(10)
	out := make([]bool, l)
	for i := range out {
		out[i] = randbool()
	}
	return out
}

func randQuestionHistory() QuestionHistory {
	return QuestionHistory(randSlicebool())
}

func randProgressionQuestion() ProgressionQuestion {
	return ProgressionQuestion{
		IdProgression: randint64(),
		IdExercice:    randint64(),
		Index:         randint(),
		History:       randQuestionHistory(),
	}
}

func randBlock() questions.Block {
	choix := [...]questions.Block{
		randque_ExpressionFieldBlock(),
		randque_FigureAffineLineFieldBlock(),
		randque_FigureBlock(),
		randque_FigurePointFieldBlock(),
		randque_FigureVectorFieldBlock(),
		randque_FigureVectorPairFieldBlock(),
		randque_FormulaBlock(),
		randque_FunctionGraphBlock(),
		randque_FunctionPointsFieldBlock(),
		randque_FunctionVariationGraphBlock(),
		randque_NumberFieldBlock(),
		randque_OrderedListFieldBlock(),
		randque_RadioFieldBlock(),
		randque_SignTableBlock(),
		randque_TableBlock(),
		randque_TableFieldBlock(),
		randque_TextBlock(),
		randque_TreeFieldBlock(),
		randque_VariationTableBlock(),
		randque_VariationTableFieldBlock(),
		randque_VectorFieldBlock(),
	}
	i := rand.Intn(21)
	return choix[i]
}

func randTextKind() questions.TextKind {
	choix := [...]questions.TextKind{questions.Expression, questions.StaticMath, questions.Text}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randque_TextPart() questions.TextPart {
	return questions.TextPart{
		Content: randstring(),
		Kind:    randTextKind(),
	}
}

func randComparisonLevel() expression.ComparisonLevel {
	choix := [...]expression.ComparisonLevel{expression.ExpandedSubstitutions, expression.SimpleSubstitutions, expression.Strict}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randque_ExpressionFieldBlock() questions.ExpressionFieldBlock {
	return questions.ExpressionFieldBlock{
		Expression:      randstring(),
		Label:           randque_TextPart(),
		ComparisonLevel: randComparisonLevel(),
	}
}

func randrep_RandomCoord() repere.RandomCoord {
	return repere.RandomCoord{
		X: randstring(),
		Y: randstring(),
	}
}

func randLabelPos() repere.LabelPos {
	choix := [...]repere.LabelPos{repere.Bottom, repere.BottomLeft, repere.BottomRight, repere.Hide, repere.Left, repere.Right, repere.Top, repere.TopLeft, repere.TopRight}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randrep_RandomLabeledPoint() repere.RandomLabeledPoint {
	return repere.RandomLabeledPoint{
		Color: randstring(),
		Coord: randrep_RandomCoord(),
		Pos:   randLabelPos(),
	}
}

func randrep_NamedRandomLabeledPoint() repere.NamedRandomLabeledPoint {
	return repere.NamedRandomLabeledPoint{
		Name:  randstring(),
		Point: randrep_RandomLabeledPoint(),
	}
}

func randSlicerep_NamedRandomLabeledPoint() []repere.NamedRandomLabeledPoint {
	l := 40 + rand.Intn(10)
	out := make([]repere.NamedRandomLabeledPoint, l)
	for i := range out {
		out[i] = randrep_NamedRandomLabeledPoint()
	}
	return out
}

func randSegmentKind() repere.SegmentKind {
	choix := [...]repere.SegmentKind{repere.SKLine, repere.SKSegment, repere.SKVector}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randrep_Segment() repere.Segment {
	return repere.Segment{
		LabelName: randstring(),
		From:      randstring(),
		To:        randstring(),
		Color:     randstring(),
		LabelPos:  randLabelPos(),
		Kind:      randSegmentKind(),
	}
}

func randSlicerep_Segment() []repere.Segment {
	l := 40 + rand.Intn(10)
	out := make([]repere.Segment, l)
	for i := range out {
		out[i] = randrep_Segment()
	}
	return out
}

func randrep_RandomLine() repere.RandomLine {
	return repere.RandomLine{
		Label: randstring(),
		A:     randstring(),
		B:     randstring(),
		Color: randstring(),
	}
}

func randSlicerep_RandomLine() []repere.RandomLine {
	l := 40 + rand.Intn(10)
	out := make([]repere.RandomLine, l)
	for i := range out {
		out[i] = randrep_RandomLine()
	}
	return out
}

func randrep_RandomDrawings() repere.RandomDrawings {
	return repere.RandomDrawings{
		Points:   randSlicerep_NamedRandomLabeledPoint(),
		Segments: randSlicerep_Segment(),
		Lines:    randSlicerep_RandomLine(),
	}
}

func randfloat64() float64 {
	return rand.Float64() * float64(rand.Int31())
}

func randrep_Coord() repere.Coord {
	return repere.Coord{
		X: randfloat64(),
		Y: randfloat64(),
	}
}

func randrep_RepereBounds() repere.RepereBounds {
	return repere.RepereBounds{
		Width:  randint(),
		Height: randint(),
		Origin: randrep_Coord(),
	}
}

func randque_FigureBlock() questions.FigureBlock {
	return questions.FigureBlock{
		Drawings:   randrep_RandomDrawings(),
		Bounds:     randrep_RepereBounds(),
		ShowGrid:   randbool(),
		ShowOrigin: randbool(),
	}
}

func randque_FigureAffineLineFieldBlock() questions.FigureAffineLineFieldBlock {
	return questions.FigureAffineLineFieldBlock{
		Label:  randstring(),
		A:      randstring(),
		B:      randstring(),
		Figure: randque_FigureBlock(),
	}
}

func randque_CoordExpression() questions.CoordExpression {
	return questions.CoordExpression{
		X: randstring(),
		Y: randstring(),
	}
}

func randque_FigurePointFieldBlock() questions.FigurePointFieldBlock {
	return questions.FigurePointFieldBlock{
		Answer: randque_CoordExpression(),
		Figure: randque_FigureBlock(),
	}
}

func randque_FigureVectorFieldBlock() questions.FigureVectorFieldBlock {
	return questions.FigureVectorFieldBlock{
		Answer:         randque_CoordExpression(),
		AnswerOrigin:   randque_CoordExpression(),
		Figure:         randque_FigureBlock(),
		MustHaveOrigin: randbool(),
	}
}

func randVectorPairCriterion() questions.VectorPairCriterion {
	choix := [...]questions.VectorPairCriterion{questions.VectorColinear, questions.VectorEquals, questions.VectorOrthogonal}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randque_FigureVectorPairFieldBlock() questions.FigureVectorPairFieldBlock {
	return questions.FigureVectorPairFieldBlock{
		Figure:    randque_FigureBlock(),
		Criterion: randVectorPairCriterion(),
	}
}

func randInterpolated() questions.Interpolated {
	return questions.Interpolated(randstring())
}

func randque_FormulaBlock() questions.FormulaBlock {
	return questions.FormulaBlock{
		Parts: randInterpolated(),
	}
}

func randfun_FunctionDecoration() functiongrapher.FunctionDecoration {
	return functiongrapher.FunctionDecoration{
		Label: randstring(),
		Color: randstring(),
	}
}

func randque_FunctionDefinition() questions.FunctionDefinition {
	return questions.FunctionDefinition{
		Function:   randstring(),
		Decoration: randfun_FunctionDecoration(),
		Variable:   randexp_Variable(),
		From:       randstring(),
		To:         randstring(),
	}
}

func randSliceque_FunctionDefinition() []questions.FunctionDefinition {
	l := 40 + rand.Intn(10)
	out := make([]questions.FunctionDefinition, l)
	for i := range out {
		out[i] = randque_FunctionDefinition()
	}
	return out
}

func randque_FunctionGraphBlock() questions.FunctionGraphBlock {
	return questions.FunctionGraphBlock{
		Functions: randSliceque_FunctionDefinition(),
	}
}

func randque_FunctionPointsFieldBlock() questions.FunctionPointsFieldBlock {
	return questions.FunctionPointsFieldBlock{
		Function: randstring(),
		Label:    randstring(),
		Variable: randexp_Variable(),
		XGrid:    randSlicestring(),
	}
}

func randque_FunctionVariationGraphBlock() questions.FunctionVariationGraphBlock {
	return questions.FunctionVariationGraphBlock{
		Label: randInterpolated(),
		Xs:    randSlicestring(),
		Fxs:   randSlicestring(),
	}
}

func randque_NumberFieldBlock() questions.NumberFieldBlock {
	return questions.NumberFieldBlock{
		Expression: randstring(),
	}
}

func randSliceInterpolated() []questions.Interpolated {
	l := 40 + rand.Intn(10)
	out := make([]questions.Interpolated, l)
	for i := range out {
		out[i] = randInterpolated()
	}
	return out
}

func randque_OrderedListFieldBlock() questions.OrderedListFieldBlock {
	return questions.OrderedListFieldBlock{
		Label:               randInterpolated(),
		Answer:              randSliceInterpolated(),
		AdditionalProposals: randSliceInterpolated(),
	}
}

func randque_RadioFieldBlock() questions.RadioFieldBlock {
	return questions.RadioFieldBlock{
		Answer:     randstring(),
		Proposals:  randSliceInterpolated(),
		AsDropDown: randbool(),
	}
}

func randSignSymbol() questions.SignSymbol {
	choix := [...]questions.SignSymbol{questions.ForbiddenValue, questions.Nothing, questions.Zero}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randSliceSignSymbol() []questions.SignSymbol {
	l := 40 + rand.Intn(10)
	out := make([]questions.SignSymbol, l)
	for i := range out {
		out[i] = randSignSymbol()
	}
	return out
}

func randque_SignTableBlock() questions.SignTableBlock {
	return questions.SignTableBlock{
		Label:     randstring(),
		FxSymbols: randSliceSignSymbol(),
		Xs:        randSliceInterpolated(),
		Signs:     randSlicebool(),
	}
}

func randSliceque_TextPart() []questions.TextPart {
	l := 40 + rand.Intn(10)
	out := make([]questions.TextPart, l)
	for i := range out {
		out[i] = randque_TextPart()
	}
	return out
}

func randSliceSliceque_TextPart() [][]questions.TextPart {
	l := 40 + rand.Intn(10)
	out := make([][]questions.TextPart, l)
	for i := range out {
		out[i] = randSliceque_TextPart()
	}
	return out
}

func randque_TableBlock() questions.TableBlock {
	return questions.TableBlock{
		HorizontalHeaders: randSliceque_TextPart(),
		VerticalHeaders:   randSliceque_TextPart(),
		Values:            randSliceSliceque_TextPart(),
	}
}

func randSliceSlicestring() [][]string {
	l := 40 + rand.Intn(10)
	out := make([][]string, l)
	for i := range out {
		out[i] = randSlicestring()
	}
	return out
}

func randque_TableFieldBlock() questions.TableFieldBlock {
	return questions.TableFieldBlock{
		HorizontalHeaders: randSliceque_TextPart(),
		VerticalHeaders:   randSliceque_TextPart(),
		Answer:            randSliceSlicestring(),
	}
}

func randque_TextBlock() questions.TextBlock {
	return questions.TextBlock{
		Parts:   randInterpolated(),
		Bold:    randbool(),
		Italic:  randbool(),
		Smaller: randbool(),
	}
}

func randque_TreeNodeAnswer() questions.TreeNodeAnswer {
	return questions.TreeNodeAnswer{
		Probabilities: randSlicestring(),
		Value:         randint(),
	}
}

func randque_TreeFieldBlock() questions.TreeFieldBlock {
	return questions.TreeFieldBlock{
		EventsProposals: randSlicestring(),
		AnswerRoot:      randque_TreeNodeAnswer(),
	}
}

func randque_VariationTableBlock() questions.VariationTableBlock {
	return questions.VariationTableBlock{
		Label: randInterpolated(),
		Xs:    randSlicestring(),
		Fxs:   randSlicestring(),
	}
}

func randque_VariationTableFieldBlock() questions.VariationTableFieldBlock {
	return questions.VariationTableFieldBlock{
		Answer: randque_VariationTableBlock(),
	}
}

func randque_VectorFieldBlock() questions.VectorFieldBlock {
	return questions.VectorFieldBlock{
		Answer:         randque_CoordExpression(),
		AcceptColinear: randbool(),
		DisplayColumn:  randbool(),
	}
}

func randSliceBlock() []questions.Block {
	l := 40 + rand.Intn(10)
	out := make([]questions.Block, l)
	for i := range out {
		out[i] = randBlock()
	}
	return out
}

func randEnonce() questions.Enonce {
	return questions.Enonce(randSliceBlock())
}

func randque_QuestionPage() questions.QuestionPage {
	return questions.QuestionPage{
		Title:      randstring(),
		Enonce:     randEnonce(),
		Parameters: randque_Parameters(),
	}
}

func randQuestion() Question {
	return Question{
		Id:           randint64(),
		Page:         randque_QuestionPage(),
		Public:       randbool(),
		IdTeacher:    randint64(),
		Description:  randstring(),
		NeedExercice: randbool(),
	}
}

func randQuestionTag() QuestionTag {
	return QuestionTag{
		Tag:        randstring(),
		IdQuestion: randint64(),
	}
}
