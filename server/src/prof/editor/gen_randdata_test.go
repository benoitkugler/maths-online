package editor

import (
	"math/rand"

	"github.com/benoitkugler/maths-online/maths/exercice"
	"github.com/benoitkugler/maths-online/maths/expression"
	"github.com/benoitkugler/maths-online/maths/functiongrapher"
	"github.com/benoitkugler/maths-online/maths/repere"
)

// Code generated by structgen. DO NOT EDIT.

func randDifficultyTag() DifficultyTag {
	choix := [...]DifficultyTag{Diff1, Diff2, Diff3}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randint64() int64 {
	return int64(rand.Intn(1000000))
}

var letterRunes2 = []rune("azertyuiopqsdfghjklmwxcvbn123456789é@!?&èïab ")

func randstring() string {
	b := make([]rune, 50)
	maxLength := len(letterRunes2)
	for i := range b {
		b[i] = letterRunes2[rand.Intn(maxLength)]
	}
	return string(b)
}

func randBlock() exercice.Block {
	choix := [...]exercice.Block{
		randexe_ExpressionFieldBlock(),
		randexe_FigureAffineLineFieldBlock(),
		randexe_FigureBlock(),
		randexe_FigurePointFieldBlock(),
		randexe_FigureVectorFieldBlock(),
		randexe_FigureVectorPairFieldBlock(),
		randexe_FormulaBlock(),
		randexe_FunctionGraphBlock(),
		randexe_FunctionPointsFieldBlock(),
		randexe_FunctionVariationGraphBlock(),
		randexe_NumberFieldBlock(),
		randexe_OrderedListFieldBlock(),
		randexe_RadioFieldBlock(),
		randexe_SignTableBlock(),
		randexe_TableBlock(),
		randexe_TableFieldBlock(),
		randexe_TextBlock(),
		randexe_TreeFieldBlock(),
		randexe_VariationTableBlock(),
		randexe_VariationTableFieldBlock(),
		randexe_VectorFieldBlock(),
	}
	i := rand.Intn(21)
	return choix[i]
}

func randTextKind() exercice.TextKind {
	choix := [...]exercice.TextKind{exercice.Expression, exercice.StaticMath, exercice.Text}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randexe_TextPart() exercice.TextPart {
	return exercice.TextPart{
		Content: randstring(),
		Kind:    randTextKind(),
	}
}

func randComparisonLevel() expression.ComparisonLevel {
	choix := [...]expression.ComparisonLevel{expression.ExpandedSubstitutions, expression.SimpleSubstitutions, expression.Strict}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randexe_ExpressionFieldBlock() exercice.ExpressionFieldBlock {
	return exercice.ExpressionFieldBlock{
		Expression:      randstring(),
		Label:           randexe_TextPart(),
		ComparisonLevel: randComparisonLevel(),
	}
}

func randrep_RandomCoord() repere.RandomCoord {
	return repere.RandomCoord{
		X: randstring(),
		Y: randstring(),
	}
}

func randLabelPos() repere.LabelPos {
	choix := [...]repere.LabelPos{repere.Bottom, repere.BottomLeft, repere.BottomRight, repere.Hide, repere.Left, repere.Right, repere.Top, repere.TopLeft, repere.TopRight}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randrep_RandomLabeledPoint() repere.RandomLabeledPoint {
	return repere.RandomLabeledPoint{
		Color: randstring(),
		Coord: randrep_RandomCoord(),
		Pos:   randLabelPos(),
	}
}

func randrep_NamedRandomLabeledPoint() repere.NamedRandomLabeledPoint {
	return repere.NamedRandomLabeledPoint{
		Name:  randstring(),
		Point: randrep_RandomLabeledPoint(),
	}
}

func randSlicerep_NamedRandomLabeledPoint() []repere.NamedRandomLabeledPoint {
	l := 40 + rand.Intn(10)
	out := make([]repere.NamedRandomLabeledPoint, l)
	for i := range out {
		out[i] = randrep_NamedRandomLabeledPoint()
	}
	return out
}

func randSegmentKind() repere.SegmentKind {
	choix := [...]repere.SegmentKind{repere.SKLine, repere.SKSegment, repere.SKVector}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randrep_Segment() repere.Segment {
	return repere.Segment{
		LabelName: randstring(),
		From:      randstring(),
		To:        randstring(),
		Color:     randstring(),
		LabelPos:  randLabelPos(),
		Kind:      randSegmentKind(),
	}
}

func randSlicerep_Segment() []repere.Segment {
	l := 40 + rand.Intn(10)
	out := make([]repere.Segment, l)
	for i := range out {
		out[i] = randrep_Segment()
	}
	return out
}

func randrep_RandomLine() repere.RandomLine {
	return repere.RandomLine{
		Label: randstring(),
		A:     randstring(),
		B:     randstring(),
		Color: randstring(),
	}
}

func randSlicerep_RandomLine() []repere.RandomLine {
	l := 40 + rand.Intn(10)
	out := make([]repere.RandomLine, l)
	for i := range out {
		out[i] = randrep_RandomLine()
	}
	return out
}

func randrep_RandomDrawings() repere.RandomDrawings {
	return repere.RandomDrawings{
		Points:   randSlicerep_NamedRandomLabeledPoint(),
		Segments: randSlicerep_Segment(),
		Lines:    randSlicerep_RandomLine(),
	}
}

func randint() int {
	return int(rand.Intn(1000000))
}

func randfloat64() float64 {
	return rand.Float64() * float64(rand.Int31())
}

func randrep_Coord() repere.Coord {
	return repere.Coord{
		X: randfloat64(),
		Y: randfloat64(),
	}
}

func randrep_RepereBounds() repere.RepereBounds {
	return repere.RepereBounds{
		Width:  randint(),
		Height: randint(),
		Origin: randrep_Coord(),
	}
}

func randbool() bool {
	i := rand.Int31n(2)
	return i == 1
}

func randexe_FigureBlock() exercice.FigureBlock {
	return exercice.FigureBlock{
		Drawings: randrep_RandomDrawings(),
		Bounds:   randrep_RepereBounds(),
		ShowGrid: randbool(),
	}
}

func randexe_FigureAffineLineFieldBlock() exercice.FigureAffineLineFieldBlock {
	return exercice.FigureAffineLineFieldBlock{
		Label:  randstring(),
		A:      randstring(),
		B:      randstring(),
		Figure: randexe_FigureBlock(),
	}
}

func randexe_CoordExpression() exercice.CoordExpression {
	return exercice.CoordExpression{
		X: randstring(),
		Y: randstring(),
	}
}

func randexe_FigurePointFieldBlock() exercice.FigurePointFieldBlock {
	return exercice.FigurePointFieldBlock{
		Answer: randexe_CoordExpression(),
		Figure: randexe_FigureBlock(),
	}
}

func randexe_FigureVectorFieldBlock() exercice.FigureVectorFieldBlock {
	return exercice.FigureVectorFieldBlock{
		Answer:         randexe_CoordExpression(),
		AnswerOrigin:   randexe_CoordExpression(),
		Figure:         randexe_FigureBlock(),
		MustHaveOrigin: randbool(),
	}
}

func randVectorPairCriterion() exercice.VectorPairCriterion {
	choix := [...]exercice.VectorPairCriterion{exercice.VectorColinear, exercice.VectorEquals, exercice.VectorOrthogonal}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randexe_FigureVectorPairFieldBlock() exercice.FigureVectorPairFieldBlock {
	return exercice.FigureVectorPairFieldBlock{
		Figure:    randexe_FigureBlock(),
		Criterion: randVectorPairCriterion(),
	}
}

func randInterpolated() exercice.Interpolated {
	return exercice.Interpolated(randstring())
}

func randexe_FormulaBlock() exercice.FormulaBlock {
	return exercice.FormulaBlock{
		Parts: randInterpolated(),
	}
}

func randfun_FunctionDecoration() functiongrapher.FunctionDecoration {
	return functiongrapher.FunctionDecoration{
		Label: randstring(),
		Color: randstring(),
	}
}

func randrune() rune {
	return rune(rand.Intn(1000000))
}

func randexp_Variable() expression.Variable {
	return expression.Variable{
		Indice: randstring(),
		Name:   randrune(),
	}
}

func randexe_FunctionDefinition() exercice.FunctionDefinition {
	return exercice.FunctionDefinition{
		Function:   randstring(),
		Decoration: randfun_FunctionDecoration(),
		Variable:   randexp_Variable(),
		From:       randstring(),
		To:         randstring(),
	}
}

func randSliceexe_FunctionDefinition() []exercice.FunctionDefinition {
	l := 40 + rand.Intn(10)
	out := make([]exercice.FunctionDefinition, l)
	for i := range out {
		out[i] = randexe_FunctionDefinition()
	}
	return out
}

func randexe_FunctionGraphBlock() exercice.FunctionGraphBlock {
	return exercice.FunctionGraphBlock{
		Functions: randSliceexe_FunctionDefinition(),
	}
}

func randSlicestring() []string {
	l := 40 + rand.Intn(10)
	out := make([]string, l)
	for i := range out {
		out[i] = randstring()
	}
	return out
}

func randexe_FunctionPointsFieldBlock() exercice.FunctionPointsFieldBlock {
	return exercice.FunctionPointsFieldBlock{
		Function: randstring(),
		Label:    randstring(),
		Variable: randexp_Variable(),
		XGrid:    randSlicestring(),
	}
}

func randexe_FunctionVariationGraphBlock() exercice.FunctionVariationGraphBlock {
	return exercice.FunctionVariationGraphBlock{
		Label: randInterpolated(),
		Xs:    randSlicestring(),
		Fxs:   randSlicestring(),
	}
}

func randexe_NumberFieldBlock() exercice.NumberFieldBlock {
	return exercice.NumberFieldBlock{
		Expression: randstring(),
	}
}

func randSliceInterpolated() []exercice.Interpolated {
	l := 40 + rand.Intn(10)
	out := make([]exercice.Interpolated, l)
	for i := range out {
		out[i] = randInterpolated()
	}
	return out
}

func randexe_OrderedListFieldBlock() exercice.OrderedListFieldBlock {
	return exercice.OrderedListFieldBlock{
		Label:               randstring(),
		Answer:              randSliceInterpolated(),
		AdditionalProposals: randSliceInterpolated(),
	}
}

func randexe_RadioFieldBlock() exercice.RadioFieldBlock {
	return exercice.RadioFieldBlock{
		Answer:     randstring(),
		Proposals:  randSliceInterpolated(),
		AsDropDown: randbool(),
	}
}

func randSignSymbol() exercice.SignSymbol {
	choix := [...]exercice.SignSymbol{exercice.ForbiddenValue, exercice.Nothing, exercice.Zero}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randSliceSignSymbol() []exercice.SignSymbol {
	l := 40 + rand.Intn(10)
	out := make([]exercice.SignSymbol, l)
	for i := range out {
		out[i] = randSignSymbol()
	}
	return out
}

func randSlicebool() []bool {
	l := 40 + rand.Intn(10)
	out := make([]bool, l)
	for i := range out {
		out[i] = randbool()
	}
	return out
}

func randexe_SignTableBlock() exercice.SignTableBlock {
	return exercice.SignTableBlock{
		Label:     randstring(),
		FxSymbols: randSliceSignSymbol(),
		Xs:        randSliceInterpolated(),
		Signs:     randSlicebool(),
	}
}

func randSliceexe_TextPart() []exercice.TextPart {
	l := 40 + rand.Intn(10)
	out := make([]exercice.TextPart, l)
	for i := range out {
		out[i] = randexe_TextPart()
	}
	return out
}

func randSliceSliceexe_TextPart() [][]exercice.TextPart {
	l := 40 + rand.Intn(10)
	out := make([][]exercice.TextPart, l)
	for i := range out {
		out[i] = randSliceexe_TextPart()
	}
	return out
}

func randexe_TableBlock() exercice.TableBlock {
	return exercice.TableBlock{
		HorizontalHeaders: randSliceexe_TextPart(),
		VerticalHeaders:   randSliceexe_TextPart(),
		Values:            randSliceSliceexe_TextPart(),
	}
}

func randSliceSlicestring() [][]string {
	l := 40 + rand.Intn(10)
	out := make([][]string, l)
	for i := range out {
		out[i] = randSlicestring()
	}
	return out
}

func randexe_TableFieldBlock() exercice.TableFieldBlock {
	return exercice.TableFieldBlock{
		HorizontalHeaders: randSliceexe_TextPart(),
		VerticalHeaders:   randSliceexe_TextPart(),
		Answer:            randSliceSlicestring(),
	}
}

func randexe_TextBlock() exercice.TextBlock {
	return exercice.TextBlock{
		Parts:   randInterpolated(),
		Bold:    randbool(),
		Italic:  randbool(),
		Smaller: randbool(),
	}
}

func randexe_TreeNodeAnswer() exercice.TreeNodeAnswer {
	return exercice.TreeNodeAnswer{
		Probabilities: randSlicestring(),
		Value:         randint(),
	}
}

func randexe_TreeFieldBlock() exercice.TreeFieldBlock {
	return exercice.TreeFieldBlock{
		EventsProposals: randSlicestring(),
		AnswerRoot:      randexe_TreeNodeAnswer(),
	}
}

func randexe_VariationTableBlock() exercice.VariationTableBlock {
	return exercice.VariationTableBlock{
		Label: randInterpolated(),
		Xs:    randSlicestring(),
		Fxs:   randSlicestring(),
	}
}

func randexe_VariationTableFieldBlock() exercice.VariationTableFieldBlock {
	return exercice.VariationTableFieldBlock{
		Answer: randexe_VariationTableBlock(),
	}
}

func randexe_VectorFieldBlock() exercice.VectorFieldBlock {
	return exercice.VectorFieldBlock{
		Answer:         randexe_CoordExpression(),
		AcceptColinear: randbool(),
		DisplayColumn:  randbool(),
	}
}

func randSliceBlock() []exercice.Block {
	l := 40 + rand.Intn(10)
	out := make([]exercice.Block, l)
	for i := range out {
		out[i] = randBlock()
	}
	return out
}

func randEnonce() exercice.Enonce {
	return exercice.Enonce(randSliceBlock())
}

func randexe_RandomParameter() exercice.RandomParameter {
	return exercice.RandomParameter{
		Expression: randstring(),
		Variable:   randexp_Variable(),
	}
}

func randSliceexe_RandomParameter() []exercice.RandomParameter {
	l := 40 + rand.Intn(10)
	out := make([]exercice.RandomParameter, l)
	for i := range out {
		out[i] = randexe_RandomParameter()
	}
	return out
}

func randRandomParameters() exercice.RandomParameters {
	return exercice.RandomParameters(randSliceexe_RandomParameter())
}

func randexe_Parameters() exercice.Parameters {
	return exercice.Parameters{
		Variables:  randRandomParameters(),
		Intrinsics: randSlicestring(),
	}
}

func randexe_QuestionPage() exercice.QuestionPage {
	return exercice.QuestionPage{
		Title:      randstring(),
		Enonce:     randEnonce(),
		Parameters: randexe_Parameters(),
	}
}

func randQuestion() Question {
	return Question{
		Id:          randint64(),
		Page:        randexe_QuestionPage(),
		Public:      randbool(),
		IdTeacher:   randint64(),
		Description: randstring(),
	}
}

func randQuestionTag() QuestionTag {
	return QuestionTag{
		Tag:        randstring(),
		IdQuestion: randint64(),
	}
}
