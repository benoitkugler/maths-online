package editor

import "encoding/json"

// Code generated by structgen/interfaces. DO NOT EDIT

// LoopbackClientEventWrapper may be used as replacements for LoopbackClientEvent
// when working with JSON
type LoopbackClientEventWrapper struct {
	Data LoopbackClientEvent
}

func (out *LoopbackClientEventWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data loopbackExerciceValidIn
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data loopbackPing
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data loopbackQuestionCorrectAnswersIn
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 3:
		var data loopbackQuestionValidIn
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item LoopbackClientEventWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case loopbackExerciceValidIn:
		wr = wrapper{Kind: 0, Data: data}
	case loopbackPing:
		wr = wrapper{Kind: 1, Data: data}
	case loopbackQuestionCorrectAnswersIn:
		wr = wrapper{Kind: 2, Data: data}
	case loopbackQuestionValidIn:
		wr = wrapper{Kind: 3, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

const (
	loopbackExerciceValidInLoKind = iota
	loopbackPingLoKind
	loopbackQuestionCorrectAnswersInLoKind
	loopbackQuestionValidInLoKind
)

// LoopbackServerEventWrapper may be used as replacements for LoopbackServerEvent
// when working with JSON
type LoopbackServerEventWrapper struct {
	Data LoopbackServerEvent
}

func (out *LoopbackServerEventWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data loopbackPaused
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data loopbackQuestion
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data loopbackQuestionCorrectAnswersOut
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 3:
		var data loopbackQuestionValidOut
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 4:
		var data loopbackShowExercice
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item LoopbackServerEventWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case loopbackPaused:
		wr = wrapper{Kind: 0, Data: data}
	case loopbackQuestion:
		wr = wrapper{Kind: 1, Data: data}
	case loopbackQuestionCorrectAnswersOut:
		wr = wrapper{Kind: 2, Data: data}
	case loopbackQuestionValidOut:
		wr = wrapper{Kind: 3, Data: data}
	case loopbackShowExercice:
		wr = wrapper{Kind: 4, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

const (
	loopbackPausedLoKind = iota
	loopbackQuestionLoKind
	loopbackQuestionCorrectAnswersOutLoKind
	loopbackQuestionValidOutLoKind
	loopbackShowExerciceLoKind
)
