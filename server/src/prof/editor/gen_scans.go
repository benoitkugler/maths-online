package editor

// Code generated by structgen. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"

	"github.com/lib/pq"
)

func loadJSON(out interface{}, src interface{}) error {
	if src == nil {
		return nil //zero value out
	}
	bs, ok := src.([]byte)
	if !ok {
		return errors.New("not a []byte")
	}
	return json.Unmarshal(bs, out)
}

func dumpJSON(s interface{}) (driver.Value, error) {
	b, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	return driver.Value(string(b)), nil
}

// Set is a set of IDs.
type Set map[int64]bool

func NewSet() Set {
	return map[int64]bool{}
}

// NewSetFromSlice returns a set of unique IDs
func NewSetFromSlice(keys []int64) Set {
	out := make(Set, len(keys))
	for _, key := range keys {
		out[key] = true
	}
	return out
}

// Keys return the IDs contained in the set, as a slice.
func (s Set) Keys() []int64 {
	out := make([]int64, 0, len(s))
	for k := range s {
		out = append(out, k)
	}
	return out
}

func (s Set) Has(key int64) bool {
	_, has := s[key]
	return has
}

func (s Set) Add(key int64) {
	s[key] = true
}

type IDs []int64

func (ids IDs) AsSQL() pq.Int64Array {
	return pq.Int64Array(ids)
}

func (ids IDs) AsSet() Set {
	return NewSetFromSlice(ids)
}

// ScanIDs scans the result of a query returning a
// list of IDs.
func ScanIDs(rs *sql.Rows) (IDs, error) {
	defer rs.Close()
	ints := make(IDs, 0, 16)
	var err error
	for rs.Next() {
		var s int64
		if err = rs.Scan(&s); err != nil {
			return nil, err
		}
		ints = append(ints, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return ints, nil
}

type scanner interface {
	Scan(...interface{}) error
}

// DB groups transaction like objects
type DB interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
	Prepare(query string) (*sql.Stmt, error)
}

func scanOneExercice(row scanner) (Exercice, error) {
	var s Exercice
	err := row.Scan(
		&s.Id,
		&s.Title,
		&s.Description,
		&s.Parameters,
		&s.Flow,
		&s.IdTeacher,
		&s.Public,
	)
	return s, err
}

func ScanExercice(row *sql.Row) (Exercice, error) {
	return scanOneExercice(row)
}

func SelectAllExercices(tx DB) (Exercices, error) {
	rows, err := tx.Query("SELECT * FROM exercices")
	if err != nil {
		return nil, err
	}
	return ScanExercices(rows)
}

// SelectExercice returns the entry matching id.
func SelectExercice(tx DB, id int64) (Exercice, error) {
	row := tx.QueryRow("SELECT * FROM exercices WHERE id = $1", id)
	return ScanExercice(row)
}

// SelectExercices returns the entry matching the given ids.
func SelectExercices(tx DB, ids ...int64) (Exercices, error) {
	rows, err := tx.Query("SELECT * FROM exercices WHERE id = ANY($1)", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanExercices(rows)
}

type Exercices map[int64]Exercice

func (m Exercices) IDs() IDs {
	out := make(IDs, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanExercices(rs *sql.Rows) (Exercices, error) {
	var (
		s   Exercice
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Exercices, 16)
	for rs.Next() {
		s, err = scanOneExercice(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Exercice in the database and returns the item with id filled.
func (item Exercice) Insert(tx DB) (out Exercice, err error) {
	row := tx.QueryRow(`INSERT INTO exercices (
		Title,Description,Parameters,Flow,id_teacher,Public
		) VALUES (
		$1,$2,$3,$4,$5,$6
		) RETURNING 
		Id,Title,Description,Parameters,Flow,id_teacher,Public;
		`, item.Title, item.Description, item.Parameters, item.Flow, item.IdTeacher, item.Public)
	return ScanExercice(row)
}

// Update Exercice in the database and returns the new version.
func (item Exercice) Update(tx DB) (out Exercice, err error) {
	row := tx.QueryRow(`UPDATE exercices SET (
		Title,Description,Parameters,Flow,id_teacher,Public
		) = (
		$2,$3,$4,$5,$6,$7
		) WHERE id = $1 RETURNING 
		Id,Title,Description,Parameters,Flow,id_teacher,Public;
		`, item.Id, item.Title, item.Description, item.Parameters, item.Flow, item.IdTeacher, item.Public)
	return ScanExercice(row)
}

// Deletes the Exercice and returns the item
func DeleteExerciceById(tx DB, id int64) (Exercice, error) {
	row := tx.QueryRow("DELETE FROM exercices WHERE id = $1 RETURNING *;", id)
	return ScanExercice(row)
}

// Deletes the Exercice in the database and returns the ids.
func DeleteExercicesByIDs(tx DB, ids ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM exercices WHERE id = ANY($1) RETURNING id", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func scanOneExerciceQuestion(row scanner) (ExerciceQuestion, error) {
	var s ExerciceQuestion
	err := row.Scan(
		&s.IdExercice,
		&s.IdQuestion,
		&s.Bareme,
		&s.Index,
	)
	return s, err
}

func ScanExerciceQuestion(row *sql.Row) (ExerciceQuestion, error) {
	return scanOneExerciceQuestion(row)
}

func SelectAllExerciceQuestions(tx DB) (ExerciceQuestions, error) {
	rows, err := tx.Query("SELECT * FROM exercice_questions")
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

type ExerciceQuestions []ExerciceQuestion

func ScanExerciceQuestions(rs *sql.Rows) (ExerciceQuestions, error) {
	var (
		s   ExerciceQuestion
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(ExerciceQuestions, 0, 16)
	for rs.Next() {
		s, err = scanOneExerciceQuestion(rs)
		if err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert the links ExerciceQuestion in the database.
func InsertManyExerciceQuestions(tx *sql.Tx, items ...ExerciceQuestion) error {
	if len(items) == 0 {
		return nil
	}

	stmt, err := tx.Prepare(pq.CopyIn("exercice_questions",
		"id_exercice", "id_question", "bareme", "index",
	))
	if err != nil {
		return err
	}

	for _, item := range items {
		_, err = stmt.Exec(item.IdExercice, item.IdQuestion, item.Bareme, item.Index)
		if err != nil {
			return err
		}
	}

	if _, err = stmt.Exec(); err != nil {
		return err
	}

	if err = stmt.Close(); err != nil {
		return err
	}
	return nil
}

// Delete the link ExerciceQuestion in the database.
// Only the 'IdExercice' 'IdQuestion' fields are used.
func (item ExerciceQuestion) Delete(tx DB) error {
	_, err := tx.Exec(`DELETE FROM exercice_questions WHERE 
	id_exercice = $1 AND id_question = $2;`, item.IdExercice, item.IdQuestion)
	return err
}

func scanOneProgression(row scanner) (Progression, error) {
	var s Progression
	err := row.Scan(
		&s.Id,
		&s.IdExercice,
	)
	return s, err
}

func ScanProgression(row *sql.Row) (Progression, error) {
	return scanOneProgression(row)
}

func SelectAllProgressions(tx DB) (Progressions, error) {
	rows, err := tx.Query("SELECT * FROM progressions")
	if err != nil {
		return nil, err
	}
	return ScanProgressions(rows)
}

// SelectProgression returns the entry matching id.
func SelectProgression(tx DB, id int64) (Progression, error) {
	row := tx.QueryRow("SELECT * FROM progressions WHERE id = $1", id)
	return ScanProgression(row)
}

// SelectProgressions returns the entry matching the given ids.
func SelectProgressions(tx DB, ids ...int64) (Progressions, error) {
	rows, err := tx.Query("SELECT * FROM progressions WHERE id = ANY($1)", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanProgressions(rows)
}

type Progressions map[int64]Progression

func (m Progressions) IDs() IDs {
	out := make(IDs, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanProgressions(rs *sql.Rows) (Progressions, error) {
	var (
		s   Progression
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Progressions, 16)
	for rs.Next() {
		s, err = scanOneProgression(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Progression in the database and returns the item with id filled.
func (item Progression) Insert(tx DB) (out Progression, err error) {
	row := tx.QueryRow(`INSERT INTO progressions (
		id_exercice
		) VALUES (
		$1
		) RETURNING 
		Id,id_exercice;
		`, item.IdExercice)
	return ScanProgression(row)
}

// Update Progression in the database and returns the new version.
func (item Progression) Update(tx DB) (out Progression, err error) {
	row := tx.QueryRow(`UPDATE progressions SET (
		id_exercice
		) = (
		$2
		) WHERE id = $1 RETURNING 
		Id,id_exercice;
		`, item.Id, item.IdExercice)
	return ScanProgression(row)
}

// Deletes the Progression and returns the item
func DeleteProgressionById(tx DB, id int64) (Progression, error) {
	row := tx.QueryRow("DELETE FROM progressions WHERE id = $1 RETURNING *;", id)
	return ScanProgression(row)
}

// Deletes the Progression in the database and returns the ids.
func DeleteProgressionsByIDs(tx DB, ids ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM progressions WHERE id = ANY($1) RETURNING id", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func scanOneProgressionQuestion(row scanner) (ProgressionQuestion, error) {
	var s ProgressionQuestion
	err := row.Scan(
		&s.IdProgression,
		&s.IdExercice,
		&s.Index,
		&s.History,
	)
	return s, err
}

func ScanProgressionQuestion(row *sql.Row) (ProgressionQuestion, error) {
	return scanOneProgressionQuestion(row)
}

func SelectAllProgressionQuestions(tx DB) (ProgressionQuestions, error) {
	rows, err := tx.Query("SELECT * FROM progression_questions")
	if err != nil {
		return nil, err
	}
	return ScanProgressionQuestions(rows)
}

type ProgressionQuestions []ProgressionQuestion

func ScanProgressionQuestions(rs *sql.Rows) (ProgressionQuestions, error) {
	var (
		s   ProgressionQuestion
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(ProgressionQuestions, 0, 16)
	for rs.Next() {
		s, err = scanOneProgressionQuestion(rs)
		if err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert the links ProgressionQuestion in the database.
func InsertManyProgressionQuestions(tx *sql.Tx, items ...ProgressionQuestion) error {
	if len(items) == 0 {
		return nil
	}

	stmt, err := tx.Prepare(pq.CopyIn("progression_questions",
		"id_progression", "id_exercice", "index", "history",
	))
	if err != nil {
		return err
	}

	for _, item := range items {
		_, err = stmt.Exec(item.IdProgression, item.IdExercice, item.Index, item.History)
		if err != nil {
			return err
		}
	}

	if _, err = stmt.Exec(); err != nil {
		return err
	}

	if err = stmt.Close(); err != nil {
		return err
	}
	return nil
}

// Delete the link ProgressionQuestion in the database.
// Only the 'IdProgression' 'IdExercice' fields are used.
func (item ProgressionQuestion) Delete(tx DB) error {
	_, err := tx.Exec(`DELETE FROM progression_questions WHERE 
	id_progression = $1 AND id_exercice = $2;`, item.IdProgression, item.IdExercice)
	return err
}

func (s *QuestionHistory) Scan(src interface{}) error  { return (*pq.BoolArray)(s).Scan(src) }
func (s QuestionHistory) Value() (driver.Value, error) { return pq.BoolArray(s).Value() }

func scanOneQuestion(row scanner) (Question, error) {
	var s Question
	err := row.Scan(
		&s.Id,
		&s.Page,
		&s.Public,
		&s.IdTeacher,
		&s.Description,
		&s.NeedExercice,
	)
	return s, err
}

func ScanQuestion(row *sql.Row) (Question, error) {
	return scanOneQuestion(row)
}

func SelectAllQuestions(tx DB) (Questions, error) {
	rows, err := tx.Query("SELECT * FROM questions")
	if err != nil {
		return nil, err
	}
	return ScanQuestions(rows)
}

// SelectQuestion returns the entry matching id.
func SelectQuestion(tx DB, id int64) (Question, error) {
	row := tx.QueryRow("SELECT * FROM questions WHERE id = $1", id)
	return ScanQuestion(row)
}

// SelectQuestions returns the entry matching the given ids.
func SelectQuestions(tx DB, ids ...int64) (Questions, error) {
	rows, err := tx.Query("SELECT * FROM questions WHERE id = ANY($1)", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanQuestions(rows)
}

type Questions map[int64]Question

func (m Questions) IDs() IDs {
	out := make(IDs, 0, len(m))
	for i := range m {
		out = append(out, i)
	}
	return out
}

func ScanQuestions(rs *sql.Rows) (Questions, error) {
	var (
		s   Question
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(Questions, 16)
	for rs.Next() {
		s, err = scanOneQuestion(rs)
		if err != nil {
			return nil, err
		}
		structs[s.Id] = s
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Question in the database and returns the item with id filled.
func (item Question) Insert(tx DB) (out Question, err error) {
	row := tx.QueryRow(`INSERT INTO questions (
		page,public,id_teacher,description,need_exercice
		) VALUES (
		$1,$2,$3,$4,$5
		) RETURNING 
		id,page,public,id_teacher,description,need_exercice;
		`, item.Page, item.Public, item.IdTeacher, item.Description, item.NeedExercice)
	return ScanQuestion(row)
}

// Update Question in the database and returns the new version.
func (item Question) Update(tx DB) (out Question, err error) {
	row := tx.QueryRow(`UPDATE questions SET (
		page,public,id_teacher,description,need_exercice
		) = (
		$2,$3,$4,$5,$6
		) WHERE id = $1 RETURNING 
		id,page,public,id_teacher,description,need_exercice;
		`, item.Id, item.Page, item.Public, item.IdTeacher, item.Description, item.NeedExercice)
	return ScanQuestion(row)
}

// Deletes the Question and returns the item
func DeleteQuestionById(tx DB, id int64) (Question, error) {
	row := tx.QueryRow("DELETE FROM questions WHERE id = $1 RETURNING *;", id)
	return ScanQuestion(row)
}

// Deletes the Question in the database and returns the ids.
func DeleteQuestionsByIDs(tx DB, ids ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM questions WHERE id = ANY($1) RETURNING id", pq.Int64Array(ids))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func scanOneQuestionTag(row scanner) (QuestionTag, error) {
	var s QuestionTag
	err := row.Scan(
		&s.Tag,
		&s.IdQuestion,
	)
	return s, err
}

func ScanQuestionTag(row *sql.Row) (QuestionTag, error) {
	return scanOneQuestionTag(row)
}

func SelectAllQuestionTags(tx DB) (QuestionTags, error) {
	rows, err := tx.Query("SELECT * FROM question_tags")
	if err != nil {
		return nil, err
	}
	return ScanQuestionTags(rows)
}

type QuestionTags []QuestionTag

func ScanQuestionTags(rs *sql.Rows) (QuestionTags, error) {
	var (
		s   QuestionTag
		err error
	)
	defer func() {
		errClose := rs.Close()
		if err == nil {
			err = errClose
		}
	}()
	structs := make(QuestionTags, 0, 16)
	for rs.Next() {
		s, err = scanOneQuestionTag(rs)
		if err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert the links QuestionTag in the database.
func InsertManyQuestionTags(tx *sql.Tx, items ...QuestionTag) error {
	if len(items) == 0 {
		return nil
	}

	stmt, err := tx.Prepare(pq.CopyIn("question_tags",
		"tag", "id_question",
	))
	if err != nil {
		return err
	}

	for _, item := range items {
		_, err = stmt.Exec(item.Tag, item.IdQuestion)
		if err != nil {
			return err
		}
	}

	if _, err = stmt.Exec(); err != nil {
		return err
	}

	if err = stmt.Close(); err != nil {
		return err
	}
	return nil
}

// Delete the link QuestionTag in the database.
// Only the 'IdQuestion' fields are used.
func (item QuestionTag) Delete(tx DB) error {
	_, err := tx.Exec(`DELETE FROM question_tags WHERE 
	id_question = $1;`, item.IdQuestion)
	return err
}

func SelectExercicesByIdTeachers(tx DB, idTeachers ...int64) (Exercices, error) {
	rows, err := tx.Query("SELECT * FROM exercices WHERE id_teacher = ANY($1)", pq.Int64Array(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanExercices(rows)
}

func DeleteExercicesByIdTeachers(tx DB, idTeachers ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM exercices WHERE id_teacher = ANY($1) RETURNING id", pq.Int64Array(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func SelectExerciceQuestionsByIdExercices(tx DB, idExercices ...int64) (ExerciceQuestions, error) {
	rows, err := tx.Query("SELECT * FROM exercice_questions WHERE id_exercice = ANY($1)", pq.Int64Array(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

func DeleteExerciceQuestionsByIdExercices(tx DB, idExercices ...int64) (ExerciceQuestions, error) {
	rows, err := tx.Query("DELETE FROM exercice_questions WHERE id_exercice = ANY($1) RETURNING *", pq.Int64Array(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

func SelectExerciceQuestionsByIdQuestions(tx DB, idQuestions ...int64) (ExerciceQuestions, error) {
	rows, err := tx.Query("SELECT * FROM exercice_questions WHERE id_question = ANY($1)", pq.Int64Array(idQuestions))
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

func DeleteExerciceQuestionsByIdQuestions(tx DB, idQuestions ...int64) (ExerciceQuestions, error) {
	rows, err := tx.Query("DELETE FROM exercice_questions WHERE id_question = ANY($1) RETURNING *", pq.Int64Array(idQuestions))
	if err != nil {
		return nil, err
	}
	return ScanExerciceQuestions(rows)
}

// ByIdExercice returns a map with 'IdExercice' as keys.
func (items ExerciceQuestions) ByIdExercice() map[int64]ExerciceQuestions {
	out := make(map[int64]ExerciceQuestions)
	for _, target := range items {
		out[target.IdExercice] = append(out[target.IdExercice], target)
	}
	return out
}

// IdExercices returns the list of ids of IdExercice
// contained in this link table.
// They are not garanteed to be distinct.
func (items ExerciceQuestions) IdExercices() IDs {
	out := make(IDs, len(items))
	for index, target := range items {
		out[index] = target.IdExercice
	}
	return out
}

// ByIdQuestion returns a map with 'IdQuestion' as keys.
func (items ExerciceQuestions) ByIdQuestion() map[int64]ExerciceQuestions {
	out := make(map[int64]ExerciceQuestions)
	for _, target := range items {
		out[target.IdQuestion] = append(out[target.IdQuestion], target)
	}
	return out
}

// IdQuestions returns the list of ids of IdQuestion
// contained in this link table.
// They are not garanteed to be distinct.
func (items ExerciceQuestions) IdQuestions() IDs {
	out := make(IDs, len(items))
	for index, target := range items {
		out[index] = target.IdQuestion
	}
	return out
}

func SelectProgressionsByIdExercices(tx DB, idExercices ...int64) (Progressions, error) {
	rows, err := tx.Query("SELECT * FROM progressions WHERE id_exercice = ANY($1)", pq.Int64Array(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanProgressions(rows)
}

func DeleteProgressionsByIdExercices(tx DB, idExercices ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM progressions WHERE id_exercice = ANY($1) RETURNING id", pq.Int64Array(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func SelectProgressionQuestionsByIdProgressions(tx DB, idProgressions ...int64) (ProgressionQuestions, error) {
	rows, err := tx.Query("SELECT * FROM progression_questions WHERE id_progression = ANY($1)", pq.Int64Array(idProgressions))
	if err != nil {
		return nil, err
	}
	return ScanProgressionQuestions(rows)
}

func DeleteProgressionQuestionsByIdProgressions(tx DB, idProgressions ...int64) (ProgressionQuestions, error) {
	rows, err := tx.Query("DELETE FROM progression_questions WHERE id_progression = ANY($1) RETURNING *", pq.Int64Array(idProgressions))
	if err != nil {
		return nil, err
	}
	return ScanProgressionQuestions(rows)
}

func SelectProgressionQuestionsByIdExercices(tx DB, idExercices ...int64) (ProgressionQuestions, error) {
	rows, err := tx.Query("SELECT * FROM progression_questions WHERE id_exercice = ANY($1)", pq.Int64Array(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanProgressionQuestions(rows)
}

func DeleteProgressionQuestionsByIdExercices(tx DB, idExercices ...int64) (ProgressionQuestions, error) {
	rows, err := tx.Query("DELETE FROM progression_questions WHERE id_exercice = ANY($1) RETURNING *", pq.Int64Array(idExercices))
	if err != nil {
		return nil, err
	}
	return ScanProgressionQuestions(rows)
}

// ByIdProgression returns a map with 'IdProgression' as keys.
func (items ProgressionQuestions) ByIdProgression() map[int64]ProgressionQuestions {
	out := make(map[int64]ProgressionQuestions)
	for _, target := range items {
		out[target.IdProgression] = append(out[target.IdProgression], target)
	}
	return out
}

// IdProgressions returns the list of ids of IdProgression
// contained in this link table.
// They are not garanteed to be distinct.
func (items ProgressionQuestions) IdProgressions() IDs {
	out := make(IDs, len(items))
	for index, target := range items {
		out[index] = target.IdProgression
	}
	return out
}

// ByIdExercice returns a map with 'IdExercice' as keys.
func (items ProgressionQuestions) ByIdExercice() map[int64]ProgressionQuestions {
	out := make(map[int64]ProgressionQuestions)
	for _, target := range items {
		out[target.IdExercice] = append(out[target.IdExercice], target)
	}
	return out
}

// IdExercices returns the list of ids of IdExercice
// contained in this link table.
// They are not garanteed to be distinct.
func (items ProgressionQuestions) IdExercices() IDs {
	out := make(IDs, len(items))
	for index, target := range items {
		out[index] = target.IdExercice
	}
	return out
}

func SelectQuestionsByIdTeachers(tx DB, idTeachers ...int64) (Questions, error) {
	rows, err := tx.Query("SELECT * FROM questions WHERE id_teacher = ANY($1)", pq.Int64Array(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanQuestions(rows)
}

func DeleteQuestionsByIdTeachers(tx DB, idTeachers ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM questions WHERE id_teacher = ANY($1) RETURNING id", pq.Int64Array(idTeachers))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func SelectQuestionsByNeedExercices(tx DB, needExercices ...int64) (Questions, error) {
	rows, err := tx.Query("SELECT * FROM questions WHERE need_exercice = ANY($1)", pq.Int64Array(needExercices))
	if err != nil {
		return nil, err
	}
	return ScanQuestions(rows)
}

func DeleteQuestionsByNeedExercices(tx DB, needExercices ...int64) (IDs, error) {
	rows, err := tx.Query("DELETE FROM questions WHERE need_exercice = ANY($1) RETURNING id", pq.Int64Array(needExercices))
	if err != nil {
		return nil, err
	}
	return ScanIDs(rows)
}

func SelectQuestionTagsByIdQuestions(tx DB, idQuestions ...int64) (QuestionTags, error) {
	rows, err := tx.Query("SELECT * FROM question_tags WHERE id_question = ANY($1)", pq.Int64Array(idQuestions))
	if err != nil {
		return nil, err
	}
	return ScanQuestionTags(rows)
}

func DeleteQuestionTagsByIdQuestions(tx DB, idQuestions ...int64) (QuestionTags, error) {
	rows, err := tx.Query("DELETE FROM question_tags WHERE id_question = ANY($1) RETURNING *", pq.Int64Array(idQuestions))
	if err != nil {
		return nil, err
	}
	return ScanQuestionTags(rows)
}

// ByIdQuestion returns a map with 'IdQuestion' as keys.
func (items QuestionTags) ByIdQuestion() map[int64]QuestionTags {
	out := make(map[int64]QuestionTags)
	for _, target := range items {
		out[target.IdQuestion] = append(out[target.IdQuestion], target)
	}
	return out
}

// IdQuestions returns the list of ids of IdQuestion
// contained in this link table.
// They are not garanteed to be distinct.
func (items QuestionTags) IdQuestions() IDs {
	out := make(IDs, len(items))
	for index, target := range items {
		out[index] = target.IdQuestion
	}
	return out
}
