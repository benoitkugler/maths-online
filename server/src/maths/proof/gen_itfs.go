package proof

import "encoding/json"

// Code generated by structgen/interfaces. DO NOT EDIT

// AssertionWrapper may be used as replacements for Assertion
// when working with JSON
type AssertionWrapper struct {
	Data Assertion
}

func (out *AssertionWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Kind string
		Data json.RawMessage
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case "Equality":
		var data Equality
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case "Node":
		var data Node
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case "Sequence":
		var data Sequence
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case "Statement":
		var data Statement
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item AssertionWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind string
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case Equality:
		wr = wrapper{Kind: "Equality", Data: data}
	case Node:
		wr = wrapper{Kind: "Node", Data: data}
	case Sequence:
		wr = wrapper{Kind: "Sequence", Data: data}
	case Statement:
		wr = wrapper{Kind: "Statement", Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

const (
	EqualityAsKind  = "Equality"
	NodeAsKind      = "Node"
	SequenceAsKind  = "Sequence"
	StatementAsKind = "Statement"
)

func (ct Assertions) MarshalJSON() ([]byte, error) {
	tmp := make([]AssertionWrapper, len(ct))
	for i, v := range ct {
		tmp[i].Data = v
	}
	return json.Marshal(tmp)
}

func (ct *Assertions) UnmarshalJSON(data []byte) error {
	var tmp []AssertionWrapper
	err := json.Unmarshal(data, &tmp)
	*ct = make(Assertions, len(tmp))
	for i, v := range tmp {
		(*ct)[i] = v.Data
	}
	return err
}

func (item Node) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Left  AssertionWrapper
		Right AssertionWrapper
		Op    Binary
	}
	wr := wrapper{
		Left:  AssertionWrapper{item.Left},
		Right: AssertionWrapper{item.Right},
		Op:    item.Op,
	}
	return json.Marshal(wr)
}

func (item *Node) UnmarshalJSON(src []byte) error {
	type wrapper struct {
		Left  AssertionWrapper
		Right AssertionWrapper
		Op    Binary
	}
	var wr wrapper
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	item.Left = wr.Left.Data
	item.Right = wr.Right.Data
	item.Op = wr.Op
	return nil
}
