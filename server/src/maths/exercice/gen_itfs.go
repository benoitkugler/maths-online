package exercice

import "encoding/json"

// Code generated by structgen/interfaces. DO NOT EDIT

// BlockWrapper may be used as replacements for Block
// when working with JSON
type BlockWrapper struct {
	Data Block
}

func (out *BlockWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data ExpressionFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data FigureAffineLineFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data FigureBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 3:
		var data FigurePointFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 4:
		var data FigureVectorFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 5:
		var data FigureVectorPairFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 6:
		var data FormulaBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 7:
		var data FunctionGraphBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 8:
		var data FunctionPointsFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 9:
		var data FunctionVariationGraphBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 10:
		var data NumberFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 11:
		var data OrderedListFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 12:
		var data RadioFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 13:
		var data SignTableBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 14:
		var data TableBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 15:
		var data TableFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 16:
		var data TextBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 17:
		var data TreeFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 18:
		var data VariationTableBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 19:
		var data VariationTableFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 20:
		var data VectorFieldBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item BlockWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case ExpressionFieldBlock:
		wr = wrapper{Kind: 0, Data: data}
	case FigureAffineLineFieldBlock:
		wr = wrapper{Kind: 1, Data: data}
	case FigureBlock:
		wr = wrapper{Kind: 2, Data: data}
	case FigurePointFieldBlock:
		wr = wrapper{Kind: 3, Data: data}
	case FigureVectorFieldBlock:
		wr = wrapper{Kind: 4, Data: data}
	case FigureVectorPairFieldBlock:
		wr = wrapper{Kind: 5, Data: data}
	case FormulaBlock:
		wr = wrapper{Kind: 6, Data: data}
	case FunctionGraphBlock:
		wr = wrapper{Kind: 7, Data: data}
	case FunctionPointsFieldBlock:
		wr = wrapper{Kind: 8, Data: data}
	case FunctionVariationGraphBlock:
		wr = wrapper{Kind: 9, Data: data}
	case NumberFieldBlock:
		wr = wrapper{Kind: 10, Data: data}
	case OrderedListFieldBlock:
		wr = wrapper{Kind: 11, Data: data}
	case RadioFieldBlock:
		wr = wrapper{Kind: 12, Data: data}
	case SignTableBlock:
		wr = wrapper{Kind: 13, Data: data}
	case TableBlock:
		wr = wrapper{Kind: 14, Data: data}
	case TableFieldBlock:
		wr = wrapper{Kind: 15, Data: data}
	case TextBlock:
		wr = wrapper{Kind: 16, Data: data}
	case TreeFieldBlock:
		wr = wrapper{Kind: 17, Data: data}
	case VariationTableBlock:
		wr = wrapper{Kind: 18, Data: data}
	case VariationTableFieldBlock:
		wr = wrapper{Kind: 19, Data: data}
	case VectorFieldBlock:
		wr = wrapper{Kind: 20, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

const (
	ExpressionFieldBlockBlKind = iota
	FigureAffineLineFieldBlockBlKind
	FigureBlockBlKind
	FigurePointFieldBlockBlKind
	FigureVectorFieldBlockBlKind
	FigureVectorPairFieldBlockBlKind
	FormulaBlockBlKind
	FunctionGraphBlockBlKind
	FunctionPointsFieldBlockBlKind
	FunctionVariationGraphBlockBlKind
	NumberFieldBlockBlKind
	OrderedListFieldBlockBlKind
	RadioFieldBlockBlKind
	SignTableBlockBlKind
	TableBlockBlKind
	TableFieldBlockBlKind
	TextBlockBlKind
	TreeFieldBlockBlKind
	VariationTableBlockBlKind
	VariationTableFieldBlockBlKind
	VectorFieldBlockBlKind
)

func (ct Enonce) MarshalJSON() ([]byte, error) {
	tmp := make([]BlockWrapper, len(ct))
	for i, v := range ct {
		tmp[i].Data = v
	}
	return json.Marshal(tmp)
}

func (ct *Enonce) UnmarshalJSON(data []byte) error {
	var tmp []BlockWrapper
	err := json.Unmarshal(data, &tmp)
	*ct = make(Enonce, len(tmp))
	for i, v := range tmp {
		(*ct)[i] = v.Data
	}
	return err
}
