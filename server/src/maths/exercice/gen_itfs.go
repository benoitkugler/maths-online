package exercice

import "encoding/json"

// Code generated by structgen/interfaces. DO NOT EDIT

// BlockWrapper may be used as replacements for Block
// when working with JSON
type BlockWrapper struct {
	Data Block
}

func (out *BlockWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data FigureBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data FormulaBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data FormulaField
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 3:
		var data ListField
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 4:
		var data NumberField
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 5:
		var data SignTableBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 6:
		var data TextBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 7:
		var data VariationTableBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item BlockWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case FigureBlock:
		wr = wrapper{Kind: 0, Data: data}
	case FormulaBlock:
		wr = wrapper{Kind: 1, Data: data}
	case FormulaField:
		wr = wrapper{Kind: 2, Data: data}
	case ListField:
		wr = wrapper{Kind: 3, Data: data}
	case NumberField:
		wr = wrapper{Kind: 4, Data: data}
	case SignTableBlock:
		wr = wrapper{Kind: 5, Data: data}
	case TextBlock:
		wr = wrapper{Kind: 6, Data: data}
	case VariationTableBlock:
		wr = wrapper{Kind: 7, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

func (ct Enonce) MarshalJSON() ([]byte, error) {
	tmp := make([]BlockWrapper, len(ct))
	for i, v := range ct {
		tmp[i].Data = v
	}
	return json.Marshal(tmp)
}

func (ct *Enonce) UnmarshalJSON(data []byte) error {
	var tmp []BlockWrapper
	err := json.Unmarshal(data, &tmp)
	*ct = make(Enonce, len(tmp))
	for i, v := range tmp {
		(*ct)[i] = v.Data
	}
	return err
}
