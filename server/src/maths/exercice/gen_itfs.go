package exercice

import "encoding/json"

// Code generated by structgen/interfaces. DO NOT EDIT

// blockWrapper may be used as replacements for block
// when working with JSON
type blockWrapper struct {
	Data block
}

func (out *blockWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data Formula
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data FormulaField
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data ListField
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 3:
		var data NumberField
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 4:
		var data TextBlock
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item blockWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case Formula:
		wr = wrapper{Kind: 0, Data: data}
	case FormulaField:
		wr = wrapper{Kind: 1, Data: data}
	case ListField:
		wr = wrapper{Kind: 2, Data: data}
	case NumberField:
		wr = wrapper{Kind: 3, Data: data}
	case TextBlock:
		wr = wrapper{Kind: 4, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}
