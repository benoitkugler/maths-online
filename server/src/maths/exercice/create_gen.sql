
	-- DO NOT EDIT - autogenerated by structgen 
		   
	
CREATE OR REPLACE FUNCTION f_delfunc (OUT func_dropped int
)
AS $func$
DECLARE
    _sql text;
BEGIN
    SELECT
        count(*)::int,
        'DROP FUNCTION ' || string_agg(oid::regprocedure::text, '; DROP FUNCTION ')
    FROM
        pg_proc
    WHERE
        starts_with (proname, 'structgen_validate_json')
        AND pg_function_is_visible(oid) INTO func_dropped,
        _sql;
    -- only returned if trailing DROPs succeed
    IF func_dropped > 0 THEN
        -- only if function(s) found
        EXECUTE _sql;
    END IF;
END
$func$
LANGUAGE plpgsql;

SELECT
    f_delfunc ();

DROP FUNCTION f_delfunc;


	CREATE OR REPLACE FUNCTION structgen_validate_json_string (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		RETURN jsonb_typeof(data) = 'string';
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

	CREATE OR REPLACE FUNCTION structgen_validate_json_number (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		RETURN jsonb_typeof(data) = 'number';
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

	CREATE OR REPLACE FUNCTION structgen_validate_json_struct_1700595950 (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		IF jsonb_typeof(data) != 'object' THEN 
			RETURN FALSE;
		END IF;
		RETURN (SELECT bool_and( 
			key IN ('Indice', 'Name')
		) FROM jsonb_each(data))  
		AND structgen_validate_json_string(data->'Indice')
AND structgen_validate_json_number(data->'Name')
		;
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

	CREATE OR REPLACE FUNCTION structgen_validate_json_struct_1675104059 (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		IF jsonb_typeof(data) != 'object' THEN 
			RETURN FALSE;
		END IF;
		RETURN (SELECT bool_and( 
			key IN ('expression', 'variable')
		) FROM jsonb_each(data))  
		AND structgen_validate_json_string(data->'expression')
AND structgen_validate_json_struct_1700595950(data->'variable')
		;
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

	CREATE OR REPLACE FUNCTION structgen_validate_json_array_struct_1675104059 (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		IF jsonb_typeof(data) = 'null' THEN RETURN TRUE; END IF;
		IF jsonb_typeof(data) != 'array' THEN RETURN FALSE; END IF;
		IF jsonb_array_length(data) = 0 THEN RETURN TRUE; END IF; 
		RETURN (SELECT bool_and( structgen_validate_json_struct_1675104059(value) )  FROM jsonb_array_elements(data)) 
			;
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

	CREATE OR REPLACE FUNCTION structgen_validate_json_array_string (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		IF jsonb_typeof(data) = 'null' THEN RETURN TRUE; END IF;
		IF jsonb_typeof(data) != 'array' THEN RETURN FALSE; END IF;
		IF jsonb_array_length(data) = 0 THEN RETURN TRUE; END IF; 
		RETURN (SELECT bool_and( structgen_validate_json_string(value) )  FROM jsonb_array_elements(data)) 
			;
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

	CREATE OR REPLACE FUNCTION structgen_validate_json_struct_724571229 (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		IF jsonb_typeof(data) != 'object' THEN 
			RETURN FALSE;
		END IF;
		RETURN (SELECT bool_and( 
			key IN ('Variables', 'Intrinsics')
		) FROM jsonb_each(data))  
		AND structgen_validate_json_array_struct_1675104059(data->'Variables')
AND structgen_validate_json_array_string(data->'Intrinsics')
		;
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

CREATE TABLE exercices (
	id serial PRIMARY KEY,
	title varchar  NOT NULL,
	description varchar  NOT NULL,
	parameters jsonb  NOT NULL CONSTRAINT parameters_structgen_validate_json_struct_724571229 CHECK (structgen_validate_json_struct_724571229(parameters))
);

	-- No validation : accept anything
	CREATE OR REPLACE FUNCTION structgen_validate_json_ (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		RETURN TRUE;
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

	CREATE OR REPLACE FUNCTION structgen_validate_json_array_ (data jsonb)
		RETURNS boolean
		AS $f$
	BEGIN
		IF jsonb_typeof(data) = 'null' THEN RETURN TRUE; END IF;
		IF jsonb_typeof(data) != 'array' THEN RETURN FALSE; END IF;
		IF jsonb_array_length(data) = 0 THEN RETURN TRUE; END IF; 
		RETURN (SELECT bool_and( structgen_validate_json_(value) )  FROM jsonb_array_elements(data)) 
			;
	END;
	$f$
	LANGUAGE 'plpgsql'
	IMMUTABLE;

CREATE TABLE questions (
	title varchar  NOT NULL,
	enonce jsonb  CONSTRAINT enonce_structgen_validate_json_array_ CHECK (structgen_validate_json_array_(enonce)),
	parameters jsonb  NOT NULL CONSTRAINT parameters_structgen_validate_json_struct_724571229 CHECK (structgen_validate_json_struct_724571229(parameters)),
	id serial PRIMARY KEY
);

CREATE TABLE question_tags (
	tag varchar  NOT NULL,
	id_question integer  NOT NULL
);
ALTER TABLE question_tags ADD FOREIGN KEY(id_question) REFERENCES questions ON DELETE CASCADE;
ALTER TABLE question_tags  ADD UNIQUE(id_question, tag);