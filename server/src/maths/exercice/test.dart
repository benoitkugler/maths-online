// Code generated by structgen. DO NOT EDIT

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors

String stringFromJson(dynamic json) => json as String;

dynamic stringToJson(String item) => item;

Map<String, String> dictStringStringFromJson(dynamic json) {
  if (json == null) {
    return {};
  }
  return (json as JSON).map((k, v) => MapEntry(k as String, stringFromJson(v)));
}

dynamic dictStringStringToJson(Map<String, String> item) {
  return item.map((k, v) => MapEntry(stringToJson(k), stringToJson(v)));
}

bool boolFromJson(dynamic json) => json as bool;

dynamic boolToJson(bool item) => item;

// github.com/benoitkugler/maths-online/maths/exercice.Formula
class Formula implements Block {
  final String latex;
  final bool isInline;

  const Formula(this.latex, this.isInline);
}

Formula formulaFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Formula(stringFromJson(json['Latex']), boolFromJson(json['IsInline']));
}

JSON formulaToJson(Formula item) {
  return {
    "Latex": stringToJson(item.latex),
    "IsInline": boolToJson(item.isInline)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice.FormulaField
class FormulaField implements Block {
  final String id;

  const FormulaField(this.id);
}

FormulaField formulaFieldFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return FormulaField(stringFromJson(json['Id']));
}

JSON formulaFieldToJson(FormulaField item) {
  return {"Id": stringToJson(item.id)};
}

List<String> listStringFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(stringFromJson).toList();
}

dynamic listStringToJson(List<String> item) {
  return item.map(stringToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice.ListField
class ListField implements Block {
  final String id;
  final List<String> choices;

  const ListField(this.id, this.choices);
}

ListField listFieldFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return ListField(
      stringFromJson(json['Id']), listStringFromJson(json['Choices']));
}

JSON listFieldToJson(ListField item) {
  return {
    "Id": stringToJson(item.id),
    "Choices": listStringToJson(item.choices)
  };
}

// github.com/benoitkugler/maths-online/maths/exercice.TextBlock
class TextBlock implements Block {
  final String text;

  const TextBlock(this.text);
}

TextBlock textBlockFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return TextBlock(stringFromJson(json['Text']));
}

JSON textBlockToJson(TextBlock item) {
  return {"Text": stringToJson(item.text)};
}

abstract class Block {}

Block blockFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as int;
  final data = json['Data'];
  switch (kind) {
    case 0:
      return formulaFromJson(data);
    case 1:
      return formulaFieldFromJson(data);
    case 2:
      return listFieldFromJson(data);
    case 3:
      return textBlockFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON blockToJson(Block item) {
  if (item is Formula) {
    return {'Kind': 0, 'Data': formulaToJson(item)};
  } else if (item is FormulaField) {
    return {'Kind': 1, 'Data': formulaFieldToJson(item)};
  } else if (item is ListField) {
    return {'Kind': 2, 'Data': listFieldToJson(item)};
  } else if (item is TextBlock) {
    return {'Kind': 3, 'Data': textBlockToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

List<Block> listBlockFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(blockFromJson).toList();
}

dynamic listBlockToJson(List<Block> item) {
  return item.map(blockToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice.Question
class Question {
  final List<Block> content;

  const Question(this.content);
}

Question questionFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Question(listBlockFromJson(json['Content']));
}

JSON questionToJson(Question item) {
  return {"Content": listBlockToJson(item.content)};
}

List<Question> listQuestionFromJson(dynamic json) {
  if (json == null) {
    return [];
  }
  return (json as List<dynamic>).map(questionFromJson).toList();
}

dynamic listQuestionToJson(List<Question> item) {
  return item.map(questionToJson).toList();
}

// github.com/benoitkugler/maths-online/maths/exercice.Exercice
class Exercice {
  final String title;
  final String description;
  final Map<String, String> fields;
  final List<Question> questions;

  const Exercice(this.title, this.description, this.fields, this.questions);
}

Exercice exerciceFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return Exercice(
      stringFromJson(json['Title']),
      stringFromJson(json['Description']),
      dictStringStringFromJson(json['Fields']),
      listQuestionFromJson(json['Questions']));
}

JSON exerciceToJson(Exercice item) {
  return {
    "Title": stringToJson(item.title),
    "Description": stringToJson(item.description),
    "Fields": dictStringStringToJson(item.fields),
    "Questions": listQuestionToJson(item.questions)
  };
}
