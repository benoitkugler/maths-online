package exercice

import (
	"math/rand"

	"github.com/benoitkugler/maths-online/maths/repere"
)

// Code generated by structgen. DO NOT EDIT.

func randint64() int64 {
	return int64(rand.Intn(1000000))
}

var letterRunes2 = []rune("azertyuiopqsdfghjklmwxcvbn123456789é@!?&èïab ")

func randstring() string {
	b := make([]rune, 50)
	maxLength := len(letterRunes2)
	for i := range b {
		b[i] = letterRunes2[rand.Intn(maxLength)]
	}
	return string(b)
}

func randrune() rune {
	return rune(rand.Intn(1000000))
}

func randrandomParameter() randomParameter {
	return randomParameter{
		Expression: randstring(),
		Variable:   randrune(),
	}
}

func randSlicerandomParameter() []randomParameter {
	l := rand.Intn(10)
	out := make([]randomParameter, l)
	for i := range out {
		out[i] = randrandomParameter()
	}
	return out
}

func randrandomParameters() randomParameters {
	return randomParameters(randSlicerandomParameter())
}

func randExercice() Exercice {
	return Exercice{
		Id:               randint64(),
		Title:            randstring(),
		Description:      randstring(),
		RandomParameters: randrandomParameters(),
	}
}

func randBlock() Block {
	choix := [...]Block{
		randFigureBlock(),
		randFormulaBlock(),
		randFormulaField(),
		randListField(),
		randNumberField(),
		randSignTableBlock(),
		randTextBlock(),
		randVariationTableBlock(),
	}
	i := rand.Intn(8)
	return choix[i]
}

func randrepereRandomCoord() repere.RandomCoord {
	return repere.RandomCoord{
		X: randstring(),
		Y: randstring(),
	}
}

func randLabelPos() repere.LabelPos {
	choix := [...]repere.LabelPos{repere.Bottom, repere.BottomLeft, repere.BottomRight, repere.Left, repere.Right, repere.Top, repere.TopLeft, repere.TopRight}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randrepereRandomLabeledPoint() repere.RandomLabeledPoint {
	return repere.RandomLabeledPoint{
		Coord: randrepereRandomCoord(),
		Pos:   randLabelPos(),
	}
}

func randMapstringrepereRandomLabeledPoint() map[string]repere.RandomLabeledPoint {
	l := rand.Intn(10)
	out := make(map[string]repere.RandomLabeledPoint, l)
	for i := 0; i < l; i++ {
		out[randstring()] = randrepereRandomLabeledPoint()
	}
	return out
}

func randbool() bool {
	i := rand.Int31n(2)
	return i == 1
}

func randrepereSegment() repere.Segment {
	return repere.Segment{
		LabelName: randstring(),
		From:      randstring(),
		To:        randstring(),
		LabelPos:  randLabelPos(),
		AsVector:  randbool(),
	}
}

func randSlicerepereSegment() []repere.Segment {
	l := rand.Intn(10)
	out := make([]repere.Segment, l)
	for i := range out {
		out[i] = randrepereSegment()
	}
	return out
}

func randrepereRandomLine() repere.RandomLine {
	return repere.RandomLine{
		Label: randstring(),
		A:     randstring(),
		B:     randstring(),
	}
}

func randSlicerepereRandomLine() []repere.RandomLine {
	l := rand.Intn(10)
	out := make([]repere.RandomLine, l)
	for i := range out {
		out[i] = randrepereRandomLine()
	}
	return out
}

func randrepereRandomDrawings() repere.RandomDrawings {
	return repere.RandomDrawings{
		Points:   randMapstringrepereRandomLabeledPoint(),
		Segments: randSlicerepereSegment(),
		Lines:    randSlicerepereRandomLine(),
	}
}

func randint() int {
	return int(rand.Intn(1000000))
}

func randfloat64() float64 {
	return rand.Float64() * float64(rand.Int31())
}

func randrepereCoord() repere.Coord {
	return repere.Coord{
		X: randfloat64(),
		Y: randfloat64(),
	}
}

func randrepereRepereBounds() repere.RepereBounds {
	return repere.RepereBounds{
		Width:  randint(),
		Height: randint(),
		Origin: randrepereCoord(),
	}
}

func randFigureBlock() FigureBlock {
	return FigureBlock{
		Drawings: randrepereRandomDrawings(),
		Bounds:   randrepereRepereBounds(),
		ShowGrid: randbool(),
	}
}

func randFormulaPart() FormulaPart {
	return FormulaPart{
		Content:      randstring(),
		IsExpression: randbool(),
	}
}

func randSliceFormulaPart() []FormulaPart {
	l := rand.Intn(10)
	out := make([]FormulaPart, l)
	for i := range out {
		out[i] = randFormulaPart()
	}
	return out
}

func randFormulaContent() FormulaContent {
	return FormulaContent(randSliceFormulaPart())
}

func randFormulaBlock() FormulaBlock {
	return FormulaBlock{
		Parts: randFormulaContent(),
	}
}

func randFormulaField() FormulaField {
	return FormulaField{
		Expression: randstring(),
	}
}

func randSlicestring() []string {
	l := rand.Intn(10)
	out := make([]string, l)
	for i := range out {
		out[i] = randstring()
	}
	return out
}

func randListField() ListField {
	return ListField{
		Choices: randSlicestring(),
	}
}

func randNumberField() NumberField {
	return NumberField{
		Expression: randstring(),
	}
}

func randSignSymbol() SignSymbol {
	choix := [...]SignSymbol{ForbiddenValue, Nothing, Zero}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randSliceSignSymbol() []SignSymbol {
	l := rand.Intn(10)
	out := make([]SignSymbol, l)
	for i := range out {
		out[i] = randSignSymbol()
	}
	return out
}

func randSlicebool() []bool {
	l := rand.Intn(10)
	out := make([]bool, l)
	for i := range out {
		out[i] = randbool()
	}
	return out
}

func randSignTableBlock() SignTableBlock {
	return SignTableBlock{
		Xs:        randFormulaContent(),
		FxSymbols: randSliceSignSymbol(),
		Signs:     randSlicebool(),
	}
}

func randTextBlock() TextBlock {
	return TextBlock{
		Parts:  randstring(),
		IsHint: randbool(),
	}
}

func randVariationTableBlock() VariationTableBlock {
	return VariationTableBlock{
		Xs:  randSlicestring(),
		Fxs: randSlicestring(),
	}
}

func randSliceBlock() []Block {
	l := rand.Intn(10)
	out := make([]Block, l)
	for i := range out {
		out[i] = randBlock()
	}
	return out
}

func randEnonce() Enonce {
	return Enonce(randSliceBlock())
}

func randQuestion() Question {
	return Question{
		IdExercice: randint64(),
		Title:      randstring(),
		Enonce:     randEnonce(),
	}
}
