package game

import "encoding/json"

// Code generated by structgen/interfaces. DO NOT EDIT

// GameEventWrapper may be used as replacements for GameEvent
// when working with JSON
type GameEventWrapper struct {
	Data GameEvent
}

func (out *GameEventWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data LobbyUpdate
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data PlayerJoin
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data diceThrow
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 3:
		var data gameEnd
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 4:
		var data gameStart
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 5:
		var data move
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 6:
		var data playerAnswerResult
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 7:
		var data playerLeft
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 8:
		var data playerTurn
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 9:
		var data possibleMoves
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 10:
		var data showQuestion
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item GameEventWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case LobbyUpdate:
		wr = wrapper{Kind: 0, Data: data}
	case PlayerJoin:
		wr = wrapper{Kind: 1, Data: data}
	case diceThrow:
		wr = wrapper{Kind: 2, Data: data}
	case gameEnd:
		wr = wrapper{Kind: 3, Data: data}
	case gameStart:
		wr = wrapper{Kind: 4, Data: data}
	case move:
		wr = wrapper{Kind: 5, Data: data}
	case playerAnswerResult:
		wr = wrapper{Kind: 6, Data: data}
	case playerLeft:
		wr = wrapper{Kind: 7, Data: data}
	case playerTurn:
		wr = wrapper{Kind: 8, Data: data}
	case possibleMoves:
		wr = wrapper{Kind: 9, Data: data}
	case showQuestion:
		wr = wrapper{Kind: 10, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}

// clientEventDataWrapper may be used as replacements for clientEventData
// when working with JSON
type clientEventDataWrapper struct {
	Data clientEventData
}

func (out *clientEventDataWrapper) UnmarshalJSON(src []byte) error {
	var wr struct {
		Data json.RawMessage
		Kind int
	}
	err := json.Unmarshal(src, &wr)
	if err != nil {
		return err
	}
	switch wr.Kind {
	case 0:
		var data Ping
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 1:
		var data answer
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data
	case 2:
		var data move
		err = json.Unmarshal(wr.Data, &data)
		out.Data = data

	default:
		panic("exhaustive switch")
	}
	return err
}

func (item clientEventDataWrapper) MarshalJSON() ([]byte, error) {
	type wrapper struct {
		Data interface{}
		Kind int
	}
	var wr wrapper
	switch data := item.Data.(type) {
	case Ping:
		wr = wrapper{Kind: 0, Data: data}
	case answer:
		wr = wrapper{Kind: 1, Data: data}
	case move:
		wr = wrapper{Kind: 2, Data: data}

	default:
		panic("exhaustive switch")
	}
	return json.Marshal(wr)
}
